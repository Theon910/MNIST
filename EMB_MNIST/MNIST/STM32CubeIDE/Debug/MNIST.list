
MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00137f88  08017ec0  08017ec0  00027ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0814fe48  0814fe48  00160a9c  2**0
                  CONTENTS
  4 .ARM          00000008  0814fe48  0814fe48  0015fe48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0814fe50  0814fe50  00160a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0814fe50  0814fe50  0015fe50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0814fe54  0814fe54  0015fe54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a9c  20000000  0814fe58  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00160a9c  2**0
                  CONTENTS
 10 .bss          00019690  20000a9c  20000a9c  00160a9c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  2001a12c  2001a12c  00160a9c  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00160a9c  2**0
                  CONTENTS, READONLY
 13 .comment      00006169  00000000  00000000  00160ad0  2**0
                  CONTENTS, READONLY
 14 .iar.rtmodel  000001e7  00000000  00000000  00166c39  2**0
                  CONTENTS, READONLY
 15 .iar_vfe_header 00000024  00000000  00000000  00166e20  2**2
                  CONTENTS, READONLY
 16 .debug_line   0002ae8b  00000000  00000000  00166e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000064  00000000  00000000  00191ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000221da  00000000  00000000  00191d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000553e  00000000  00000000  001b3f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001df0  00000000  00000000  001b9450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f957d  00000000  00000000  001bb240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00001708  00000000  00000000  002b47bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0002c911  00000000  00000000  002b5ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000df80  00000000  00000000  002e27d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a9c 	.word	0x20000a9c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ea8 	.word	0x08017ea8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000aa0 	.word	0x20000aa0
 80001ec:	08017ea8 	.word	0x08017ea8

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f005 fd58 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f005 fb1a 	bl	8005e84 <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f005 fa37 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f005 faa3 	bl	8005e84 <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f005 f9c0 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f011 f804 	bl	8011a4a <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f010 ffc9 	bl	8011a4a <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f010 fed9 	bl	801192c <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f004 fb3e 	bl	8005e84 <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f004 f9e7 	bl	8005e84 <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f004 f831 	bl	8006210 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f004 f827 	bl	8006210 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f004 f81d 	bl	8006210 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f004 f811 	bl	8006210 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f012 fd72 	bl	80150a0 <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f012 fd18 	bl	80150a0 <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f012 fd2c 	bl	80150f8 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f012 fcd2 	bl	80150f8 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f012 fcda 	bl	8015138 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f012 fc80 	bl	8015138 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f012 fdf2 	bl	801544c <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f012 fd98 	bl	801544c <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f012 fde8 	bl	801551c <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f012 fd8e 	bl	801551c <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f012 fbb0 	bl	8015190 <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f012 fb56 	bl	8015190 <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f012 fdd8 	bl	80156c4 <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f012 fd7e 	bl	80156c4 <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f012 fafc 	bl	80151f0 <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f012 faa2 	bl	80151f0 <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f012 fd38 	bl	801574c <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f012 fcde 	bl	801574c <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f012 fa96 	bl	80152ec <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f012 fa3c 	bl	80152ec <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f003 f930 	bl	8006104 <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f003 f8d2 	bl	8006104 <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f012 fdb8 	bl	8015b0c <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f012 fd5e 	bl	8015b0c <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f012 f9bc 	bl	80153f8 <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f012 f962 	bl	80153f8 <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f012 fd1a 	bl	8015b98 <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f012 fcc0 	bl	8015b98 <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f012 ff42 	bl	80161a4 <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f012 fee8 	bl	80161a4 <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f012 ff12 	bl	8016228 <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f012 feb8 	bl	8016228 <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f012 fee2 	bl	80162ac <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f012 fe88 	bl	80162ac <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f011 fcc6 	bl	8015240 <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f011 fc6c 	bl	8015240 <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f011 fc52 	bl	8015240 <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f011 fbee 	bl	8015240 <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f002 faa8 	bl	8006104 <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f002 fa4e 	bl	8006104 <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f011 fad2 	bl	8015240 <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f011 fb22 	bl	80152ec <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f011 fa72 	bl	8015240 <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f011 fac2 	bl	80152ec <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f011 feb0 	bl	8015bf0 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f011 fe56 	bl	8015bf0 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f011 f906 	bl	8015240 <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00d fc40 	bl	8011a4e <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f010 ff3d 	bl	8015240 <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f010 ff2e 	bl	8015240 <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f010 fef9 	bl	8015240 <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f010 feea 	bl	8015240 <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f001 fb8a 	bl	8005e84 <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f001 fb81 	bl	8005e84 <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <pool_func_mp_array_f32>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4688      	mov	r8, r1
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004a18:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a1a:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8004a1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004a22:	1e48      	subs	r0, r1, #1
 8004a24:	fb10 fe0e 	smulbb	lr, r0, lr
 8004a28:	4615      	mov	r5, r2
 8004a2a:	ebae 0e07 	sub.w	lr, lr, r7
 8004a2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a30:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	44a6      	add	lr, r4
 8004a38:	f1ae 0601 	sub.w	r6, lr, #1
 8004a3c:	469c      	mov	ip, r3
 8004a3e:	1b76      	subs	r6, r6, r5
 8004a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004a42:	4338      	orrs	r0, r7
 8004a44:	f040 80dd 	bne.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a48:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004a4c:	f1a0 0901 	sub.w	r9, r0, #1
 8004a50:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004a54:	fb19 f903 	smulbb	r9, r9, r3
 8004a58:	eba9 0900 	sub.w	r9, r9, r0
 8004a5c:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004a60:	4448      	add	r0, r9
 8004a62:	1e40      	subs	r0, r0, #1
 8004a64:	eba0 0008 	sub.w	r0, r0, r8
 8004a68:	b200      	sxth	r0, r0
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	bf44      	itt	mi
 8004a6e:	b236      	sxthmi	r6, r6
 8004a70:	2e00      	cmpmi	r6, #0
 8004a72:	f140 80c6 	bpl.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a76:	2000      	movs	r0, #0
 8004a78:	000d      	movs	r5, r1
 8004a7a:	9008      	str	r0, [sp, #32]
 8004a7c:	f000 8178 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004a80:	b224      	sxth	r4, r4
 8004a82:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004a86:	9002      	str	r0, [sp, #8]
 8004a88:	9007      	str	r0, [sp, #28]
 8004a8a:	9106      	str	r1, [sp, #24]
 8004a8c:	ea4f 040c 	mov.w	r4, ip
 8004a90:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004d78 <.text_3>
 8004a94:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004a98:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f000 8096 	beq.w	8004bce <pool_func_mp_array_f32+0x1c2>
 8004aa2:	9907      	ldr	r1, [sp, #28]
 8004aa4:	9808      	ldr	r0, [sp, #32]
 8004aa6:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004aaa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004aae:	9103      	str	r1, [sp, #12]
 8004ab0:	f04f 0a00 	mov.w	sl, #0
 8004ab4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004ab8:	f8ad c002 	strh.w	ip, [sp, #2]
 8004abc:	4348      	muls	r0, r1
 8004abe:	b200      	sxth	r0, r0
 8004ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004ac6:	9204      	str	r2, [sp, #16]
 8004ac8:	f8ad 6000 	strh.w	r6, [sp]
 8004acc:	f8cd 5014 	str.w	r5, [sp, #20]
 8004ad0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ad4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ad8:	f9bd e000 	ldrsh.w	lr, [sp]
 8004adc:	2100      	movs	r1, #0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d05d      	beq.n	8004b9e <pool_func_mp_array_f32+0x192>
 8004ae2:	9a03      	ldr	r2, [sp, #12]
 8004ae4:	9804      	ldr	r0, [sp, #16]
 8004ae6:	4362      	muls	r2, r4
 8004ae8:	ab02      	add	r3, sp, #8
 8004aea:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004aee:	5e58      	ldrsh	r0, [r3, r1]
 8004af0:	9009      	str	r0, [sp, #36]	; 0x24
 8004af2:	fa0f f58a 	sxth.w	r5, sl
 8004af6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afc:	42b8      	cmp	r0, r7
 8004afe:	eef0 0a40 	vmov.f32	s1, s0
 8004b02:	da45      	bge.n	8004b90 <pool_func_mp_array_f32+0x184>
 8004b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b06:	fb08 f900 	mul.w	r9, r8, r0
 8004b0a:	1aba      	subs	r2, r7, r2
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	4575      	cmp	r5, lr
 8004b10:	462e      	mov	r6, r5
 8004b12:	da39      	bge.n	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b14:	ebae 0305 	sub.w	r3, lr, r5
 8004b18:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004b1c:	d50f      	bpl.n	8004b3e <pool_func_mp_array_f32+0x132>
 8004b1e:	eb09 0b06 	add.w	fp, r9, r6
 8004b22:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b26:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b2a:	ed9b 1a00 	vldr	s2, [fp]
 8004b2e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	bf58      	it	pl
 8004b38:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b3c:	1c76      	adds	r6, r6, #1
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f000 8022 	beq.w	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b44:	eb09 0b06 	add.w	fp, r9, r6
 8004b48:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b4c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b50:	ed9b 1a00 	vldr	s2, [fp]
 8004b54:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	bf58      	it	pl
 8004b5e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b62:	1c76      	adds	r6, r6, #1
 8004b64:	eb09 0b06 	add.w	fp, r9, r6
 8004b68:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b6c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b70:	ed9b 1a00 	vldr	s2, [fp]
 8004b74:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	bf58      	it	pl
 8004b7e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b82:	1c76      	adds	r6, r6, #1
 8004b84:	1e5b      	subs	r3, r3, #1
 8004b86:	d1dd      	bne.n	8004b44 <pool_func_mp_array_f32+0x138>
 8004b88:	1e52      	subs	r2, r2, #1
 8004b8a:	44c1      	add	r9, r8
 8004b8c:	d1bf      	bne.n	8004b0e <pool_func_mp_array_f32+0x102>
 8004b8e:	4683      	mov	fp, r0
 8004b90:	1c49      	adds	r1, r1, #1
 8004b92:	edcc 0a00 	vstr	s1, [ip]
 8004b96:	42a1      	cmp	r1, r4
 8004b98:	f10c 0c04 	add.w	ip, ip, #4
 8004b9c:	dbad      	blt.n	8004afa <pool_func_mp_array_f32+0xee>
 8004b9e:	9803      	ldr	r0, [sp, #12]
 8004ba0:	f8bd 1000 	ldrh.w	r1, [sp]
 8004ba4:	1c40      	adds	r0, r0, #1
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004bac:	4482      	add	sl, r0
 8004bae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004bb2:	1841      	adds	r1, r0, r1
 8004bb4:	f8ad 1000 	strh.w	r1, [sp]
 8004bb8:	9905      	ldr	r1, [sp, #20]
 8004bba:	1e49      	subs	r1, r1, #1
 8004bbc:	9105      	str	r1, [sp, #20]
 8004bbe:	d189      	bne.n	8004ad4 <pool_func_mp_array_f32+0xc8>
 8004bc0:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004bc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004bc8:	9a04      	ldr	r2, [sp, #16]
 8004bca:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004bce:	9908      	ldr	r1, [sp, #32]
 8004bd0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004bd4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004bd8:	1c49      	adds	r1, r1, #1
 8004bda:	9108      	str	r1, [sp, #32]
 8004bdc:	9907      	ldr	r1, [sp, #28]
 8004bde:	194d      	adds	r5, r1, r5
 8004be0:	9507      	str	r5, [sp, #28]
 8004be2:	9902      	ldr	r1, [sp, #8]
 8004be4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004be8:	194d      	adds	r5, r1, r5
 8004bea:	9502      	str	r5, [sp, #8]
 8004bec:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004bf0:	9d06      	ldr	r5, [sp, #24]
 8004bf2:	19cf      	adds	r7, r1, r7
 8004bf4:	1e6d      	subs	r5, r5, #1
 8004bf6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004bfa:	9506      	str	r5, [sp, #24]
 8004bfc:	f000 80b8 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c00:	e748      	b.n	8004a94 <pool_func_mp_array_f32+0x88>
 8004c02:	0008      	movs	r0, r1
 8004c04:	f000 80b4 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c08:	427f      	negs	r7, r7
 8004c0a:	19e4      	adds	r4, r4, r7
 8004c0c:	f8ad 7000 	strh.w	r7, [sp]
 8004c10:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004c14:	2000      	movs	r0, #0
 8004c16:	9008      	str	r0, [sp, #32]
 8004c18:	f8cd 101c 	str.w	r1, [sp, #28]
 8004c1c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004d78 <.text_3>
 8004c20:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004c24:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <pool_func_mp_array_f32+0x334>
 8004c2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004c32:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	f1ce 0e00 	rsb	lr, lr, #0
 8004c42:	4477      	add	r7, lr
 8004c44:	f8ad c002 	strh.w	ip, [sp, #2]
 8004c48:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	f8ad e006 	strh.w	lr, [sp, #6]
 8004c52:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004c56:	9406      	str	r4, [sp, #24]
 8004c58:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004c5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004c60:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c64:	2600      	movs	r6, #0
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d04e      	beq.n	8004d08 <pool_func_mp_array_f32+0x2fc>
 8004c6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	9904      	ldr	r1, [sp, #16]
 8004c72:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004c76:	435a      	muls	r2, r3
 8004c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c84:	f8cd 1014 	str.w	r1, [sp, #20]
 8004c88:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004c8c:	4551      	cmp	r1, sl
 8004c8e:	eef0 0a40 	vmov.f32	s1, s0
 8004c92:	da2a      	bge.n	8004cea <pool_func_mp_array_f32+0x2de>
 8004c94:	fb03 f901 	mul.w	r9, r3, r1
 8004c98:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4625      	mov	r5, r4
 8004ca0:	da1d      	bge.n	8004cde <pool_func_mp_array_f32+0x2d2>
 8004ca2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004ca6:	46de      	mov	lr, fp
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bf58      	it	pl
 8004cac:	2d00      	cmppl	r5, #0
 8004cae:	d412      	bmi.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb0:	42b9      	cmp	r1, r7
 8004cb2:	bfb8      	it	lt
 8004cb4:	429d      	cmplt	r5, r3
 8004cb6:	da0e      	bge.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb8:	eb09 0b05 	add.w	fp, r9, r5
 8004cbc:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004cc0:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004cc4:	ed9b 1a00 	vldr	s2, [fp]
 8004cc8:	eeb4 1a60 	vcmp.f32	s2, s1
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	bf58      	it	pl
 8004cd2:	eef0 0a41 	vmovpl.f32	s1, s2
 8004cd6:	1c6d      	adds	r5, r5, #1
 8004cd8:	4285      	cmp	r5, r0
 8004cda:	dbe5      	blt.n	8004ca8 <pool_func_mp_array_f32+0x29c>
 8004cdc:	46f3      	mov	fp, lr
 8004cde:	1c49      	adds	r1, r1, #1
 8004ce0:	4551      	cmp	r1, sl
 8004ce2:	4499      	add	r9, r3
 8004ce4:	dbda      	blt.n	8004c9c <pool_func_mp_array_f32+0x290>
 8004ce6:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004cea:	1c76      	adds	r6, r6, #1
 8004cec:	9905      	ldr	r1, [sp, #20]
 8004cee:	edc1 0a00 	vstr	s1, [r1]
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	1d0f      	adds	r7, r1, #4
 8004cf6:	4296      	cmp	r6, r2
 8004cf8:	9705      	str	r7, [sp, #20]
 8004cfa:	dbc5      	blt.n	8004c88 <pool_func_mp_array_f32+0x27c>
 8004cfc:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004d00:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004d04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d0e:	1c40      	adds	r0, r0, #1
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004d16:	1808      	adds	r0, r1, r0
 8004d18:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004d1c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004d24:	1808      	adds	r0, r1, r0
 8004d26:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004d2a:	9806      	ldr	r0, [sp, #24]
 8004d2c:	1e40      	subs	r0, r0, #1
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	d194      	bne.n	8004c5c <pool_func_mp_array_f32+0x250>
 8004d32:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004d36:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004d40:	9908      	ldr	r1, [sp, #32]
 8004d42:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004d46:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004d4a:	190c      	adds	r4, r1, r4
 8004d4c:	9408      	str	r4, [sp, #32]
 8004d4e:	f8bd 4000 	ldrh.w	r4, [sp]
 8004d52:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d56:	19cf      	adds	r7, r1, r7
 8004d58:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004d60:	190c      	adds	r4, r1, r4
 8004d62:	f8ad 4000 	strh.w	r4, [sp]
 8004d66:	9c07      	ldr	r4, [sp, #28]
 8004d68:	1e64      	subs	r4, r4, #1
 8004d6a:	9407      	str	r4, [sp, #28]
 8004d6c:	f47f af58 	bne.w	8004c20 <pool_func_mp_array_f32+0x214>
 8004d70:	b00b      	add	sp, #44	; 0x2c
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d78 <.text_3>:
 8004d78:	cf000000 	.word	0xcf000000

08004d7c <pool_func_ap_array_f32>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	468b      	mov	fp, r1
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	4699      	mov	r9, r3
 8004d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d88:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d8e:	4692      	mov	sl, r2
 8004d90:	1e4f      	subs	r7, r1, #1
 8004d92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004d96:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004d9a:	6880      	ldr	r0, [r0, #8]
 8004d9c:	68ad      	ldr	r5, [r5, #8]
 8004d9e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004da2:	ebac 0c03 	sub.w	ip, ip, r3
 8004da6:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004daa:	4494      	add	ip, r2
 8004dac:	f1ac 0401 	sub.w	r4, ip, #1
 8004db0:	431f      	orrs	r7, r3
 8004db2:	eba4 060a 	sub.w	r6, r4, sl
 8004db6:	f040 80dc 	bne.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004dba:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004dbe:	1e7c      	subs	r4, r7, #1
 8004dc0:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004dc4:	fb14 f408 	smulbb	r4, r4, r8
 8004dc8:	1be4      	subs	r4, r4, r7
 8004dca:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004dce:	193c      	adds	r4, r7, r4
 8004dd0:	1e64      	subs	r4, r4, #1
 8004dd2:	eba4 040b 	sub.w	r4, r4, fp
 8004dd6:	b224      	sxth	r4, r4
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	bf44      	itt	mi
 8004ddc:	b234      	sxthmi	r4, r6
 8004dde:	2c00      	cmpmi	r4, #0
 8004de0:	f140 80c7 	bpl.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004de4:	2400      	movs	r4, #0
 8004de6:	000b      	movs	r3, r1
 8004de8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dea:	f000 81af 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004dee:	b212      	sxth	r2, r2
 8004df0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004df4:	9408      	str	r4, [sp, #32]
 8004df6:	9407      	str	r4, [sp, #28]
 8004df8:	f8cd 1018 	str.w	r1, [sp, #24]
 8004dfc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004e00:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f000 809a 	beq.w	8004f3e <pool_func_ap_array_f32+0x1c2>
 8004e0a:	9907      	ldr	r1, [sp, #28]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004e12:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004e16:	9102      	str	r1, [sp, #8]
 8004e18:	2700      	movs	r7, #0
 8004e1a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004e1e:	434a      	muls	r2, r1
 8004e20:	b212      	sxth	r2, r2
 8004e22:	ae08      	add	r6, sp, #32
 8004e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e26:	46ca      	mov	sl, r9
 8004e28:	5ff1      	ldrsh	r1, [r6, r7]
 8004e2a:	910a      	str	r1, [sp, #40]	; 0x28
 8004e2c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004e30:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004e34:	9505      	str	r5, [sp, #20]
 8004e36:	f8ad 4000 	strh.w	r4, [sp]
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e40:	f9bd c000 	ldrsh.w	ip, [sp]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d063      	beq.n	8004f12 <pool_func_ap_array_f32+0x196>
 8004e4a:	9d02      	ldr	r5, [sp, #8]
 8004e4c:	9905      	ldr	r1, [sp, #20]
 8004e4e:	f8cd e010 	str.w	lr, [sp, #16]
 8004e52:	fb05 f50a 	mul.w	r5, r5, sl
 8004e56:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004e5a:	f8ad b006 	strh.w	fp, [sp, #6]
 8004e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e60:	9b04      	ldr	r3, [sp, #16]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005154 <.text_5>
 8004e68:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005154 <.text_5>
 8004e6c:	da43      	bge.n	8004ef6 <pool_func_ap_array_f32+0x17a>
 8004e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e70:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004e74:	eba3 0804 	sub.w	r8, r3, r4
 8004e78:	fb01 f10b 	mul.w	r1, r1, fp
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	ee10 ea90 	vmov	lr, s1
 8004e82:	b23c      	sxth	r4, r7
 8004e84:	4564      	cmp	r4, ip
 8004e86:	46b9      	mov	r9, r7
 8004e88:	da2e      	bge.n	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004e8a:	ebac 0004 	sub.w	r0, ip, r4
 8004e8e:	44e6      	add	lr, ip
 8004e90:	07c6      	lsls	r6, r0, #31
 8004e92:	ebae 0e04 	sub.w	lr, lr, r4
 8004e96:	d50a      	bpl.n	8004eae <pool_func_ap_array_f32+0x132>
 8004e98:	190c      	adds	r4, r1, r4
 8004e9a:	fb04 240a 	mla	r4, r4, sl, r2
 8004e9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	edd4 0a00 	vldr	s1, [r4]
 8004eaa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eae:	0840      	lsrs	r0, r0, #1
 8004eb0:	f000 801a 	beq.w	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004eb4:	fa01 f489 	sxtah	r4, r1, r9
 8004eb8:	f109 0901 	add.w	r9, r9, #1
 8004ebc:	fb04 240a 	mla	r4, r4, sl, r2
 8004ec0:	fa01 f689 	sxtah	r6, r1, r9
 8004ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ec8:	fb06 260a 	mla	r6, r6, sl, r2
 8004ecc:	edd4 0a00 	vldr	s1, [r4]
 8004ed0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004ed4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ed8:	ed94 1a00 	vldr	s2, [r4]
 8004edc:	1e40      	subs	r0, r0, #1
 8004ede:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ee2:	f109 0901 	add.w	r9, r9, #1
 8004ee6:	d1e5      	bne.n	8004eb4 <pool_func_ap_array_f32+0x138>
 8004ee8:	f1b8 0801 	subs.w	r8, r8, #1
 8004eec:	4459      	add	r1, fp
 8004eee:	d1c8      	bne.n	8004e82 <pool_func_ap_array_f32+0x106>
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	ee00 ea90 	vmov	s1, lr
 8004ef6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004efa:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004efe:	ed85 0a00 	vstr	s0, [r5]
 8004f02:	1c52      	adds	r2, r2, #1
 8004f04:	1d2d      	adds	r5, r5, #4
 8004f06:	4552      	cmp	r2, sl
 8004f08:	dba9      	blt.n	8004e5e <pool_func_ap_array_f32+0xe2>
 8004f0a:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004f0e:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004f12:	9902      	ldr	r1, [sp, #8]
 8004f14:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004f18:	1c49      	adds	r1, r1, #1
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	f8bd 1000 	ldrh.w	r1, [sp]
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	f8ad 1000 	strh.w	r1, [sp]
 8004f26:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	19cf      	adds	r7, r1, r7
 8004f2e:	1e52      	subs	r2, r2, #1
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	d183      	bne.n	8004e3c <pool_func_ap_array_f32+0xc0>
 8004f34:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004f38:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004f3c:	9d05      	ldr	r5, [sp, #20]
 8004f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f40:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004f44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f48:	1c49      	adds	r1, r1, #1
 8004f4a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f4c:	9907      	ldr	r1, [sp, #28]
 8004f4e:	188a      	adds	r2, r1, r2
 8004f50:	9207      	str	r2, [sp, #28]
 8004f52:	9908      	ldr	r1, [sp, #32]
 8004f54:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004f58:	188a      	adds	r2, r1, r2
 8004f5a:	9208      	str	r2, [sp, #32]
 8004f5c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8004f60:	9a06      	ldr	r2, [sp, #24]
 8004f62:	18cb      	adds	r3, r1, r3
 8004f64:	1e52      	subs	r2, r2, #1
 8004f66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f6a:	9206      	str	r2, [sp, #24]
 8004f6c:	f000 80ee 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f70:	e744      	b.n	8004dfc <pool_func_ap_array_f32+0x80>
 8004f72:	000f      	movs	r7, r1
 8004f74:	f000 80ea 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f78:	425b      	negs	r3, r3
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	2700      	movs	r7, #0
 8004f7e:	f8ad 3000 	strh.w	r3, [sp]
 8004f82:	f8ad 200a 	strh.w	r2, [sp, #10]
 8004f86:	9709      	str	r7, [sp, #36]	; 0x24
 8004f88:	f8cd 1020 	str.w	r1, [sp, #32]
 8004f8c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f90:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	f000 80c1 	beq.w	800511c <pool_func_ap_array_f32+0x3a0>
 8004f9a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8004f9e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004fa8:	9204      	str	r2, [sp, #16]
 8004faa:	4276      	negs	r6, r6
 8004fac:	19a4      	adds	r4, r4, r6
 8004fae:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fb2:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004fb6:	9505      	str	r5, [sp, #20]
 8004fb8:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004fbc:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004fc0:	f8cd 101c 	str.w	r1, [sp, #28]
 8004fc4:	f8ad b006 	strh.w	fp, [sp, #6]
 8004fc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fcc:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	f000 8085 	beq.w	80050e2 <pool_func_ap_array_f32+0x366>
 8004fd8:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004fdc:	9c04      	ldr	r4, [sp, #16]
 8004fde:	9a05      	ldr	r2, [sp, #20]
 8004fe0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004fe4:	f8ad a00c 	strh.w	sl, [sp, #12]
 8004fe8:	4365      	muls	r5, r4
 8004fea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004fee:	9506      	str	r5, [sp, #24]
 8004ff0:	f9bd 5000 	ldrsh.w	r5, [sp]
 8004ff4:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005154 <.text_5>
 8004ffe:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005154 <.text_5>
 8005002:	da5d      	bge.n	80050c0 <pool_func_ap_array_f32+0x344>
 8005004:	930a      	str	r3, [sp, #40]	; 0x28
 8005006:	fb09 fe05 	mul.w	lr, r9, r5
 800500a:	462b      	mov	r3, r5
 800500c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005010:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005014:	ee10 2a90 	vmov	r2, s1
 8005018:	4545      	cmp	r5, r8
 800501a:	462f      	mov	r7, r5
 800501c:	da44      	bge.n	80050a8 <pool_func_ap_array_f32+0x32c>
 800501e:	eba8 0405 	sub.w	r4, r8, r5
 8005022:	07e6      	lsls	r6, r4, #31
 8005024:	d513      	bpl.n	800504e <pool_func_ap_array_f32+0x2d2>
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf58      	it	pl
 800502a:	2f00      	cmppl	r7, #0
 800502c:	d40e      	bmi.n	800504c <pool_func_ap_array_f32+0x2d0>
 800502e:	455b      	cmp	r3, fp
 8005030:	bfb8      	it	lt
 8005032:	454f      	cmplt	r7, r9
 8005034:	da0a      	bge.n	800504c <pool_func_ap_array_f32+0x2d0>
 8005036:	eb0e 0607 	add.w	r6, lr, r7
 800503a:	fb06 160a 	mla	r6, r6, sl, r1
 800503e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005042:	1c52      	adds	r2, r2, #1
 8005044:	edd6 0a00 	vldr	s1, [r6]
 8005048:	ee30 0a20 	vadd.f32	s0, s0, s1
 800504c:	1c7f      	adds	r7, r7, #1
 800504e:	0864      	lsrs	r4, r4, #1
 8005050:	d02a      	beq.n	80050a8 <pool_func_ap_array_f32+0x32c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d405      	bmi.n	8005062 <pool_func_ap_array_f32+0x2e6>
 8005056:	2f00      	cmp	r7, #0
 8005058:	bf48      	it	mi
 800505a:	1c7e      	addmi	r6, r7, #1
 800505c:	d410      	bmi.n	8005080 <pool_func_ap_array_f32+0x304>
 800505e:	455b      	cmp	r3, fp
 8005060:	db01      	blt.n	8005066 <pool_func_ap_array_f32+0x2ea>
 8005062:	1c7e      	adds	r6, r7, #1
 8005064:	e01d      	b.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005066:	1c7e      	adds	r6, r7, #1
 8005068:	454f      	cmp	r7, r9
 800506a:	da09      	bge.n	8005080 <pool_func_ap_array_f32+0x304>
 800506c:	4477      	add	r7, lr
 800506e:	fb07 170a 	mla	r7, r7, sl, r1
 8005072:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005076:	1c52      	adds	r2, r2, #1
 8005078:	edd7 0a00 	vldr	s1, [r7]
 800507c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005080:	2e00      	cmp	r6, #0
 8005082:	d40e      	bmi.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005084:	455b      	cmp	r3, fp
 8005086:	bfb8      	it	lt
 8005088:	454e      	cmplt	r6, r9
 800508a:	da0a      	bge.n	80050a2 <pool_func_ap_array_f32+0x326>
 800508c:	eb0e 0706 	add.w	r7, lr, r6
 8005090:	fb07 170a 	mla	r7, r7, sl, r1
 8005094:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005098:	1c52      	adds	r2, r2, #1
 800509a:	edd7 0a00 	vldr	s1, [r7]
 800509e:	ee30 0a20 	vadd.f32	s0, s0, s1
 80050a2:	1c77      	adds	r7, r6, #1
 80050a4:	1e64      	subs	r4, r4, #1
 80050a6:	d1d4      	bne.n	8005052 <pool_func_ap_array_f32+0x2d6>
 80050a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050aa:	1c5b      	adds	r3, r3, #1
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	44ce      	add	lr, r9
 80050b0:	dbb2      	blt.n	8005018 <pool_func_ap_array_f32+0x29c>
 80050b2:	463b      	mov	r3, r7
 80050b4:	ee00 2a90 	vmov	s1, r2
 80050b8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80050bc:	f8ad b00c 	strh.w	fp, [sp, #12]
 80050c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80050c4:	9d06      	ldr	r5, [sp, #24]
 80050c6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80050ca:	ed85 0a00 	vstr	s0, [r5]
 80050ce:	1c49      	adds	r1, r1, #1
 80050d0:	9a06      	ldr	r2, [sp, #24]
 80050d2:	1d15      	adds	r5, r2, #4
 80050d4:	4551      	cmp	r1, sl
 80050d6:	9506      	str	r5, [sp, #24]
 80050d8:	db8a      	blt.n	8004ff0 <pool_func_ap_array_f32+0x274>
 80050da:	f8ad 9006 	strh.w	r9, [sp, #6]
 80050de:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80050e2:	9904      	ldr	r1, [sp, #16]
 80050e4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050e8:	1c49      	adds	r1, r1, #1
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80050f0:	1851      	adds	r1, r2, r1
 80050f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80050f6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	f8ad 1004 	strh.w	r1, [sp, #4]
 8005104:	9907      	ldr	r1, [sp, #28]
 8005106:	1e49      	subs	r1, r1, #1
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	f47f af5d 	bne.w	8004fc8 <pool_func_ap_array_f32+0x24c>
 800510e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005112:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005116:	9d05      	ldr	r5, [sp, #20]
 8005118:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005122:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005126:	188a      	adds	r2, r1, r2
 8005128:	9209      	str	r2, [sp, #36]	; 0x24
 800512a:	f8bd 2000 	ldrh.w	r2, [sp]
 800512e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005132:	18cb      	adds	r3, r1, r3
 8005134:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005138:	f8ad 300a 	strh.w	r3, [sp, #10]
 800513c:	188a      	adds	r2, r1, r2
 800513e:	f8ad 2000 	strh.w	r2, [sp]
 8005142:	9a08      	ldr	r2, [sp, #32]
 8005144:	1e52      	subs	r2, r2, #1
 8005146:	9208      	str	r2, [sp, #32]
 8005148:	f47f af20 	bne.w	8004f8c <pool_func_ap_array_f32+0x210>
 800514c:	b00c      	add	sp, #48	; 0x30
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005154 <.text_5>:
 8005154:	00000000 	.word	0x00000000

08005158 <pool_func_mp_kernel_array_f32>:
 8005158:	b470      	push	{r4, r5, r6}
 800515a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800515e:	42a1      	cmp	r1, r4
 8005160:	d257      	bcs.n	8005212 <pool_func_mp_kernel_array_f32+0xba>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d051      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005166:	f013 0203 	ands.w	r2, r3, #3
 800516a:	460d      	mov	r5, r1
 800516c:	4606      	mov	r6, r0
 800516e:	d011      	beq.n	8005194 <pool_func_mp_kernel_array_f32+0x3c>
 8005170:	ed96 0a00 	vldr	s0, [r6]
 8005174:	edd5 0a00 	vldr	s1, [r5]
 8005178:	eef4 0a40 	vcmp.f32	s1, s0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	bf58      	it	pl
 8005182:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005186:	ed86 0a00 	vstr	s0, [r6]
 800518a:	1e52      	subs	r2, r2, #1
 800518c:	1d36      	adds	r6, r6, #4
 800518e:	1d2d      	adds	r5, r5, #4
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1ed      	bne.n	8005170 <pool_func_mp_kernel_array_f32+0x18>
 8005194:	089a      	lsrs	r2, r3, #2
 8005196:	d038      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005198:	edd5 0a00 	vldr	s1, [r5]
 800519c:	edd6 1a00 	vldr	s3, [r6]
 80051a0:	eef4 0a61 	vcmp.f32	s1, s3
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	bf48      	it	mi
 80051aa:	eef0 0a61 	vmovmi.f32	s1, s3
 80051ae:	edc6 0a00 	vstr	s1, [r6]
 80051b2:	edd5 0a01 	vldr	s1, [r5, #4]
 80051b6:	edd6 1a01 	vldr	s3, [r6, #4]
 80051ba:	ed96 0a02 	vldr	s0, [r6, #8]
 80051be:	eef4 0a61 	vcmp.f32	s1, s3
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	bf48      	it	mi
 80051c8:	eef0 0a61 	vmovmi.f32	s1, s3
 80051cc:	edc6 0a01 	vstr	s1, [r6, #4]
 80051d0:	ed95 1a02 	vldr	s2, [r5, #8]
 80051d4:	edd6 1a03 	vldr	s3, [r6, #12]
 80051d8:	eeb4 1a40 	vcmp.f32	s2, s0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	bf48      	it	mi
 80051e2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80051e6:	ed86 1a02 	vstr	s2, [r6, #8]
 80051ea:	edd5 0a03 	vldr	s1, [r5, #12]
 80051ee:	eef4 0a61 	vcmp.f32	s1, s3
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	bf58      	it	pl
 80051f8:	eef0 1a60 	vmovpl.f32	s3, s1
 80051fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8005200:	1e52      	subs	r2, r2, #1
 8005202:	3610      	adds	r6, #16
 8005204:	3510      	adds	r5, #16
 8005206:	2a00      	cmp	r2, #0
 8005208:	d1c6      	bne.n	8005198 <pool_func_mp_kernel_array_f32+0x40>
 800520a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800520e:	42a1      	cmp	r1, r4
 8005210:	d3a7      	bcc.n	8005162 <pool_func_mp_kernel_array_f32+0xa>
 8005212:	bc70      	pop	{r4, r5, r6}
 8005214:	4770      	bx	lr
	...

08005218 <pool_func_ap_kernel_array_f32>:
 8005218:	b4f0      	push	{r4, r5, r6, r7}
 800521a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800521e:	9c05      	ldr	r4, [sp, #20]
 8005220:	42a9      	cmp	r1, r5
 8005222:	d251      	bcs.n	80052c8 <pool_func_ap_kernel_array_f32+0xb0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d04a      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005228:	f013 0203 	ands.w	r2, r3, #3
 800522c:	460e      	mov	r6, r1
 800522e:	4607      	mov	r7, r0
 8005230:	f000 800f 	beq.w	8005252 <pool_func_ap_kernel_array_f32+0x3a>
 8005234:	ed96 0a00 	vldr	s0, [r6]
 8005238:	2c01      	cmp	r4, #1
 800523a:	bf1c      	itt	ne
 800523c:	edd7 0a00 	vldrne	s1, [r7]
 8005240:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005244:	ed87 0a00 	vstr	s0, [r7]
 8005248:	1e52      	subs	r2, r2, #1
 800524a:	1d3f      	adds	r7, r7, #4
 800524c:	1d36      	adds	r6, r6, #4
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f0      	bne.n	8005234 <pool_func_ap_kernel_array_f32+0x1c>
 8005252:	089a      	lsrs	r2, r3, #2
 8005254:	d033      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005256:	2c01      	cmp	r4, #1
 8005258:	edd6 1a00 	vldr	s3, [r6]
 800525c:	d10c      	bne.n	8005278 <pool_func_ap_kernel_array_f32+0x60>
 800525e:	edc7 1a00 	vstr	s3, [r7]
 8005262:	ed96 0a01 	vldr	s0, [r6, #4]
 8005266:	ed87 0a01 	vstr	s0, [r7, #4]
 800526a:	edd6 1a02 	vldr	s3, [r6, #8]
 800526e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005272:	edd6 1a03 	vldr	s3, [r6, #12]
 8005276:	e01b      	b.n	80052b0 <pool_func_ap_kernel_array_f32+0x98>
 8005278:	edd7 0a00 	vldr	s1, [r7]
 800527c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005280:	ed87 0a00 	vstr	s0, [r7]
 8005284:	ed97 1a01 	vldr	s2, [r7, #4]
 8005288:	ed96 0a01 	vldr	s0, [r6, #4]
 800528c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005290:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005294:	ed87 0a01 	vstr	s0, [r7, #4]
 8005298:	edd6 0a02 	vldr	s1, [r6, #8]
 800529c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80052a8:	ed96 1a03 	vldr	s2, [r6, #12]
 80052ac:	ee70 1a01 	vadd.f32	s3, s0, s2
 80052b0:	edc7 1a03 	vstr	s3, [r7, #12]
 80052b4:	1e52      	subs	r2, r2, #1
 80052b6:	3710      	adds	r7, #16
 80052b8:	3610      	adds	r6, #16
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1cb      	bne.n	8005256 <pool_func_ap_kernel_array_f32+0x3e>
 80052be:	2400      	movs	r4, #0
 80052c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052c4:	42a9      	cmp	r1, r5
 80052c6:	d3ad      	bcc.n	8005224 <pool_func_ap_kernel_array_f32+0xc>
 80052c8:	9904      	ldr	r1, [sp, #16]
 80052ca:	b399      	cbz	r1, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052cc:	ee00 1a10 	vmov	s0, r1
 80052d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80052d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052d8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80052dc:	b353      	cbz	r3, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052de:	f013 0103 	ands.w	r1, r3, #3
 80052e2:	d009      	beq.n	80052f8 <pool_func_ap_kernel_array_f32+0xe0>
 80052e4:	edd0 0a00 	vldr	s1, [r0]
 80052e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052ec:	edc0 0a00 	vstr	s1, [r0]
 80052f0:	1e49      	subs	r1, r1, #1
 80052f2:	f100 0004 	add.w	r0, r0, #4
 80052f6:	d1f5      	bne.n	80052e4 <pool_func_ap_kernel_array_f32+0xcc>
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	d01b      	beq.n	8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052fc:	edd0 0a00 	vldr	s1, [r0]
 8005300:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005304:	edc0 0a00 	vstr	s1, [r0]
 8005308:	1e5b      	subs	r3, r3, #1
 800530a:	ed90 1a01 	vldr	s2, [r0, #4]
 800530e:	edd0 0a02 	vldr	s1, [r0, #8]
 8005312:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005316:	ed80 1a01 	vstr	s2, [r0, #4]
 800531a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800531e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005322:	edc0 0a02 	vstr	s1, [r0, #8]
 8005326:	ee21 1a00 	vmul.f32	s2, s2, s0
 800532a:	ed80 1a03 	vstr	s2, [r0, #12]
 800532e:	f100 0010 	add.w	r0, r0, #16
 8005332:	d1e3      	bne.n	80052fc <pool_func_ap_kernel_array_f32+0xe4>
 8005334:	bcf0      	pop	{r4, r5, r6, r7}
 8005336:	4770      	bx	lr

08005338 <forward_mp>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	6962      	ldr	r2, [r4, #20]
 8005342:	8811      	ldrh	r1, [r2, #0]
 8005344:	2900      	cmp	r1, #0
 8005346:	bf1a      	itte	ne
 8005348:	6850      	ldrne	r0, [r2, #4]
 800534a:	1d00      	addne	r0, r0, #4
 800534c:	2004      	moveq	r0, #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	2800      	cmp	r0, #0
 8005352:	bf14      	ite	ne
 8005354:	6805      	ldrne	r5, [r0, #0]
 8005356:	2500      	moveq	r5, #0
 8005358:	2901      	cmp	r1, #1
 800535a:	bfc6      	itte	gt
 800535c:	6850      	ldrgt	r0, [r2, #4]
 800535e:	3010      	addgt	r0, #16
 8005360:	2004      	movle	r0, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	68ea      	ldr	r2, [r5, #12]
 8005366:	2800      	cmp	r0, #0
 8005368:	bf14      	ite	ne
 800536a:	6807      	ldrne	r7, [r0, #0]
 800536c:	2700      	moveq	r7, #0
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	68d0      	ldr	r0, [r2, #12]
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	9009      	str	r0, [sp, #36]	; 0x24
 8005376:	6889      	ldr	r1, [r1, #8]
 8005378:	9108      	str	r1, [sp, #32]
 800537a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800537e:	6851      	ldr	r1, [r2, #4]
 8005380:	69a2      	ldr	r2, [r4, #24]
 8005382:	69e0      	ldr	r0, [r4, #28]
 8005384:	9007      	str	r0, [sp, #28]
 8005386:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005388:	6a20      	ldr	r0, [r4, #32]
 800538a:	960d      	str	r6, [sp, #52]	; 0x34
 800538c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005390:	69ac      	ldr	r4, [r5, #24]
 8005392:	69bd      	ldr	r5, [r7, #24]
 8005394:	f8dc 7000 	ldr.w	r7, [ip]
 8005398:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800539c:	68a4      	ldr	r4, [r4, #8]
 800539e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80053a2:	427f      	negs	r7, r7
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	9700      	str	r7, [sp, #0]
 80053a8:	f000 80d9 	beq.w	800555e <forward_mp+0x226>
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	4276      	negs	r6, r6
 80053b0:	960c      	str	r6, [sp, #48]	; 0x30
 80053b2:	fb01 f508 	mul.w	r5, r1, r8
 80053b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80053b8:	9d00      	ldr	r5, [sp, #0]
 80053ba:	9b00      	ldr	r3, [sp, #0]
 80053bc:	9f00      	ldr	r7, [sp, #0]
 80053be:	426d      	negs	r5, r5
 80053c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053c2:	bfcc      	ite	gt
 80053c4:	2600      	movgt	r6, #0
 80053c6:	9e00      	ldrle	r6, [sp, #0]
 80053c8:	1aeb      	subs	r3, r5, r3
 80053ca:	9d07      	ldr	r5, [sp, #28]
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	bf88      	it	hi
 80053d0:	462b      	movhi	r3, r5
 80053d2:	19df      	adds	r7, r3, r7
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80b7 	beq.w	800554c <forward_mp+0x214>
 80053de:	fb08 fa06 	mul.w	sl, r8, r6
 80053e2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9006      	str	r0, [sp, #24]
 80053ee:	9605      	str	r6, [sp, #20]
 80053f0:	9704      	str	r7, [sp, #16]
 80053f2:	4268      	negs	r0, r5
 80053f4:	9f03      	ldr	r7, [sp, #12]
 80053f6:	9a02      	ldr	r2, [sp, #8]
 80053f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80053fc:	bfcc      	ite	gt
 80053fe:	2000      	movgt	r0, #0
 8005400:	4628      	movle	r0, r5
 8005402:	1b7f      	subs	r7, r7, r5
 8005404:	4297      	cmp	r7, r2
 8005406:	bf88      	it	hi
 8005408:	4617      	movhi	r7, r2
 800540a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800540c:	197f      	adds	r7, r7, r5
 800540e:	1a3f      	subs	r7, r7, r0
 8005410:	1880      	adds	r0, r0, r2
 8005412:	4348      	muls	r0, r1
 8005414:	434f      	muls	r7, r1
 8005416:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800541a:	b311      	cbz	r1, 8005462 <forward_mp+0x12a>
 800541c:	f011 0003 	ands.w	r0, r1, #3
 8005420:	4672      	mov	r2, lr
 8005422:	4666      	mov	r6, ip
 8005424:	f000 8006 	beq.w	8005434 <forward_mp+0xfc>
 8005428:	f856 9b04 	ldr.w	r9, [r6], #4
 800542c:	f842 9b04 	str.w	r9, [r2], #4
 8005430:	1e40      	subs	r0, r0, #1
 8005432:	d1f9      	bne.n	8005428 <forward_mp+0xf0>
 8005434:	0888      	lsrs	r0, r1, #2
 8005436:	d014      	beq.n	8005462 <forward_mp+0x12a>
 8005438:	ed96 0a00 	vldr	s0, [r6]
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1e40      	subs	r0, r0, #1
 8005442:	edd6 0a01 	vldr	s1, [r6, #4]
 8005446:	edc2 0a01 	vstr	s1, [r2, #4]
 800544a:	ed96 0a02 	vldr	s0, [r6, #8]
 800544e:	ed82 0a02 	vstr	s0, [r2, #8]
 8005452:	edd6 0a03 	vldr	s1, [r6, #12]
 8005456:	edc2 0a03 	vstr	s1, [r2, #12]
 800545a:	3210      	adds	r2, #16
 800545c:	3610      	adds	r6, #16
 800545e:	2800      	cmp	r0, #0
 8005460:	d1ea      	bne.n	8005438 <forward_mp+0x100>
 8005462:	9805      	ldr	r0, [sp, #20]
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	4290      	cmp	r0, r2
 8005468:	da66      	bge.n	8005538 <forward_mp+0x200>
 800546a:	4610      	mov	r0, r2
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	1a82      	subs	r2, r0, r2
 8005470:	46e2      	mov	sl, ip
 8005472:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005476:	45da      	cmp	sl, fp
 8005478:	d25a      	bcs.n	8005530 <forward_mp+0x1f8>
 800547a:	2900      	cmp	r1, #0
 800547c:	d054      	beq.n	8005528 <forward_mp+0x1f0>
 800547e:	f011 0003 	ands.w	r0, r1, #3
 8005482:	4656      	mov	r6, sl
 8005484:	46f1      	mov	r9, lr
 8005486:	d012      	beq.n	80054ae <forward_mp+0x176>
 8005488:	ed99 0a00 	vldr	s0, [r9]
 800548c:	edd6 0a00 	vldr	s1, [r6]
 8005490:	eef4 0a40 	vcmp.f32	s1, s0
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	bf58      	it	pl
 800549a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800549e:	1e40      	subs	r0, r0, #1
 80054a0:	1d36      	adds	r6, r6, #4
 80054a2:	ed89 0a00 	vstr	s0, [r9]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f109 0904 	add.w	r9, r9, #4
 80054ac:	d1ec      	bne.n	8005488 <forward_mp+0x150>
 80054ae:	0888      	lsrs	r0, r1, #2
 80054b0:	f000 803a 	beq.w	8005528 <forward_mp+0x1f0>
 80054b4:	edd6 0a00 	vldr	s1, [r6]
 80054b8:	edd9 1a00 	vldr	s3, [r9]
 80054bc:	eef4 0a61 	vcmp.f32	s1, s3
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	bf48      	it	mi
 80054c6:	eef0 0a61 	vmovmi.f32	s1, s3
 80054ca:	edc9 0a00 	vstr	s1, [r9]
 80054ce:	edd6 0a01 	vldr	s1, [r6, #4]
 80054d2:	edd9 1a01 	vldr	s3, [r9, #4]
 80054d6:	ed99 0a02 	vldr	s0, [r9, #8]
 80054da:	eef4 0a61 	vcmp.f32	s1, s3
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	bf48      	it	mi
 80054e4:	eef0 0a61 	vmovmi.f32	s1, s3
 80054e8:	edc9 0a01 	vstr	s1, [r9, #4]
 80054ec:	ed96 1a02 	vldr	s2, [r6, #8]
 80054f0:	edd9 1a03 	vldr	s3, [r9, #12]
 80054f4:	eeb4 1a40 	vcmp.f32	s2, s0
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	bf48      	it	mi
 80054fe:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005502:	ed89 1a02 	vstr	s2, [r9, #8]
 8005506:	edd6 0a03 	vldr	s1, [r6, #12]
 800550a:	eef4 0a61 	vcmp.f32	s1, s3
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf58      	it	pl
 8005514:	eef0 1a60 	vmovpl.f32	s3, s1
 8005518:	1e40      	subs	r0, r0, #1
 800551a:	3610      	adds	r6, #16
 800551c:	edc9 1a03 	vstr	s3, [r9, #12]
 8005520:	2800      	cmp	r0, #0
 8005522:	f109 0910 	add.w	r9, r9, #16
 8005526:	d1c5      	bne.n	80054b4 <forward_mp+0x17c>
 8005528:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800552c:	45da      	cmp	sl, fp
 800552e:	d3a4      	bcc.n	800547a <forward_mp+0x142>
 8005530:	1e52      	subs	r2, r2, #1
 8005532:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005536:	d19b      	bne.n	8005470 <forward_mp+0x138>
 8005538:	9806      	ldr	r0, [sp, #24]
 800553a:	1945      	adds	r5, r0, r5
 800553c:	1e5b      	subs	r3, r3, #1
 800553e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005542:	f47f af56 	bne.w	80053f2 <forward_mp+0xba>
 8005546:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800554a:	9a02      	ldr	r2, [sp, #8]
 800554c:	9d00      	ldr	r5, [sp, #0]
 800554e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005550:	195d      	adds	r5, r3, r5
 8005552:	9500      	str	r5, [sp, #0]
 8005554:	9d01      	ldr	r5, [sp, #4]
 8005556:	1e6d      	subs	r5, r5, #1
 8005558:	9501      	str	r5, [sp, #4]
 800555a:	f47f af2d 	bne.w	80053b8 <forward_mp+0x80>
 800555e:	b00e      	add	sp, #56	; 0x38
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005564 <forward_ap>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	4607      	mov	r7, r0
 800556a:	b097      	sub	sp, #92	; 0x5c
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	8811      	ldrh	r1, [r2, #0]
 8005570:	2900      	cmp	r1, #0
 8005572:	bf1a      	itte	ne
 8005574:	6850      	ldrne	r0, [r2, #4]
 8005576:	1d00      	addne	r0, r0, #4
 8005578:	2004      	moveq	r0, #4
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	2800      	cmp	r0, #0
 800557e:	bf14      	ite	ne
 8005580:	6804      	ldrne	r4, [r0, #0]
 8005582:	2400      	moveq	r4, #0
 8005584:	2901      	cmp	r1, #1
 8005586:	bfc6      	itte	gt
 8005588:	6850      	ldrgt	r0, [r2, #4]
 800558a:	3010      	addgt	r0, #16
 800558c:	2004      	movle	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	68dd      	ldr	r5, [r3, #12]
 8005594:	2800      	cmp	r0, #0
 8005596:	bf14      	ite	ne
 8005598:	6806      	ldrne	r6, [r0, #0]
 800559a:	2600      	moveq	r6, #0
 800559c:	68f2      	ldr	r2, [r6, #12]
 800559e:	68d0      	ldr	r0, [r2, #12]
 80055a0:	950d      	str	r5, [sp, #52]	; 0x34
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	920c      	str	r2, [sp, #48]	; 0x30
 80055a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	69fd      	ldr	r5, [r7, #28]
 80055b0:	9505      	str	r5, [sp, #20]
 80055b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
 80055b6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80055b8:	9516      	str	r5, [sp, #88]	; 0x58
 80055ba:	69a4      	ldr	r4, [r4, #24]
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	68a5      	ldr	r5, [r4, #8]
 80055c0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80055c4:	69b4      	ldr	r4, [r6, #24]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80055cc:	4252      	negs	r2, r2
 80055ce:	2800      	cmp	r0, #0
 80055d0:	9201      	str	r2, [sp, #4]
 80055d2:	f000 811c 	beq.w	800580e <forward_ap+0x2aa>
 80055d6:	9c05      	ldr	r4, [sp, #20]
 80055d8:	f1c9 0900 	rsb	r9, r9, #0
 80055dc:	435c      	muls	r4, r3
 80055de:	fb01 f20c 	mul.w	r2, r1, ip
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80055e8:	9414      	str	r4, [sp, #80]	; 0x50
 80055ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80055ec:	9a01      	ldr	r2, [sp, #4]
 80055ee:	9801      	ldr	r0, [sp, #4]
 80055f0:	9c01      	ldr	r4, [sp, #4]
 80055f2:	4252      	negs	r2, r2
 80055f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f6:	bfcc      	ite	gt
 80055f8:	2600      	movgt	r6, #0
 80055fa:	9e01      	ldrle	r6, [sp, #4]
 80055fc:	1a10      	subs	r0, r2, r0
 80055fe:	9a05      	ldr	r2, [sp, #20]
 8005600:	4290      	cmp	r0, r2
 8005602:	bf88      	it	hi
 8005604:	4610      	movhi	r0, r2
 8005606:	1904      	adds	r4, r0, r4
 8005608:	9815      	ldr	r0, [sp, #84]	; 0x54
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 80f4 	beq.w	80057fc <forward_ap+0x298>
 8005614:	fb0c f006 	mul.w	r0, ip, r6
 8005618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800561a:	9012      	str	r0, [sp, #72]	; 0x48
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	1b30      	subs	r0, r6, r4
 8005620:	9011      	str	r0, [sp, #68]	; 0x44
 8005622:	970e      	str	r7, [sp, #56]	; 0x38
 8005624:	f8cd c01c 	str.w	ip, [sp, #28]
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800562e:	950a      	str	r5, [sp, #40]	; 0x28
 8005630:	9609      	str	r6, [sp, #36]	; 0x24
 8005632:	9408      	str	r4, [sp, #32]
 8005634:	9800      	ldr	r0, [sp, #0]
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	f8dd a000 	ldr.w	sl, [sp]
 800563c:	4240      	negs	r0, r0
 800563e:	9800      	ldr	r0, [sp, #0]
 8005640:	bfcc      	ite	gt
 8005642:	f04f 0900 	movgt.w	r9, #0
 8005646:	f8dd 9000 	ldrle.w	r9, [sp]
 800564a:	1a10      	subs	r0, r2, r0
 800564c:	9a06      	ldr	r2, [sp, #24]
 800564e:	4290      	cmp	r0, r2
 8005650:	bf88      	it	hi
 8005652:	4610      	movhi	r0, r2
 8005654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	4482      	add	sl, r0
 800565a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800565c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800565e:	eba9 030a 	sub.w	r3, r9, sl
 8005662:	4343      	muls	r3, r0
 8005664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005666:	444a      	add	r2, r9
 8005668:	434a      	muls	r2, r1
 800566a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	ebaa 0409 	sub.w	r4, sl, r9
 800567a:	434c      	muls	r4, r1
 800567c:	2800      	cmp	r0, #0
 800567e:	bf14      	ite	ne
 8005680:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005682:	461e      	moveq	r6, r3
 8005684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005686:	2701      	movs	r7, #1
 8005688:	4290      	cmp	r0, r2
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f280 80a4 	bge.w	80057da <forward_ap+0x276>
 8005692:	1a12      	subs	r2, r2, r0
 8005694:	ebaa 0009 	sub.w	r0, sl, r9
 8005698:	900f      	str	r0, [sp, #60]	; 0x3c
 800569a:	9310      	str	r3, [sp, #64]	; 0x40
 800569c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800569e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a0:	4480      	add	r8, r0
 80056a2:	4543      	cmp	r3, r8
 80056a4:	46a9      	mov	r9, r5
 80056a6:	bf0c      	ite	eq
 80056a8:	4633      	moveq	r3, r6
 80056aa:	2300      	movne	r3, #0
 80056ac:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 80056b0:	45e1      	cmp	r9, ip
 80056b2:	d254      	bcs.n	800575e <forward_ap+0x1fa>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d04d      	beq.n	8005754 <forward_ap+0x1f0>
 80056b8:	f011 0003 	ands.w	r0, r1, #3
 80056bc:	46ca      	mov	sl, r9
 80056be:	46f3      	mov	fp, lr
 80056c0:	f000 8010 	beq.w	80056e4 <forward_ap+0x180>
 80056c4:	ed9a 0a00 	vldr	s0, [sl]
 80056c8:	2f01      	cmp	r7, #1
 80056ca:	bf1c      	itt	ne
 80056cc:	eddb 0a00 	vldrne	s1, [fp]
 80056d0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80056d4:	ed8b 0a00 	vstr	s0, [fp]
 80056d8:	1e40      	subs	r0, r0, #1
 80056da:	f10b 0b04 	add.w	fp, fp, #4
 80056de:	f10a 0a04 	add.w	sl, sl, #4
 80056e2:	d1ef      	bne.n	80056c4 <forward_ap+0x160>
 80056e4:	0888      	lsrs	r0, r1, #2
 80056e6:	d035      	beq.n	8005754 <forward_ap+0x1f0>
 80056e8:	2f01      	cmp	r7, #1
 80056ea:	edda 1a00 	vldr	s3, [sl]
 80056ee:	d10d      	bne.n	800570c <forward_ap+0x1a8>
 80056f0:	edcb 1a00 	vstr	s3, [fp]
 80056f4:	ed9a 0a01 	vldr	s0, [sl, #4]
 80056f8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80056fc:	edda 1a02 	vldr	s3, [sl, #8]
 8005700:	edcb 1a02 	vstr	s3, [fp, #8]
 8005704:	edda 1a03 	vldr	s3, [sl, #12]
 8005708:	e01c      	b.n	8005744 <forward_ap+0x1e0>
 800570a:	bf00      	nop
 800570c:	eddb 0a00 	vldr	s1, [fp]
 8005710:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005714:	ed8b 0a00 	vstr	s0, [fp]
 8005718:	ed9b 1a01 	vldr	s2, [fp, #4]
 800571c:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005720:	eddb 1a02 	vldr	s3, [fp, #8]
 8005724:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005728:	ed8b 0a01 	vstr	s0, [fp, #4]
 800572c:	edda 0a02 	vldr	s1, [sl, #8]
 8005730:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005734:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005738:	ed9b 0a03 	vldr	s0, [fp, #12]
 800573c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005740:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005744:	edcb 1a03 	vstr	s3, [fp, #12]
 8005748:	1e40      	subs	r0, r0, #1
 800574a:	f10b 0b10 	add.w	fp, fp, #16
 800574e:	f10a 0a10 	add.w	sl, sl, #16
 8005752:	d1c9      	bne.n	80056e8 <forward_ap+0x184>
 8005754:	2700      	movs	r7, #0
 8005756:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800575a:	45e1      	cmp	r9, ip
 800575c:	d3aa      	bcc.n	80056b4 <forward_ap+0x150>
 800575e:	b3ab      	cbz	r3, 80057cc <forward_ap+0x268>
 8005760:	ee00 3a10 	vmov	s0, r3
 8005764:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005768:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800576c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005770:	b361      	cbz	r1, 80057cc <forward_ap+0x268>
 8005772:	f011 0003 	ands.w	r0, r1, #3
 8005776:	4673      	mov	r3, lr
 8005778:	f000 800a 	beq.w	8005790 <forward_ap+0x22c>
 800577c:	edd3 0a00 	vldr	s1, [r3]
 8005780:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005784:	edc3 0a00 	vstr	s1, [r3]
 8005788:	1e40      	subs	r0, r0, #1
 800578a:	f103 0304 	add.w	r3, r3, #4
 800578e:	d1f5      	bne.n	800577c <forward_ap+0x218>
 8005790:	0888      	lsrs	r0, r1, #2
 8005792:	d01b      	beq.n	80057cc <forward_ap+0x268>
 8005794:	edd3 0a00 	vldr	s1, [r3]
 8005798:	ee60 0a80 	vmul.f32	s1, s1, s0
 800579c:	edc3 0a00 	vstr	s1, [r3]
 80057a0:	1e40      	subs	r0, r0, #1
 80057a2:	ed93 1a01 	vldr	s2, [r3, #4]
 80057a6:	edd3 0a02 	vldr	s1, [r3, #8]
 80057aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057ae:	ed83 1a01 	vstr	s2, [r3, #4]
 80057b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80057b6:	ed93 1a03 	vldr	s2, [r3, #12]
 80057ba:	edc3 0a02 	vstr	s1, [r3, #8]
 80057be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057c2:	ed83 1a03 	vstr	s2, [r3, #12]
 80057c6:	f103 0310 	add.w	r3, r3, #16
 80057ca:	d1e3      	bne.n	8005794 <forward_ap+0x230>
 80057cc:	9803      	ldr	r0, [sp, #12]
 80057ce:	2700      	movs	r7, #0
 80057d0:	1e52      	subs	r2, r2, #1
 80057d2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80057d6:	f47f af61 	bne.w	800569c <forward_ap+0x138>
 80057da:	9800      	ldr	r0, [sp, #0]
 80057dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057de:	1810      	adds	r0, r2, r0
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80057e6:	9802      	ldr	r0, [sp, #8]
 80057e8:	1e40      	subs	r0, r0, #1
 80057ea:	9002      	str	r0, [sp, #8]
 80057ec:	f47f af22 	bne.w	8005634 <forward_ap+0xd0>
 80057f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057fa:	4690      	mov	r8, r2
 80057fc:	9c01      	ldr	r4, [sp, #4]
 80057fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005800:	1914      	adds	r4, r2, r4
 8005802:	9401      	str	r4, [sp, #4]
 8005804:	9c04      	ldr	r4, [sp, #16]
 8005806:	1e64      	subs	r4, r4, #1
 8005808:	9404      	str	r4, [sp, #16]
 800580a:	f47f aeef 	bne.w	80055ec <forward_ap+0x88>
 800580e:	b017      	add	sp, #92	; 0x5c
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005814 <ai_array_fmt_name>:
 8005814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005818:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800581c:	d062      	beq.n	80058e4 <ai_array_fmt_name+0xd0>
 800581e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005822:	1a89      	subs	r1, r1, r2
 8005824:	f000 8094 	beq.w	8005950 <ai_array_fmt_name+0x13c>
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	d071      	beq.n	8005914 <ai_array_fmt_name+0x100>
 8005830:	1a89      	subs	r1, r1, r2
 8005832:	d063      	beq.n	80058fc <ai_array_fmt_name+0xe8>
 8005834:	1fc9      	subs	r1, r1, #7
 8005836:	f000 808e 	beq.w	8005956 <ai_array_fmt_name+0x142>
 800583a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800583e:	1a89      	subs	r1, r1, r2
 8005840:	d05f      	beq.n	8005902 <ai_array_fmt_name+0xee>
 8005842:	390f      	subs	r1, #15
 8005844:	f000 808a 	beq.w	800595c <ai_array_fmt_name+0x148>
 8005848:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800584c:	1a89      	subs	r1, r1, r2
 800584e:	d05b      	beq.n	8005908 <ai_array_fmt_name+0xf4>
 8005850:	391f      	subs	r1, #31
 8005852:	f000 8086 	beq.w	8005962 <ai_array_fmt_name+0x14e>
 8005856:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800585a:	1a89      	subs	r1, r1, r2
 800585c:	d057      	beq.n	800590e <ai_array_fmt_name+0xfa>
 800585e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005e34 <.text_15>
 8005862:	1a89      	subs	r1, r1, r2
 8005864:	f000 808f 	beq.w	8005986 <ai_array_fmt_name+0x172>
 8005868:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800586c:	1a89      	subs	r1, r1, r2
 800586e:	f000 8087 	beq.w	8005980 <ai_array_fmt_name+0x16c>
 8005872:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005e38 <.text_16>
 8005876:	1a89      	subs	r1, r1, r2
 8005878:	d05e      	beq.n	8005938 <ai_array_fmt_name+0x124>
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	1a89      	subs	r1, r1, r2
 8005880:	d057      	beq.n	8005932 <ai_array_fmt_name+0x11e>
 8005882:	1a89      	subs	r1, r1, r2
 8005884:	d049      	beq.n	800591a <ai_array_fmt_name+0x106>
 8005886:	1fc9      	subs	r1, r1, #7
 8005888:	d059      	beq.n	800593e <ai_array_fmt_name+0x12a>
 800588a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800588e:	1a89      	subs	r1, r1, r2
 8005890:	d046      	beq.n	8005920 <ai_array_fmt_name+0x10c>
 8005892:	390f      	subs	r1, #15
 8005894:	d056      	beq.n	8005944 <ai_array_fmt_name+0x130>
 8005896:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800589a:	1a89      	subs	r1, r1, r2
 800589c:	d043      	beq.n	8005926 <ai_array_fmt_name+0x112>
 800589e:	391f      	subs	r1, #31
 80058a0:	d053      	beq.n	800594a <ai_array_fmt_name+0x136>
 80058a2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80058a6:	1a89      	subs	r1, r1, r2
 80058a8:	d040      	beq.n	800592c <ai_array_fmt_name+0x118>
 80058aa:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005e34 <.text_15>
 80058ae:	1a89      	subs	r1, r1, r2
 80058b0:	d063      	beq.n	800597a <ai_array_fmt_name+0x166>
 80058b2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058b6:	1a89      	subs	r1, r1, r2
 80058b8:	d05c      	beq.n	8005974 <ai_array_fmt_name+0x160>
 80058ba:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005e3c <.text_17>
 80058be:	1a89      	subs	r1, r1, r2
 80058c0:	d019      	beq.n	80058f6 <ai_array_fmt_name+0xe2>
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	1a89      	subs	r1, r1, r2
 80058c8:	d00f      	beq.n	80058ea <ai_array_fmt_name+0xd6>
 80058ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ce:	1a89      	subs	r1, r1, r2
 80058d0:	d00e      	beq.n	80058f0 <ai_array_fmt_name+0xdc>
 80058d2:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005e40 <.text_18>
 80058d6:	1a89      	subs	r1, r1, r2
 80058d8:	d049      	beq.n	800596e <ai_array_fmt_name+0x15a>
 80058da:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058de:	1a89      	subs	r1, r1, r2
 80058e0:	d042      	beq.n	8005968 <ai_array_fmt_name+0x154>
 80058e2:	e053      	b.n	800598c <ai_array_fmt_name+0x178>
 80058e4:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80058e8:	4770      	bx	lr
 80058ea:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80058ee:	4770      	bx	lr
 80058f0:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80058f4:	4770      	bx	lr
 80058f6:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80058fa:	4770      	bx	lr
 80058fc:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005900:	4770      	bx	lr
 8005902:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005906:	4770      	bx	lr
 8005908:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800590c:	4770      	bx	lr
 800590e:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005912:	4770      	bx	lr
 8005914:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005918:	4770      	bx	lr
 800591a:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800591e:	4770      	bx	lr
 8005920:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005924:	4770      	bx	lr
 8005926:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800592a:	4770      	bx	lr
 800592c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005930:	4770      	bx	lr
 8005932:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005936:	4770      	bx	lr
 8005938:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800593c:	4770      	bx	lr
 800593e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005942:	4770      	bx	lr
 8005944:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005948:	4770      	bx	lr
 800594a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800594e:	4770      	bx	lr
 8005950:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005954:	4770      	bx	lr
 8005956:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800595a:	4770      	bx	lr
 800595c:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005960:	4770      	bx	lr
 8005962:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005966:	4770      	bx	lr
 8005968:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 800596c:	4770      	bx	lr
 800596e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005972:	4770      	bx	lr
 8005974:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005978:	4770      	bx	lr
 800597a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800597e:	4770      	bx	lr
 8005980:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005984:	4770      	bx	lr
 8005986:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800598a:	4770      	bx	lr
 800598c:	f36f 000d 	bfc	r0, #0, #14
 8005990:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005994:	2840      	cmp	r0, #64	; 0x40
 8005996:	d009      	beq.n	80059ac <ai_array_fmt_name+0x198>
 8005998:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005e44 <.text_19>
 800599c:	4288      	cmp	r0, r1
 800599e:	d00b      	beq.n	80059b8 <ai_array_fmt_name+0x1a4>
 80059a0:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005e48 <.text_20>
 80059a4:	4288      	cmp	r0, r1
 80059a6:	d004      	beq.n	80059b2 <ai_array_fmt_name+0x19e>
 80059a8:	a07a      	add	r0, pc, #488	; (adr r0, 8005b94 <.text_8>)
 80059aa:	4770      	bx	lr
 80059ac:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 80059b0:	4770      	bx	lr
 80059b2:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 80059b6:	4770      	bx	lr
 80059b8:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80059bc:	4770      	bx	lr

080059be <ai_array_fmt_exported>:
 80059be:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80059c2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80059c6:	d068      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059cc:	1a89      	subs	r1, r1, r2
 80059ce:	d064      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	1a89      	subs	r1, r1, r2
 80059d6:	d062      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059d8:	1a89      	subs	r1, r1, r2
 80059da:	d05e      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059dc:	1fc9      	subs	r1, r1, #7
 80059de:	d05c      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80059e4:	1a89      	subs	r1, r1, r2
 80059e6:	d058      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e8:	390f      	subs	r1, #15
 80059ea:	d056      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059ec:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80059f0:	1a89      	subs	r1, r1, r2
 80059f2:	d054      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f4:	391f      	subs	r1, #31
 80059f6:	d052      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80059fc:	1a89      	subs	r1, r1, r2
 80059fe:	d04e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a00:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005e34 <.text_15>
 8005a04:	1a89      	subs	r1, r1, r2
 8005a06:	d04a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a08:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a0c:	1a89      	subs	r1, r1, r2
 8005a0e:	d046      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a10:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005e38 <.text_16>
 8005a14:	1a89      	subs	r1, r1, r2
 8005a16:	d040      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1c:	1a89      	subs	r1, r1, r2
 8005a1e:	d03e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a20:	1a89      	subs	r1, r1, r2
 8005a22:	d03a      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a24:	1fc9      	subs	r1, r1, #7
 8005a26:	d038      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a28:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a2c:	1a89      	subs	r1, r1, r2
 8005a2e:	d034      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a30:	390f      	subs	r1, #15
 8005a32:	d032      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a34:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a38:	1a89      	subs	r1, r1, r2
 8005a3a:	d030      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a3c:	391f      	subs	r1, #31
 8005a3e:	d02e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a40:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a44:	1a89      	subs	r1, r1, r2
 8005a46:	d02a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a48:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005e34 <.text_15>
 8005a4c:	1a89      	subs	r1, r1, r2
 8005a4e:	d026      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a50:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a54:	1a89      	subs	r1, r1, r2
 8005a56:	d022      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a58:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005e3c <.text_17>
 8005a5c:	1a89      	subs	r1, r1, r2
 8005a5e:	d01e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a64:	1a89      	subs	r1, r1, r2
 8005a66:	d018      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a6c:	1a89      	subs	r1, r1, r2
 8005a6e:	d016      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a70:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005e40 <.text_18>
 8005a74:	1a89      	subs	r1, r1, r2
 8005a76:	d012      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a78:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a7c:	1a89      	subs	r1, r1, r2
 8005a7e:	d00e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a80:	f36f 000d 	bfc	r0, #0, #14
 8005a84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a88:	2840      	cmp	r0, #64	; 0x40
 8005a8a:	bf1f      	itttt	ne
 8005a8c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e44 <.text_19>
 8005a90:	4298      	cmpne	r0, r3
 8005a92:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e48 <.text_20>
 8005a96:	4298      	cmpne	r0, r3
 8005a98:	d101      	bne.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	4770      	bx	lr
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	4770      	bx	lr

08005aa2 <ai_array_fmt_valid>:
 8005aa2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005aa6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005aaa:	d069      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ab0:	1a89      	subs	r1, r1, r2
 8005ab2:	d065      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	1a89      	subs	r1, r1, r2
 8005aba:	d061      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005abc:	1a89      	subs	r1, r1, r2
 8005abe:	d05f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac0:	1fc9      	subs	r1, r1, #7
 8005ac2:	d05d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005ac8:	1a89      	subs	r1, r1, r2
 8005aca:	d059      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005acc:	390f      	subs	r1, #15
 8005ace:	d057      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ad4:	1a89      	subs	r1, r1, r2
 8005ad6:	d053      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad8:	391f      	subs	r1, #31
 8005ada:	d051      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005adc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ae0:	1a89      	subs	r1, r1, r2
 8005ae2:	d04d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ae4:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005e34 <.text_15>
 8005ae8:	1a89      	subs	r1, r1, r2
 8005aea:	d049      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005af0:	1a89      	subs	r1, r1, r2
 8005af2:	d045      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005af4:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005e38 <.text_16>
 8005af8:	1a89      	subs	r1, r1, r2
 8005afa:	d041      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	1a89      	subs	r1, r1, r2
 8005b02:	d03d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b04:	1a89      	subs	r1, r1, r2
 8005b06:	d03b      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b08:	1fc9      	subs	r1, r1, #7
 8005b0a:	d039      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b0c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b10:	1a89      	subs	r1, r1, r2
 8005b12:	d035      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b14:	390f      	subs	r1, #15
 8005b16:	d033      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b18:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005b1c:	1a89      	subs	r1, r1, r2
 8005b1e:	d02f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b20:	391f      	subs	r1, #31
 8005b22:	d02d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b24:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	d029      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b2c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005e34 <.text_15>
 8005b30:	1a89      	subs	r1, r1, r2
 8005b32:	d025      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b34:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b38:	1a89      	subs	r1, r1, r2
 8005b3a:	d021      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b3c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005e3c <.text_17>
 8005b40:	1a89      	subs	r1, r1, r2
 8005b42:	d01d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b48:	1a89      	subs	r1, r1, r2
 8005b4a:	d019      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	d015      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b54:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005e40 <.text_18>
 8005b58:	1a89      	subs	r1, r1, r2
 8005b5a:	d011      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b5c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b60:	1a89      	subs	r1, r1, r2
 8005b62:	bf1e      	ittt	ne
 8005b64:	f36f 000d 	bfcne	r0, #0, #14
 8005b68:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005b6c:	2840      	cmpne	r0, #64	; 0x40
 8005b6e:	d007      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b70:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005e44 <.text_19>
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005e48 <.text_20>
 8005b7c:	4298      	cmpne	r0, r3
 8005b7e:	d101      	bne.n	8005b84 <ai_array_fmt_valid+0xe2>
 8005b80:	2001      	movs	r0, #1
 8005b82:	4770      	bx	lr
 8005b84:	2000      	movs	r0, #0
 8005b86:	4770      	bx	lr

08005b88 <ai_array_fmt_get_formats>:
 8005b88:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005e4c <.text_21>
 8005b8c:	6001      	str	r1, [r0, #0]
 8005b8e:	201c      	movs	r0, #28
 8005b90:	4770      	bx	lr
	...

08005b94 <.text_8>:
 8005b94:	00000000 	.word	0x00000000

08005b98 <ai_buffer_fmt_name>:
 8005b98:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b9c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005ba0:	d022      	beq.n	8005be8 <ai_buffer_fmt_name+0x50>
 8005ba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ba6:	1a89      	subs	r1, r1, r2
 8005ba8:	d039      	beq.n	8005c1e <ai_buffer_fmt_name+0x86>
 8005baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bae:	1a89      	subs	r1, r1, r2
 8005bb0:	d020      	beq.n	8005bf4 <ai_buffer_fmt_name+0x5c>
 8005bb2:	1fc9      	subs	r1, r1, #7
 8005bb4:	d036      	beq.n	8005c24 <ai_buffer_fmt_name+0x8c>
 8005bb6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bba:	1a89      	subs	r1, r1, r2
 8005bbc:	d01d      	beq.n	8005bfa <ai_buffer_fmt_name+0x62>
 8005bbe:	390f      	subs	r1, #15
 8005bc0:	d033      	beq.n	8005c2a <ai_buffer_fmt_name+0x92>
 8005bc2:	4aa3      	ldr	r2, [pc, #652]	; (8005e50 <.text_22>)
 8005bc4:	1a89      	subs	r1, r1, r2
 8005bc6:	d021      	beq.n	8005c0c <ai_buffer_fmt_name+0x74>
 8005bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bcc:	1a89      	subs	r1, r1, r2
 8005bce:	d017      	beq.n	8005c00 <ai_buffer_fmt_name+0x68>
 8005bd0:	1fc9      	subs	r1, r1, #7
 8005bd2:	d01e      	beq.n	8005c12 <ai_buffer_fmt_name+0x7a>
 8005bd4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bd8:	1a89      	subs	r1, r1, r2
 8005bda:	d014      	beq.n	8005c06 <ai_buffer_fmt_name+0x6e>
 8005bdc:	390f      	subs	r1, #15
 8005bde:	d01b      	beq.n	8005c18 <ai_buffer_fmt_name+0x80>
 8005be0:	4a9c      	ldr	r2, [pc, #624]	; (8005e54 <.text_23>)
 8005be2:	1a89      	subs	r1, r1, r2
 8005be4:	d003      	beq.n	8005bee <ai_buffer_fmt_name+0x56>
 8005be6:	e023      	b.n	8005c30 <ai_buffer_fmt_name+0x98>
 8005be8:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005bec:	4770      	bx	lr
 8005bee:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005bf2:	4770      	bx	lr
 8005bf4:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005bf8:	4770      	bx	lr
 8005bfa:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005bfe:	4770      	bx	lr
 8005c00:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005c04:	4770      	bx	lr
 8005c06:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005c0a:	4770      	bx	lr
 8005c0c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005c10:	4770      	bx	lr
 8005c12:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c16:	4770      	bx	lr
 8005c18:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c1c:	4770      	bx	lr
 8005c1e:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c22:	4770      	bx	lr
 8005c24:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c28:	4770      	bx	lr
 8005c2a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005c2e:	4770      	bx	lr
 8005c30:	0b80      	lsrs	r0, r0, #14
 8005c32:	0380      	lsls	r0, r0, #14
 8005c34:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005c38:	2840      	cmp	r0, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <ai_buffer_fmt_name+0xb4>
 8005c3c:	4981      	ldr	r1, [pc, #516]	; (8005e44 <.text_19>)
 8005c3e:	4288      	cmp	r0, r1
 8005c40:	d00a      	beq.n	8005c58 <ai_buffer_fmt_name+0xc0>
 8005c42:	4981      	ldr	r1, [pc, #516]	; (8005e48 <.text_20>)
 8005c44:	4288      	cmp	r0, r1
 8005c46:	d004      	beq.n	8005c52 <ai_buffer_fmt_name+0xba>
 8005c48:	a079      	add	r0, pc, #484	; (adr r0, 8005e30 <.text_14>)
 8005c4a:	4770      	bx	lr
 8005c4c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005c50:	4770      	bx	lr
 8005c52:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005c56:	4770      	bx	lr
 8005c58:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005c5c:	4770      	bx	lr

08005c5e <ai_buffer_fmt_valid>:
 8005c5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c62:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c66:	d02d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c6c:	1a89      	subs	r1, r1, r2
 8005c6e:	d029      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c74:	1a89      	subs	r1, r1, r2
 8005c76:	d025      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c78:	1fc9      	subs	r1, r1, #7
 8005c7a:	d023      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c7c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c80:	1a89      	subs	r1, r1, r2
 8005c82:	d01f      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c84:	390f      	subs	r1, #15
 8005c86:	d01d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c88:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <.text_22>)
 8005c8a:	1a89      	subs	r1, r1, r2
 8005c8c:	d01a      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c92:	1a89      	subs	r1, r1, r2
 8005c94:	d016      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c96:	1fc9      	subs	r1, r1, #7
 8005c98:	d014      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c9a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c9e:	1a89      	subs	r1, r1, r2
 8005ca0:	d010      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca2:	390f      	subs	r1, #15
 8005ca4:	d00e      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca6:	4a6b      	ldr	r2, [pc, #428]	; (8005e54 <.text_23>)
 8005ca8:	1a89      	subs	r1, r1, r2
 8005caa:	bf1f      	itttt	ne
 8005cac:	0b80      	lsrne	r0, r0, #14
 8005cae:	0380      	lslne	r0, r0, #14
 8005cb0:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005cb4:	2840      	cmpne	r0, #64	; 0x40
 8005cb6:	d005      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005cb8:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <.text_19>)
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bf1c      	itt	ne
 8005cbe:	4b62      	ldrne	r3, [pc, #392]	; (8005e48 <.text_20>)
 8005cc0:	4298      	cmpne	r0, r3
 8005cc2:	d101      	bne.n	8005cc8 <ai_buffer_fmt_valid+0x6a>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4770      	bx	lr
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr

08005ccc <ai_buffer_fmt_get_formats>:
 8005ccc:	4962      	ldr	r1, [pc, #392]	; (8005e58 <.text_24>)
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	200c      	movs	r0, #12
 8005cd2:	4770      	bx	lr

08005cd4 <ai_array_to_buffer_fmt>:
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	2040      	movs	r0, #64	; 0x40
 8005cd8:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d104      	bne.n	8005cea <ai_array_to_buffer_fmt+0x16>
 8005ce0:	485e      	ldr	r0, [pc, #376]	; (8005e5c <.text_25>)
 8005ce2:	4008      	ands	r0, r1
 8005ce4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005ce8:	e037      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005cea:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <.text_19>)
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	d02d      	beq.n	8005d50 <ai_array_to_buffer_fmt+0x7c>
 8005cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	d01b      	beq.n	8005d34 <ai_array_to_buffer_fmt+0x60>
 8005cfc:	1fd2      	subs	r2, r2, #7
 8005cfe:	d029      	beq.n	8005d54 <ai_array_to_buffer_fmt+0x80>
 8005d00:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	d017      	beq.n	8005d38 <ai_array_to_buffer_fmt+0x64>
 8005d08:	3a0f      	subs	r2, #15
 8005d0a:	d025      	beq.n	8005d58 <ai_array_to_buffer_fmt+0x84>
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <.text_22>)
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	d018      	beq.n	8005d44 <ai_array_to_buffer_fmt+0x70>
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	d010      	beq.n	8005d3c <ai_array_to_buffer_fmt+0x68>
 8005d1a:	1fd2      	subs	r2, r2, #7
 8005d1c:	d014      	beq.n	8005d48 <ai_array_to_buffer_fmt+0x74>
 8005d1e:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	d00c      	beq.n	8005d40 <ai_array_to_buffer_fmt+0x6c>
 8005d26:	3a0f      	subs	r2, #15
 8005d28:	d010      	beq.n	8005d4c <ai_array_to_buffer_fmt+0x78>
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <.text_23>)
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	d114      	bne.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d30:	484b      	ldr	r0, [pc, #300]	; (8005e60 <.text_26>)
 8005d32:	e012      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d34:	484b      	ldr	r0, [pc, #300]	; (8005e64 <.text_27>)
 8005d36:	e010      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d38:	484b      	ldr	r0, [pc, #300]	; (8005e68 <.text_28>)
 8005d3a:	e00e      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d3c:	484b      	ldr	r0, [pc, #300]	; (8005e6c <.text_29>)
 8005d3e:	e00c      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d40:	484b      	ldr	r0, [pc, #300]	; (8005e70 <.text_30>)
 8005d42:	e00a      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d44:	4840      	ldr	r0, [pc, #256]	; (8005e48 <.text_20>)
 8005d46:	e008      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d48:	484a      	ldr	r0, [pc, #296]	; (8005e74 <.text_31>)
 8005d4a:	e006      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d4c:	484a      	ldr	r0, [pc, #296]	; (8005e78 <.text_32>)
 8005d4e:	e004      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d50:	4618      	mov	r0, r3
 8005d52:	e002      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d54:	4849      	ldr	r0, [pc, #292]	; (8005e7c <.text_33>)
 8005d56:	e000      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d58:	4849      	ldr	r0, [pc, #292]	; (8005e80 <.text_34>)
 8005d5a:	004a      	lsls	r2, r1, #1
 8005d5c:	bf4c      	ite	mi
 8005d5e:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005d62:	2200      	movpl	r2, #0
 8005d64:	4310      	orrs	r0, r2
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	bf4c      	ite	mi
 8005d6a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005d6e:	2200      	movpl	r2, #0
 8005d70:	4310      	orrs	r0, r2
 8005d72:	0109      	lsls	r1, r1, #4
 8005d74:	bf4c      	ite	mi
 8005d76:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005d7a:	2100      	movpl	r1, #0
 8005d7c:	4308      	orrs	r0, r1
 8005d7e:	4770      	bx	lr

08005d80 <ai_buffer_to_array_fmt>:
 8005d80:	4602      	mov	r2, r0
 8005d82:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005d86:	3840      	subs	r0, #64	; 0x40
 8005d88:	d022      	beq.n	8005dd0 <ai_buffer_to_array_fmt+0x50>
 8005d8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005d8e:	1a40      	subs	r0, r0, r1
 8005d90:	d030      	beq.n	8005df4 <ai_buffer_to_array_fmt+0x74>
 8005d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d96:	1a40      	subs	r0, r0, r1
 8005d98:	d01e      	beq.n	8005dd8 <ai_buffer_to_array_fmt+0x58>
 8005d9a:	1fc0      	subs	r0, r0, #7
 8005d9c:	d02c      	beq.n	8005df8 <ai_buffer_to_array_fmt+0x78>
 8005d9e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005da2:	1a40      	subs	r0, r0, r1
 8005da4:	d01a      	beq.n	8005ddc <ai_buffer_to_array_fmt+0x5c>
 8005da6:	380f      	subs	r0, #15
 8005da8:	d028      	beq.n	8005dfc <ai_buffer_to_array_fmt+0x7c>
 8005daa:	4929      	ldr	r1, [pc, #164]	; (8005e50 <.text_22>)
 8005dac:	1a40      	subs	r0, r0, r1
 8005dae:	d01b      	beq.n	8005de8 <ai_buffer_to_array_fmt+0x68>
 8005db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005db4:	1a40      	subs	r0, r0, r1
 8005db6:	d013      	beq.n	8005de0 <ai_buffer_to_array_fmt+0x60>
 8005db8:	1fc0      	subs	r0, r0, #7
 8005dba:	d017      	beq.n	8005dec <ai_buffer_to_array_fmt+0x6c>
 8005dbc:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005dc0:	1a40      	subs	r0, r0, r1
 8005dc2:	d00f      	beq.n	8005de4 <ai_buffer_to_array_fmt+0x64>
 8005dc4:	380f      	subs	r0, #15
 8005dc6:	d013      	beq.n	8005df0 <ai_buffer_to_array_fmt+0x70>
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <.text_23>)
 8005dca:	1a40      	subs	r0, r0, r1
 8005dcc:	d002      	beq.n	8005dd4 <ai_buffer_to_array_fmt+0x54>
 8005dce:	e017      	b.n	8005e00 <ai_buffer_to_array_fmt+0x80>
 8005dd0:	2040      	movs	r0, #64	; 0x40
 8005dd2:	e01f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd4:	4822      	ldr	r0, [pc, #136]	; (8005e60 <.text_26>)
 8005dd6:	e01d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd8:	4822      	ldr	r0, [pc, #136]	; (8005e64 <.text_27>)
 8005dda:	e01b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005ddc:	4822      	ldr	r0, [pc, #136]	; (8005e68 <.text_28>)
 8005dde:	e019      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de0:	4822      	ldr	r0, [pc, #136]	; (8005e6c <.text_29>)
 8005de2:	e017      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de4:	4822      	ldr	r0, [pc, #136]	; (8005e70 <.text_30>)
 8005de6:	e015      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de8:	4817      	ldr	r0, [pc, #92]	; (8005e48 <.text_20>)
 8005dea:	e013      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dec:	4821      	ldr	r0, [pc, #132]	; (8005e74 <.text_31>)
 8005dee:	e011      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df0:	4821      	ldr	r0, [pc, #132]	; (8005e78 <.text_32>)
 8005df2:	e00f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <.text_19>)
 8005df6:	e00d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df8:	4820      	ldr	r0, [pc, #128]	; (8005e7c <.text_33>)
 8005dfa:	e00b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dfc:	4820      	ldr	r0, [pc, #128]	; (8005e80 <.text_34>)
 8005dfe:	e009      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005e00:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005e04:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005e10:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005e14:	0051      	lsls	r1, r2, #1
 8005e16:	bf48      	it	mi
 8005e18:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005e1c:	0091      	lsls	r1, r2, #2
 8005e1e:	bf48      	it	mi
 8005e20:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005e24:	0111      	lsls	r1, r2, #4
 8005e26:	bf48      	it	mi
 8005e28:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005e2c:	4770      	bx	lr
	...

08005e30 <.text_14>:
 8005e30:	00000000 	.word	0x00000000

08005e34 <.text_15>:
 8005e34:	002be80f 	.word	0x002be80f

08005e38 <.text_16>:
 8005e38:	003bf7f1 	.word	0x003bf7f1

08005e3c <.text_17>:
 8005e3c:	00b9fff1 	.word	0x00b9fff1

08005e40 <.text_18>:
 8005e40:	004df000 	.word	0x004df000

08005e44 <.text_19>:
 8005e44:	00040040 	.word	0x00040040

08005e48 <.text_20>:
 8005e48:	00840040 	.word	0x00840040

08005e4c <.text_21>:
 8005e4c:	08017f6c 	.word	0x08017f6c

08005e50 <.text_22>:
 8005e50:	007ff7f1 	.word	0x007ff7f1

08005e54 <.text_23>:
 8005e54:	00fe07f1 	.word	0x00fe07f1

08005e58 <.text_24>:
 8005e58:	08017fdc 	.word	0x08017fdc

08005e5c <.text_25>:
 8005e5c:	00803fff 	.word	0x00803fff

08005e60 <.text_26>:
 8005e60:	01821040 	.word	0x01821040

08005e64 <.text_27>:
 8005e64:	00040440 	.word	0x00040440

08005e68 <.text_28>:
 8005e68:	00040840 	.word	0x00040840

08005e6c <.text_29>:
 8005e6c:	00840440 	.word	0x00840440

08005e70 <.text_30>:
 8005e70:	00840840 	.word	0x00840840

08005e74 <.text_31>:
 8005e74:	00840447 	.word	0x00840447

08005e78 <.text_32>:
 8005e78:	0084084f 	.word	0x0084084f

08005e7c <.text_33>:
 8005e7c:	00040447 	.word	0x00040447

08005e80 <.text_34>:
 8005e80:	0004084f 	.word	0x0004084f

08005e84 <ai_array_get_byte_size>:
 8005e84:	b909      	cbnz	r1, 8005e8a <ai_array_get_byte_size+0x6>
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr
 8005e8a:	11c2      	asrs	r2, r0, #7
 8005e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e90:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	4359      	muls	r1, r3
 8005e98:	1dc9      	adds	r1, r1, #7
 8005e9a:	08c9      	lsrs	r1, r1, #3
 8005e9c:	1543      	asrs	r3, r0, #21
 8005e9e:	00c9      	lsls	r1, r1, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005ea8:	40d9      	lsrs	r1, r3
 8005eaa:	f00c 0c0f 	and.w	ip, ip, #15
 8005eae:	f1bc 0f04 	cmp.w	ip, #4
 8005eb2:	d00a      	beq.n	8005eca <ai_array_get_byte_size+0x46>
 8005eb4:	f1bc 0f08 	cmp.w	ip, #8
 8005eb8:	bf02      	ittt	eq
 8005eba:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005ebe:	1882      	addeq	r2, r0, r2
 8005ec0:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005ec4:	1dc9      	adds	r1, r1, #7
 8005ec6:	08c8      	lsrs	r0, r1, #3
 8005ec8:	4770      	bx	lr
 8005eca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005ece:	1882      	adds	r2, r0, r2
 8005ed0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005ed4:	1dc9      	adds	r1, r1, #7
 8005ed6:	08c8      	lsrs	r0, r1, #3
 8005ed8:	4770      	bx	lr

08005eda <ai_array_get_data_byte_size>:
 8005eda:	b909      	cbnz	r1, 8005ee0 <ai_array_get_data_byte_size+0x6>
 8005edc:	2000      	movs	r0, #0
 8005ede:	4770      	bx	lr
 8005ee0:	11c2      	asrs	r2, r0, #7
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005eea:	189a      	adds	r2, r3, r2
 8005eec:	4351      	muls	r1, r2
 8005eee:	1dc9      	adds	r1, r1, #7
 8005ef0:	08c9      	lsrs	r1, r1, #3
 8005ef2:	1540      	asrs	r0, r0, #21
 8005ef4:	00c9      	lsls	r1, r1, #3
 8005ef6:	f000 0003 	and.w	r0, r0, #3
 8005efa:	40c1      	lsrs	r1, r0
 8005efc:	1dc9      	adds	r1, r1, #7
 8005efe:	08c8      	lsrs	r0, r1, #3
 8005f00:	4770      	bx	lr

08005f02 <ai_array_get_elems_from_size>:
 8005f02:	b909      	cbnz	r1, 8005f08 <ai_array_get_elems_from_size+0x6>
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
 8005f08:	1442      	asrs	r2, r0, #17
 8005f0a:	00c9      	lsls	r1, r1, #3
 8005f0c:	f002 020f 	and.w	r2, r2, #15
 8005f10:	2a04      	cmp	r2, #4
 8005f12:	d002      	beq.n	8005f1a <ai_array_get_elems_from_size+0x18>
 8005f14:	2a08      	cmp	r2, #8
 8005f16:	d009      	beq.n	8005f2c <ai_array_get_elems_from_size+0x2a>
 8005f18:	e010      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f1a:	11c3      	asrs	r3, r0, #7
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005f24:	18d2      	adds	r2, r2, r3
 8005f26:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005f2a:	e007      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f2c:	11c2      	asrs	r2, r0, #7
 8005f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f32:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f36:	189a      	adds	r2, r3, r2
 8005f38:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005f3c:	1542      	asrs	r2, r0, #21
 8005f3e:	f002 0203 	and.w	r2, r2, #3
 8005f42:	4091      	lsls	r1, r2
 8005f44:	1dc9      	adds	r1, r1, #7
 8005f46:	11c2      	asrs	r2, r0, #7
 8005f48:	08c9      	lsrs	r1, r1, #3
 8005f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f52:	00c9      	lsls	r1, r1, #3
 8005f54:	1880      	adds	r0, r0, r2
 8005f56:	fbb1 f0f0 	udiv	r0, r1, r0
 8005f5a:	4770      	bx	lr

08005f5c <.text_38>:
 8005f5c:	5f544d46 	.word	0x5f544d46
 8005f60:	454e4f4e 	.word	0x454e4f4e
 8005f64:	00          	.byte	0x00
 8005f65:	00          	.byte	0x00
	...

08005f68 <.text_39>:
 8005f68:	5f544d46 	.word	0x5f544d46
 8005f6c:	414f4c46 	.word	0x414f4c46
 8005f70:	0054      	.short	0x0054
	...

08005f74 <.text_40>:
 8005f74:	5f544d46 	.word	0x5f544d46
 8005f78:	414f4c46 	.word	0x414f4c46
 8005f7c:	00343654 	.word	0x00343654

08005f80 <.text_41>:
 8005f80:	5f544d46 	.word	0x5f544d46
 8005f84:	414f4c46 	.word	0x414f4c46
 8005f88:	00363154 	.word	0x00363154

08005f8c <.text_42>:
 8005f8c:	5f544d46 	.word	0x5f544d46
 8005f90:	00003855 	.word	0x00003855

08005f94 <.text_43>:
 8005f94:	5f544d46 	.word	0x5f544d46
 8005f98:	00363155 	.word	0x00363155

08005f9c <.text_44>:
 8005f9c:	5f544d46 	.word	0x5f544d46
 8005fa0:	00323355 	.word	0x00323355

08005fa4 <.text_45>:
 8005fa4:	5f544d46 	.word	0x5f544d46
 8005fa8:	00343655 	.word	0x00343655

08005fac <.text_46>:
 8005fac:	5f544d46 	.word	0x5f544d46
 8005fb0:	00003455 	.word	0x00003455

08005fb4 <.text_47>:
 8005fb4:	5f544d46 	.word	0x5f544d46
 8005fb8:	00003853 	.word	0x00003853

08005fbc <.text_48>:
 8005fbc:	5f544d46 	.word	0x5f544d46
 8005fc0:	00363153 	.word	0x00363153

08005fc4 <.text_49>:
 8005fc4:	5f544d46 	.word	0x5f544d46
 8005fc8:	00323353 	.word	0x00323353

08005fcc <.text_50>:
 8005fcc:	5f544d46 	.word	0x5f544d46
 8005fd0:	00343653 	.word	0x00343653

08005fd4 <.text_51>:
 8005fd4:	5f544d46 	.word	0x5f544d46
 8005fd8:	00003453 	.word	0x00003453

08005fdc <.text_52>:
 8005fdc:	5f544d46 	.word	0x5f544d46
 8005fe0:	0051      	.short	0x0051
	...

08005fe4 <.text_53>:
 8005fe4:	5f544d46 	.word	0x5f544d46
 8005fe8:	00003751 	.word	0x00003751

08005fec <.text_54>:
 8005fec:	5f544d46 	.word	0x5f544d46
 8005ff0:	00353151 	.word	0x00353151

08005ff4 <.text_55>:
 8005ff4:	5f544d46 	.word	0x5f544d46
 8005ff8:	00313351 	.word	0x00313351

08005ffc <.text_56>:
 8005ffc:	5f544d46 	.word	0x5f544d46
 8006000:	00005155 	.word	0x00005155

08006004 <.text_57>:
 8006004:	5f544d46 	.word	0x5f544d46
 8006008:	00375155 	.word	0x00375155

0800600c <.text_58>:
 800600c:	5f544d46 	.word	0x5f544d46
 8006010:	35315155 	.word	0x35315155
 8006014:	00          	.byte	0x00
 8006015:	00          	.byte	0x00
	...

08006018 <.text_59>:
 8006018:	5f544d46 	.word	0x5f544d46
 800601c:	31335155 	.word	0x31335155
 8006020:	00          	.byte	0x00
 8006021:	00          	.byte	0x00
	...

08006024 <.text_60>:
 8006024:	5f544d46 	.word	0x5f544d46
 8006028:	3454554c 	.word	0x3454554c
 800602c:	4f4c465f 	.word	0x4f4c465f
 8006030:	00005441 	.word	0x00005441

08006034 <.text_61>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	3854554c 	.word	0x3854554c
 800603c:	4f4c465f 	.word	0x4f4c465f
 8006040:	00005441 	.word	0x00005441

08006044 <.text_62>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	3454554c 	.word	0x3454554c
 800604c:	3531515f 	.word	0x3531515f
 8006050:	00          	.byte	0x00
 8006051:	00          	.byte	0x00
	...

08006054 <.text_63>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	3854554c 	.word	0x3854554c
 800605c:	3531515f 	.word	0x3531515f
 8006060:	00          	.byte	0x00
 8006061:	00          	.byte	0x00
	...

08006064 <.text_64>:
 8006064:	5f544d46 	.word	0x5f544d46
 8006068:	3454554c 	.word	0x3454554c
 800606c:	3151555f 	.word	0x3151555f
 8006070:	0035      	.short	0x0035
	...

08006074 <.text_65>:
 8006074:	5f544d46 	.word	0x5f544d46
 8006078:	3854554c 	.word	0x3854554c
 800607c:	3151555f 	.word	0x3151555f
 8006080:	0035      	.short	0x0035
	...

08006084 <.text_66>:
 8006084:	415f4941 	.word	0x415f4941
 8006088:	59415252 	.word	0x59415252
 800608c:	524f465f 	.word	0x524f465f
 8006090:	5f54414d 	.word	0x5f54414d
 8006094:	454e4f4e 	.word	0x454e4f4e
 8006098:	00          	.byte	0x00
 8006099:	00          	.byte	0x00
	...

0800609c <.text_67>:
 800609c:	415f4941 	.word	0x415f4941
 80060a0:	59415252 	.word	0x59415252
 80060a4:	524f465f 	.word	0x524f465f
 80060a8:	5f54414d 	.word	0x5f54414d
 80060ac:	0051      	.short	0x0051
	...

080060b0 <.text_68>:
 80060b0:	415f4941 	.word	0x415f4941
 80060b4:	59415252 	.word	0x59415252
 80060b8:	524f465f 	.word	0x524f465f
 80060bc:	5f54414d 	.word	0x5f54414d
 80060c0:	00005155 	.word	0x00005155

080060c4 <.text_69>:
 80060c4:	425f4941 	.word	0x425f4941
 80060c8:	45464655 	.word	0x45464655
 80060cc:	4f465f52 	.word	0x4f465f52
 80060d0:	54414d52 	.word	0x54414d52
 80060d4:	4e4f4e5f 	.word	0x4e4f4e5f
 80060d8:	0045      	.short	0x0045
	...

080060dc <.text_70>:
 80060dc:	425f4941 	.word	0x425f4941
 80060e0:	45464655 	.word	0x45464655
 80060e4:	4f465f52 	.word	0x4f465f52
 80060e8:	54414d52 	.word	0x54414d52
 80060ec:	0000515f 	.word	0x0000515f

080060f0 <.text_71>:
 80060f0:	425f4941 	.word	0x425f4941
 80060f4:	45464655 	.word	0x45464655
 80060f8:	4f465f52 	.word	0x4f465f52
 80060fc:	54414d52 	.word	0x54414d52
 8006100:	0051555f 	.word	0x0051555f

08006104 <ai_math_sqrt>:
 8006104:	eef0 0a40 	vmov.f32	s1, s0
 8006108:	eef5 0a40 	vcmp.f32	s1, #0.0
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80061b8 <.text_12>
 8006114:	db01      	blt.n	800611a <ai_math_sqrt+0x16>
 8006116:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800611a:	4770      	bx	lr

0800611c <ai_math_exp>:
 800611c:	f00f b890 	b.w	8015240 <expf>

08006120 <ai_math_pow>:
 8006120:	f00f b912 	b.w	8015348 <powf>

08006124 <ai_math_tanh>:
 8006124:	f00f bd64 	b.w	8015bf0 <tanhf>

08006128 <ai_math_cosh>:
 8006128:	f00f b862 	b.w	80151f0 <coshf>

0800612c <ai_math_relu>:
 800612c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	bf48      	it	mi
 8006136:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80061b8 <.text_12>
 800613a:	4770      	bx	lr

0800613c <ai_math_prelu>:
 800613c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	bf48      	it	mi
 8006146:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800614a:	4770      	bx	lr

0800614c <ai_math_sigmoid>:
 800614c:	b500      	push	{lr}
 800614e:	b081      	sub	sp, #4
 8006150:	eeb1 0a40 	vneg.f32	s0, s0
 8006154:	f00f f874 	bl	8015240 <expf>
 8006158:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800615c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006160:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006164:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006168:	b001      	add	sp, #4
 800616a:	bd00      	pop	{pc}

0800616c <ai_math_hard_sigmoid>:
 800616c:	eef0 0a40 	vmov.f32	s1, s0
 8006170:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80061bc <.text_13>
 8006174:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006178:	ee00 0a81 	vmla.f32	s0, s1, s2
 800617c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80061c0 <.text_14>
 8006180:	eeb4 0a60 	vcmp.f32	s0, s1
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	da07      	bge.n	800619a <ai_math_hard_sigmoid+0x2e>
 800618a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d504      	bpl.n	800619e <ai_math_hard_sigmoid+0x32>
 8006194:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80061b8 <.text_12>
 8006198:	4770      	bx	lr
 800619a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800619e:	4770      	bx	lr

080061a0 <ai_math_sign>:
 80061a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	bfcc      	ite	gt
 80061aa:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80061c4 <.text_15>
 80061ae:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80061c8 <.text_16>
 80061b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80061b6:	4770      	bx	lr

080061b8 <.text_12>:
 80061b8:	00000000 	.word	0x00000000

080061bc <.text_13>:
 80061bc:	3e4ccccd 	.word	0x3e4ccccd

080061c0 <.text_14>:
 80061c0:	3f800001 	.word	0x3f800001

080061c4 <.text_15>:
 80061c4:	00000001 	.word	0x00000001

080061c8 <.text_16>:
 80061c8:	ffffffff 	.word	0xffffffff

080061cc <ai_div>:
 80061cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d0:	4770      	bx	lr

080061d2 <ai_floor_div>:
 80061d2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d6:	f010 b827 	b.w	8016228 <floorf>

080061da <ai_floor_mod>:
 80061da:	f00f b867 	b.w	80152ac <fmodf>

080061de <ai_max>:
 80061de:	eef4 0a40 	vcmp.f32	s1, s0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	bf58      	it	pl
 80061e8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061ec:	4770      	bx	lr

080061ee <ai_min>:
 80061ee:	eeb4 0a60 	vcmp.f32	s0, s1
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	bf58      	it	pl
 80061f8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061fc:	4770      	bx	lr

080061fe <ai_mul>:
 80061fe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006202:	4770      	bx	lr

08006204 <ai_sub>:
 8006204:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006208:	4770      	bx	lr

0800620a <ai_sum>:
 800620a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800620e:	4770      	bx	lr

08006210 <arm_mat_init_f32>:
 8006210:	8001      	strh	r1, [r0, #0]
 8006212:	8042      	strh	r2, [r0, #2]
 8006214:	6043      	str	r3, [r0, #4]
 8006216:	4770      	bx	lr
	...

08006220 <memchr>:
 8006220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006224:	2a10      	cmp	r2, #16
 8006226:	db2b      	blt.n	8006280 <memchr+0x60>
 8006228:	f010 0f07 	tst.w	r0, #7
 800622c:	d008      	beq.n	8006240 <memchr+0x20>
 800622e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006232:	3a01      	subs	r2, #1
 8006234:	428b      	cmp	r3, r1
 8006236:	d02d      	beq.n	8006294 <memchr+0x74>
 8006238:	f010 0f07 	tst.w	r0, #7
 800623c:	b342      	cbz	r2, 8006290 <memchr+0x70>
 800623e:	d1f6      	bne.n	800622e <memchr+0xe>
 8006240:	b4f0      	push	{r4, r5, r6, r7}
 8006242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800624a:	f022 0407 	bic.w	r4, r2, #7
 800624e:	f07f 0700 	mvns.w	r7, #0
 8006252:	2300      	movs	r3, #0
 8006254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006258:	3c08      	subs	r4, #8
 800625a:	ea85 0501 	eor.w	r5, r5, r1
 800625e:	ea86 0601 	eor.w	r6, r6, r1
 8006262:	fa85 f547 	uadd8	r5, r5, r7
 8006266:	faa3 f587 	sel	r5, r3, r7
 800626a:	fa86 f647 	uadd8	r6, r6, r7
 800626e:	faa5 f687 	sel	r6, r5, r7
 8006272:	b98e      	cbnz	r6, 8006298 <memchr+0x78>
 8006274:	d1ee      	bne.n	8006254 <memchr+0x34>
 8006276:	bcf0      	pop	{r4, r5, r6, r7}
 8006278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800627c:	f002 0207 	and.w	r2, r2, #7
 8006280:	b132      	cbz	r2, 8006290 <memchr+0x70>
 8006282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006286:	3a01      	subs	r2, #1
 8006288:	ea83 0301 	eor.w	r3, r3, r1
 800628c:	b113      	cbz	r3, 8006294 <memchr+0x74>
 800628e:	d1f8      	bne.n	8006282 <memchr+0x62>
 8006290:	2000      	movs	r0, #0
 8006292:	4770      	bx	lr
 8006294:	3801      	subs	r0, #1
 8006296:	4770      	bx	lr
 8006298:	2d00      	cmp	r5, #0
 800629a:	bf06      	itte	eq
 800629c:	4635      	moveq	r5, r6
 800629e:	3803      	subeq	r0, #3
 80062a0:	3807      	subne	r0, #7
 80062a2:	f015 0f01 	tst.w	r5, #1
 80062a6:	d107      	bne.n	80062b8 <memchr+0x98>
 80062a8:	3001      	adds	r0, #1
 80062aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80062ae:	bf02      	ittt	eq
 80062b0:	3001      	addeq	r0, #1
 80062b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80062b6:	3001      	addeq	r0, #1
 80062b8:	bcf0      	pop	{r4, r5, r6, r7}
 80062ba:	3801      	subs	r0, #1
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop

080062c0 <strlen>:
 80062c0:	4603      	mov	r3, r0
 80062c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d1fb      	bne.n	80062c2 <strlen+0x2>
 80062ca:	1a18      	subs	r0, r3, r0
 80062cc:	3801      	subs	r0, #1
 80062ce:	4770      	bx	lr

080062d0 <__aeabi_memset>:
 80062d0:	b470      	push	{r4, r5, r6}
 80062d2:	0784      	lsls	r4, r0, #30
 80062d4:	d046      	beq.n	8006364 <__aeabi_memset+0x94>
 80062d6:	1e4c      	subs	r4, r1, #1
 80062d8:	2900      	cmp	r1, #0
 80062da:	d041      	beq.n	8006360 <__aeabi_memset+0x90>
 80062dc:	b2d5      	uxtb	r5, r2
 80062de:	4603      	mov	r3, r0
 80062e0:	e002      	b.n	80062e8 <__aeabi_memset+0x18>
 80062e2:	1e61      	subs	r1, r4, #1
 80062e4:	b3e4      	cbz	r4, 8006360 <__aeabi_memset+0x90>
 80062e6:	460c      	mov	r4, r1
 80062e8:	f803 5b01 	strb.w	r5, [r3], #1
 80062ec:	0799      	lsls	r1, r3, #30
 80062ee:	d1f8      	bne.n	80062e2 <__aeabi_memset+0x12>
 80062f0:	2c03      	cmp	r4, #3
 80062f2:	d92e      	bls.n	8006352 <__aeabi_memset+0x82>
 80062f4:	b2d5      	uxtb	r5, r2
 80062f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80062fa:	2c0f      	cmp	r4, #15
 80062fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006300:	d919      	bls.n	8006336 <__aeabi_memset+0x66>
 8006302:	4626      	mov	r6, r4
 8006304:	f103 0110 	add.w	r1, r3, #16
 8006308:	3e10      	subs	r6, #16
 800630a:	2e0f      	cmp	r6, #15
 800630c:	f841 5c10 	str.w	r5, [r1, #-16]
 8006310:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006314:	f841 5c08 	str.w	r5, [r1, #-8]
 8006318:	f841 5c04 	str.w	r5, [r1, #-4]
 800631c:	f101 0110 	add.w	r1, r1, #16
 8006320:	d8f2      	bhi.n	8006308 <__aeabi_memset+0x38>
 8006322:	f1a4 0110 	sub.w	r1, r4, #16
 8006326:	f021 010f 	bic.w	r1, r1, #15
 800632a:	f004 040f 	and.w	r4, r4, #15
 800632e:	3110      	adds	r1, #16
 8006330:	2c03      	cmp	r4, #3
 8006332:	440b      	add	r3, r1
 8006334:	d90d      	bls.n	8006352 <__aeabi_memset+0x82>
 8006336:	461e      	mov	r6, r3
 8006338:	4621      	mov	r1, r4
 800633a:	3904      	subs	r1, #4
 800633c:	2903      	cmp	r1, #3
 800633e:	f846 5b04 	str.w	r5, [r6], #4
 8006342:	d8fa      	bhi.n	800633a <__aeabi_memset+0x6a>
 8006344:	1f21      	subs	r1, r4, #4
 8006346:	f021 0103 	bic.w	r1, r1, #3
 800634a:	3104      	adds	r1, #4
 800634c:	440b      	add	r3, r1
 800634e:	f004 0403 	and.w	r4, r4, #3
 8006352:	b12c      	cbz	r4, 8006360 <__aeabi_memset+0x90>
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	441c      	add	r4, r3
 8006358:	f803 2b01 	strb.w	r2, [r3], #1
 800635c:	42a3      	cmp	r3, r4
 800635e:	d1fb      	bne.n	8006358 <__aeabi_memset+0x88>
 8006360:	bc70      	pop	{r4, r5, r6}
 8006362:	4770      	bx	lr
 8006364:	460c      	mov	r4, r1
 8006366:	4603      	mov	r3, r0
 8006368:	e7c2      	b.n	80062f0 <__aeabi_memset+0x20>
	...

0800636c <__aeabi_drsub>:
 800636c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006370:	e002      	b.n	8006378 <__adddf3>
 8006372:	bf00      	nop

08006374 <__aeabi_dsub>:
 8006374:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006378 <__adddf3>:
 8006378:	b530      	push	{r4, r5, lr}
 800637a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800637e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006382:	ea94 0f05 	teq	r4, r5
 8006386:	bf08      	it	eq
 8006388:	ea90 0f02 	teqeq	r0, r2
 800638c:	bf1f      	itttt	ne
 800638e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006392:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006396:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800639a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800639e:	f000 80e2 	beq.w	8006566 <__adddf3+0x1ee>
 80063a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063aa:	bfb8      	it	lt
 80063ac:	426d      	neglt	r5, r5
 80063ae:	dd0c      	ble.n	80063ca <__adddf3+0x52>
 80063b0:	442c      	add	r4, r5
 80063b2:	ea80 0202 	eor.w	r2, r0, r2
 80063b6:	ea81 0303 	eor.w	r3, r1, r3
 80063ba:	ea82 0000 	eor.w	r0, r2, r0
 80063be:	ea83 0101 	eor.w	r1, r3, r1
 80063c2:	ea80 0202 	eor.w	r2, r0, r2
 80063c6:	ea81 0303 	eor.w	r3, r1, r3
 80063ca:	2d36      	cmp	r5, #54	; 0x36
 80063cc:	bf88      	it	hi
 80063ce:	bd30      	pophi	{r4, r5, pc}
 80063d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80063dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80063e0:	d002      	beq.n	80063e8 <__adddf3+0x70>
 80063e2:	4240      	negs	r0, r0
 80063e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80063e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80063ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80063f4:	d002      	beq.n	80063fc <__adddf3+0x84>
 80063f6:	4252      	negs	r2, r2
 80063f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80063fc:	ea94 0f05 	teq	r4, r5
 8006400:	f000 80a7 	beq.w	8006552 <__adddf3+0x1da>
 8006404:	f1a4 0401 	sub.w	r4, r4, #1
 8006408:	f1d5 0e20 	rsbs	lr, r5, #32
 800640c:	db0d      	blt.n	800642a <__adddf3+0xb2>
 800640e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006412:	fa22 f205 	lsr.w	r2, r2, r5
 8006416:	1880      	adds	r0, r0, r2
 8006418:	f141 0100 	adc.w	r1, r1, #0
 800641c:	fa03 f20e 	lsl.w	r2, r3, lr
 8006420:	1880      	adds	r0, r0, r2
 8006422:	fa43 f305 	asr.w	r3, r3, r5
 8006426:	4159      	adcs	r1, r3
 8006428:	e00e      	b.n	8006448 <__adddf3+0xd0>
 800642a:	f1a5 0520 	sub.w	r5, r5, #32
 800642e:	f10e 0e20 	add.w	lr, lr, #32
 8006432:	2a01      	cmp	r2, #1
 8006434:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006438:	bf28      	it	cs
 800643a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800643e:	fa43 f305 	asr.w	r3, r3, r5
 8006442:	18c0      	adds	r0, r0, r3
 8006444:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800644c:	d507      	bpl.n	800645e <__adddf3+0xe6>
 800644e:	f04f 0e00 	mov.w	lr, #0
 8006452:	f1dc 0c00 	rsbs	ip, ip, #0
 8006456:	eb7e 0000 	sbcs.w	r0, lr, r0
 800645a:	eb6e 0101 	sbc.w	r1, lr, r1
 800645e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006462:	d31b      	bcc.n	800649c <__adddf3+0x124>
 8006464:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006468:	d30c      	bcc.n	8006484 <__adddf3+0x10c>
 800646a:	0849      	lsrs	r1, r1, #1
 800646c:	ea5f 0030 	movs.w	r0, r0, rrx
 8006470:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006474:	f104 0401 	add.w	r4, r4, #1
 8006478:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800647c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006480:	f080 809a 	bcs.w	80065b8 <__adddf3+0x240>
 8006484:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006488:	bf08      	it	eq
 800648a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800648e:	f150 0000 	adcs.w	r0, r0, #0
 8006492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006496:	ea41 0105 	orr.w	r1, r1, r5
 800649a:	bd30      	pop	{r4, r5, pc}
 800649c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064a0:	4140      	adcs	r0, r0
 80064a2:	eb41 0101 	adc.w	r1, r1, r1
 80064a6:	3c01      	subs	r4, #1
 80064a8:	bf28      	it	cs
 80064aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80064ae:	d2e9      	bcs.n	8006484 <__adddf3+0x10c>
 80064b0:	f091 0f00 	teq	r1, #0
 80064b4:	bf04      	itt	eq
 80064b6:	4601      	moveq	r1, r0
 80064b8:	2000      	moveq	r0, #0
 80064ba:	fab1 f381 	clz	r3, r1
 80064be:	bf08      	it	eq
 80064c0:	3320      	addeq	r3, #32
 80064c2:	f1a3 030b 	sub.w	r3, r3, #11
 80064c6:	f1b3 0220 	subs.w	r2, r3, #32
 80064ca:	da0c      	bge.n	80064e6 <__adddf3+0x16e>
 80064cc:	320c      	adds	r2, #12
 80064ce:	dd08      	ble.n	80064e2 <__adddf3+0x16a>
 80064d0:	f102 0c14 	add.w	ip, r2, #20
 80064d4:	f1c2 020c 	rsb	r2, r2, #12
 80064d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80064dc:	fa21 f102 	lsr.w	r1, r1, r2
 80064e0:	e00c      	b.n	80064fc <__adddf3+0x184>
 80064e2:	f102 0214 	add.w	r2, r2, #20
 80064e6:	bfd8      	it	le
 80064e8:	f1c2 0c20 	rsble	ip, r2, #32
 80064ec:	fa01 f102 	lsl.w	r1, r1, r2
 80064f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80064f4:	bfdc      	itt	le
 80064f6:	ea41 010c 	orrle.w	r1, r1, ip
 80064fa:	4090      	lslle	r0, r2
 80064fc:	1ae4      	subs	r4, r4, r3
 80064fe:	bfa2      	ittt	ge
 8006500:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006504:	4329      	orrge	r1, r5
 8006506:	bd30      	popge	{r4, r5, pc}
 8006508:	ea6f 0404 	mvn.w	r4, r4
 800650c:	3c1f      	subs	r4, #31
 800650e:	da1c      	bge.n	800654a <__adddf3+0x1d2>
 8006510:	340c      	adds	r4, #12
 8006512:	dc0e      	bgt.n	8006532 <__adddf3+0x1ba>
 8006514:	f104 0414 	add.w	r4, r4, #20
 8006518:	f1c4 0220 	rsb	r2, r4, #32
 800651c:	fa20 f004 	lsr.w	r0, r0, r4
 8006520:	fa01 f302 	lsl.w	r3, r1, r2
 8006524:	ea40 0003 	orr.w	r0, r0, r3
 8006528:	fa21 f304 	lsr.w	r3, r1, r4
 800652c:	ea45 0103 	orr.w	r1, r5, r3
 8006530:	bd30      	pop	{r4, r5, pc}
 8006532:	f1c4 040c 	rsb	r4, r4, #12
 8006536:	f1c4 0220 	rsb	r2, r4, #32
 800653a:	fa20 f002 	lsr.w	r0, r0, r2
 800653e:	fa01 f304 	lsl.w	r3, r1, r4
 8006542:	ea40 0003 	orr.w	r0, r0, r3
 8006546:	4629      	mov	r1, r5
 8006548:	bd30      	pop	{r4, r5, pc}
 800654a:	fa21 f004 	lsr.w	r0, r1, r4
 800654e:	4629      	mov	r1, r5
 8006550:	bd30      	pop	{r4, r5, pc}
 8006552:	f094 0f00 	teq	r4, #0
 8006556:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800655a:	bf06      	itte	eq
 800655c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006560:	3401      	addeq	r4, #1
 8006562:	3d01      	subne	r5, #1
 8006564:	e74e      	b.n	8006404 <__adddf3+0x8c>
 8006566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800656a:	bf18      	it	ne
 800656c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006570:	d029      	beq.n	80065c6 <__adddf3+0x24e>
 8006572:	ea94 0f05 	teq	r4, r5
 8006576:	bf08      	it	eq
 8006578:	ea90 0f02 	teqeq	r0, r2
 800657c:	d005      	beq.n	800658a <__adddf3+0x212>
 800657e:	ea54 0c00 	orrs.w	ip, r4, r0
 8006582:	bf04      	itt	eq
 8006584:	4619      	moveq	r1, r3
 8006586:	4610      	moveq	r0, r2
 8006588:	bd30      	pop	{r4, r5, pc}
 800658a:	ea91 0f03 	teq	r1, r3
 800658e:	bf1e      	ittt	ne
 8006590:	2100      	movne	r1, #0
 8006592:	2000      	movne	r0, #0
 8006594:	bd30      	popne	{r4, r5, pc}
 8006596:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800659a:	d105      	bne.n	80065a8 <__adddf3+0x230>
 800659c:	0040      	lsls	r0, r0, #1
 800659e:	4149      	adcs	r1, r1
 80065a0:	bf28      	it	cs
 80065a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065a6:	bd30      	pop	{r4, r5, pc}
 80065a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065ac:	bf3c      	itt	cc
 80065ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80065b2:	bd30      	popcc	{r4, r5, pc}
 80065b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80065b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065c0:	f04f 0000 	mov.w	r0, #0
 80065c4:	bd30      	pop	{r4, r5, pc}
 80065c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ca:	bf1a      	itte	ne
 80065cc:	4619      	movne	r1, r3
 80065ce:	4610      	movne	r0, r2
 80065d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80065d4:	bf1c      	itt	ne
 80065d6:	460b      	movne	r3, r1
 80065d8:	4602      	movne	r2, r0
 80065da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80065de:	bf06      	itte	eq
 80065e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80065e4:	ea91 0f03 	teqeq	r1, r3
 80065e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80065ec:	bd30      	pop	{r4, r5, pc}
 80065ee:	bf00      	nop

080065f0 <__aeabi_ui2d>:
 80065f0:	f090 0f00 	teq	r0, #0
 80065f4:	bf04      	itt	eq
 80065f6:	2100      	moveq	r1, #0
 80065f8:	4770      	bxeq	lr
 80065fa:	b530      	push	{r4, r5, lr}
 80065fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006600:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006604:	f04f 0500 	mov.w	r5, #0
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	e750      	b.n	80064b0 <__adddf3+0x138>
 800660e:	bf00      	nop

08006610 <__aeabi_i2d>:
 8006610:	f090 0f00 	teq	r0, #0
 8006614:	bf04      	itt	eq
 8006616:	2100      	moveq	r1, #0
 8006618:	4770      	bxeq	lr
 800661a:	b530      	push	{r4, r5, lr}
 800661c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006620:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006624:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006628:	bf48      	it	mi
 800662a:	4240      	negmi	r0, r0
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	e73e      	b.n	80064b0 <__adddf3+0x138>
 8006632:	bf00      	nop

08006634 <__aeabi_f2d>:
 8006634:	0042      	lsls	r2, r0, #1
 8006636:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800663a:	ea4f 0131 	mov.w	r1, r1, rrx
 800663e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006642:	bf1f      	itttt	ne
 8006644:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006648:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800664c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006650:	4770      	bxne	lr
 8006652:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006656:	bf08      	it	eq
 8006658:	4770      	bxeq	lr
 800665a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800665e:	bf04      	itt	eq
 8006660:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006664:	4770      	bxeq	lr
 8006666:	b530      	push	{r4, r5, lr}
 8006668:	f44f 7460 	mov.w	r4, #896	; 0x380
 800666c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006674:	e71c      	b.n	80064b0 <__adddf3+0x138>
 8006676:	bf00      	nop

08006678 <__aeabi_ul2d>:
 8006678:	ea50 0201 	orrs.w	r2, r0, r1
 800667c:	bf08      	it	eq
 800667e:	4770      	bxeq	lr
 8006680:	b530      	push	{r4, r5, lr}
 8006682:	f04f 0500 	mov.w	r5, #0
 8006686:	e00a      	b.n	800669e <__aeabi_l2d+0x16>

08006688 <__aeabi_l2d>:
 8006688:	ea50 0201 	orrs.w	r2, r0, r1
 800668c:	bf08      	it	eq
 800668e:	4770      	bxeq	lr
 8006690:	b530      	push	{r4, r5, lr}
 8006692:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006696:	d502      	bpl.n	800669e <__aeabi_l2d+0x16>
 8006698:	4240      	negs	r0, r0
 800669a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800669e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066aa:	f43f aed8 	beq.w	800645e <__adddf3+0xe6>
 80066ae:	f04f 0203 	mov.w	r2, #3
 80066b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066b6:	bf18      	it	ne
 80066b8:	3203      	addne	r2, #3
 80066ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066be:	bf18      	it	ne
 80066c0:	3203      	addne	r2, #3
 80066c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066c6:	f1c2 0320 	rsb	r3, r2, #32
 80066ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80066ce:	fa20 f002 	lsr.w	r0, r0, r2
 80066d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80066d6:	ea40 000e 	orr.w	r0, r0, lr
 80066da:	fa21 f102 	lsr.w	r1, r1, r2
 80066de:	4414      	add	r4, r2
 80066e0:	e6bd      	b.n	800645e <__adddf3+0xe6>
 80066e2:	bf00      	nop

080066e4 <__aeabi_dmul>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80066ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80066f2:	bf1d      	ittte	ne
 80066f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80066f8:	ea94 0f0c 	teqne	r4, ip
 80066fc:	ea95 0f0c 	teqne	r5, ip
 8006700:	f000 f8de 	bleq	80068c0 <__aeabi_dmul+0x1dc>
 8006704:	442c      	add	r4, r5
 8006706:	ea81 0603 	eor.w	r6, r1, r3
 800670a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800670e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006712:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006716:	bf18      	it	ne
 8006718:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800671c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006724:	d038      	beq.n	8006798 <__aeabi_dmul+0xb4>
 8006726:	fba0 ce02 	umull	ip, lr, r0, r2
 800672a:	f04f 0500 	mov.w	r5, #0
 800672e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006732:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006736:	fbe0 e503 	umlal	lr, r5, r0, r3
 800673a:	f04f 0600 	mov.w	r6, #0
 800673e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006742:	f09c 0f00 	teq	ip, #0
 8006746:	bf18      	it	ne
 8006748:	f04e 0e01 	orrne.w	lr, lr, #1
 800674c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006750:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006754:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006758:	d204      	bcs.n	8006764 <__aeabi_dmul+0x80>
 800675a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800675e:	416d      	adcs	r5, r5
 8006760:	eb46 0606 	adc.w	r6, r6, r6
 8006764:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006768:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800676c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006770:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006774:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006778:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800677c:	bf88      	it	hi
 800677e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006782:	d81e      	bhi.n	80067c2 <__aeabi_dmul+0xde>
 8006784:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006788:	bf08      	it	eq
 800678a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800678e:	f150 0000 	adcs.w	r0, r0, #0
 8006792:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800679c:	ea46 0101 	orr.w	r1, r6, r1
 80067a0:	ea40 0002 	orr.w	r0, r0, r2
 80067a4:	ea81 0103 	eor.w	r1, r1, r3
 80067a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067ac:	bfc2      	ittt	gt
 80067ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80067b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80067b6:	bd70      	popgt	{r4, r5, r6, pc}
 80067b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067bc:	f04f 0e00 	mov.w	lr, #0
 80067c0:	3c01      	subs	r4, #1
 80067c2:	f300 80ab 	bgt.w	800691c <__aeabi_dmul+0x238>
 80067c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80067ca:	bfde      	ittt	le
 80067cc:	2000      	movle	r0, #0
 80067ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80067d2:	bd70      	pople	{r4, r5, r6, pc}
 80067d4:	f1c4 0400 	rsb	r4, r4, #0
 80067d8:	3c20      	subs	r4, #32
 80067da:	da35      	bge.n	8006848 <__aeabi_dmul+0x164>
 80067dc:	340c      	adds	r4, #12
 80067de:	dc1b      	bgt.n	8006818 <__aeabi_dmul+0x134>
 80067e0:	f104 0414 	add.w	r4, r4, #20
 80067e4:	f1c4 0520 	rsb	r5, r4, #32
 80067e8:	fa00 f305 	lsl.w	r3, r0, r5
 80067ec:	fa20 f004 	lsr.w	r0, r0, r4
 80067f0:	fa01 f205 	lsl.w	r2, r1, r5
 80067f4:	ea40 0002 	orr.w	r0, r0, r2
 80067f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80067fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006800:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006804:	fa21 f604 	lsr.w	r6, r1, r4
 8006808:	eb42 0106 	adc.w	r1, r2, r6
 800680c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006810:	bf08      	it	eq
 8006812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	f1c4 040c 	rsb	r4, r4, #12
 800681c:	f1c4 0520 	rsb	r5, r4, #32
 8006820:	fa00 f304 	lsl.w	r3, r0, r4
 8006824:	fa20 f005 	lsr.w	r0, r0, r5
 8006828:	fa01 f204 	lsl.w	r2, r1, r4
 800682c:	ea40 0002 	orr.w	r0, r0, r2
 8006830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006838:	f141 0100 	adc.w	r1, r1, #0
 800683c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006840:	bf08      	it	eq
 8006842:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f1c4 0520 	rsb	r5, r4, #32
 800684c:	fa00 f205 	lsl.w	r2, r0, r5
 8006850:	ea4e 0e02 	orr.w	lr, lr, r2
 8006854:	fa20 f304 	lsr.w	r3, r0, r4
 8006858:	fa01 f205 	lsl.w	r2, r1, r5
 800685c:	ea43 0302 	orr.w	r3, r3, r2
 8006860:	fa21 f004 	lsr.w	r0, r1, r4
 8006864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006868:	fa21 f204 	lsr.w	r2, r1, r4
 800686c:	ea20 0002 	bic.w	r0, r0, r2
 8006870:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006878:	bf08      	it	eq
 800687a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f094 0f00 	teq	r4, #0
 8006884:	d10f      	bne.n	80068a6 <__aeabi_dmul+0x1c2>
 8006886:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800688a:	0040      	lsls	r0, r0, #1
 800688c:	eb41 0101 	adc.w	r1, r1, r1
 8006890:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006894:	bf08      	it	eq
 8006896:	3c01      	subeq	r4, #1
 8006898:	d0f7      	beq.n	800688a <__aeabi_dmul+0x1a6>
 800689a:	ea41 0106 	orr.w	r1, r1, r6
 800689e:	f095 0f00 	teq	r5, #0
 80068a2:	bf18      	it	ne
 80068a4:	4770      	bxne	lr
 80068a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068aa:	0052      	lsls	r2, r2, #1
 80068ac:	eb43 0303 	adc.w	r3, r3, r3
 80068b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068b4:	bf08      	it	eq
 80068b6:	3d01      	subeq	r5, #1
 80068b8:	d0f7      	beq.n	80068aa <__aeabi_dmul+0x1c6>
 80068ba:	ea43 0306 	orr.w	r3, r3, r6
 80068be:	4770      	bx	lr
 80068c0:	ea94 0f0c 	teq	r4, ip
 80068c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068c8:	bf18      	it	ne
 80068ca:	ea95 0f0c 	teqne	r5, ip
 80068ce:	d00c      	beq.n	80068ea <__aeabi_dmul+0x206>
 80068d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d4:	bf18      	it	ne
 80068d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068da:	d1d1      	bne.n	8006880 <__aeabi_dmul+0x19c>
 80068dc:	ea81 0103 	eor.w	r1, r1, r3
 80068e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068e4:	f04f 0000 	mov.w	r0, #0
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
 80068ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068ee:	bf06      	itte	eq
 80068f0:	4610      	moveq	r0, r2
 80068f2:	4619      	moveq	r1, r3
 80068f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068f8:	d019      	beq.n	800692e <__aeabi_dmul+0x24a>
 80068fa:	ea94 0f0c 	teq	r4, ip
 80068fe:	d102      	bne.n	8006906 <__aeabi_dmul+0x222>
 8006900:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006904:	d113      	bne.n	800692e <__aeabi_dmul+0x24a>
 8006906:	ea95 0f0c 	teq	r5, ip
 800690a:	d105      	bne.n	8006918 <__aeabi_dmul+0x234>
 800690c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006910:	bf1c      	itt	ne
 8006912:	4610      	movne	r0, r2
 8006914:	4619      	movne	r1, r3
 8006916:	d10a      	bne.n	800692e <__aeabi_dmul+0x24a>
 8006918:	ea81 0103 	eor.w	r1, r1, r3
 800691c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006920:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006924:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006928:	f04f 0000 	mov.w	r0, #0
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006932:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006936:	bd70      	pop	{r4, r5, r6, pc}

08006938 <__aeabi_ddiv>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800693e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006942:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006946:	bf1d      	ittte	ne
 8006948:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800694c:	ea94 0f0c 	teqne	r4, ip
 8006950:	ea95 0f0c 	teqne	r5, ip
 8006954:	f000 f8a7 	bleq	8006aa6 <__aeabi_ddiv+0x16e>
 8006958:	eba4 0405 	sub.w	r4, r4, r5
 800695c:	ea81 0e03 	eor.w	lr, r1, r3
 8006960:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006964:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006968:	f000 8088 	beq.w	8006a7c <__aeabi_ddiv+0x144>
 800696c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006970:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006974:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006978:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800697c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006980:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006984:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006988:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800698c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006990:	429d      	cmp	r5, r3
 8006992:	bf08      	it	eq
 8006994:	4296      	cmpeq	r6, r2
 8006996:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800699a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800699e:	d202      	bcs.n	80069a6 <__aeabi_ddiv+0x6e>
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069a6:	1ab6      	subs	r6, r6, r2
 80069a8:	eb65 0503 	sbc.w	r5, r5, r3
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80069b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80069ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80069be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069c2:	bf22      	ittt	cs
 80069c4:	1ab6      	subcs	r6, r6, r2
 80069c6:	4675      	movcs	r5, lr
 80069c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80069d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80069d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069da:	bf22      	ittt	cs
 80069dc:	1ab6      	subcs	r6, r6, r2
 80069de:	4675      	movcs	r5, lr
 80069e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80069ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069f2:	bf22      	ittt	cs
 80069f4:	1ab6      	subcs	r6, r6, r2
 80069f6:	4675      	movcs	r5, lr
 80069f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a02:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a0a:	bf22      	ittt	cs
 8006a0c:	1ab6      	subcs	r6, r6, r2
 8006a0e:	4675      	movcs	r5, lr
 8006a10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a14:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a18:	d018      	beq.n	8006a4c <__aeabi_ddiv+0x114>
 8006a1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a22:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a36:	d1c0      	bne.n	80069ba <__aeabi_ddiv+0x82>
 8006a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a3c:	d10b      	bne.n	8006a56 <__aeabi_ddiv+0x11e>
 8006a3e:	ea41 0100 	orr.w	r1, r1, r0
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a4a:	e7b6      	b.n	80069ba <__aeabi_ddiv+0x82>
 8006a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a50:	bf04      	itt	eq
 8006a52:	4301      	orreq	r1, r0
 8006a54:	2000      	moveq	r0, #0
 8006a56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a5a:	bf88      	it	hi
 8006a5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a60:	f63f aeaf 	bhi.w	80067c2 <__aeabi_dmul+0xde>
 8006a64:	ebb5 0c03 	subs.w	ip, r5, r3
 8006a68:	bf04      	itt	eq
 8006a6a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006a6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a72:	f150 0000 	adcs.w	r0, r0, #0
 8006a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006a80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006a84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006a88:	bfc2      	ittt	gt
 8006a8a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a92:	bd70      	popgt	{r4, r5, r6, pc}
 8006a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a98:	f04f 0e00 	mov.w	lr, #0
 8006a9c:	3c01      	subs	r4, #1
 8006a9e:	e690      	b.n	80067c2 <__aeabi_dmul+0xde>
 8006aa0:	ea45 0e06 	orr.w	lr, r5, r6
 8006aa4:	e68d      	b.n	80067c2 <__aeabi_dmul+0xde>
 8006aa6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006aaa:	ea94 0f0c 	teq	r4, ip
 8006aae:	bf08      	it	eq
 8006ab0:	ea95 0f0c 	teqeq	r5, ip
 8006ab4:	f43f af3b 	beq.w	800692e <__aeabi_dmul+0x24a>
 8006ab8:	ea94 0f0c 	teq	r4, ip
 8006abc:	d10a      	bne.n	8006ad4 <__aeabi_ddiv+0x19c>
 8006abe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ac2:	f47f af34 	bne.w	800692e <__aeabi_dmul+0x24a>
 8006ac6:	ea95 0f0c 	teq	r5, ip
 8006aca:	f47f af25 	bne.w	8006918 <__aeabi_dmul+0x234>
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	e72c      	b.n	800692e <__aeabi_dmul+0x24a>
 8006ad4:	ea95 0f0c 	teq	r5, ip
 8006ad8:	d106      	bne.n	8006ae8 <__aeabi_ddiv+0x1b0>
 8006ada:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ade:	f43f aefd 	beq.w	80068dc <__aeabi_dmul+0x1f8>
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	e722      	b.n	800692e <__aeabi_dmul+0x24a>
 8006ae8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006aec:	bf18      	it	ne
 8006aee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006af2:	f47f aec5 	bne.w	8006880 <__aeabi_dmul+0x19c>
 8006af6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006afa:	f47f af0d 	bne.w	8006918 <__aeabi_dmul+0x234>
 8006afe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b02:	f47f aeeb 	bne.w	80068dc <__aeabi_dmul+0x1f8>
 8006b06:	e712      	b.n	800692e <__aeabi_dmul+0x24a>

08006b08 <__gedf2>:
 8006b08:	f04f 3cff 	mov.w	ip, #4294967295
 8006b0c:	e006      	b.n	8006b1c <__cmpdf2+0x4>
 8006b0e:	bf00      	nop

08006b10 <__ledf2>:
 8006b10:	f04f 0c01 	mov.w	ip, #1
 8006b14:	e002      	b.n	8006b1c <__cmpdf2+0x4>
 8006b16:	bf00      	nop

08006b18 <__cmpdf2>:
 8006b18:	f04f 0c01 	mov.w	ip, #1
 8006b1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b2c:	bf18      	it	ne
 8006b2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b32:	d01b      	beq.n	8006b6c <__cmpdf2+0x54>
 8006b34:	b001      	add	sp, #4
 8006b36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b3a:	bf0c      	ite	eq
 8006b3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b40:	ea91 0f03 	teqne	r1, r3
 8006b44:	bf02      	ittt	eq
 8006b46:	ea90 0f02 	teqeq	r0, r2
 8006b4a:	2000      	moveq	r0, #0
 8006b4c:	4770      	bxeq	lr
 8006b4e:	f110 0f00 	cmn.w	r0, #0
 8006b52:	ea91 0f03 	teq	r1, r3
 8006b56:	bf58      	it	pl
 8006b58:	4299      	cmppl	r1, r3
 8006b5a:	bf08      	it	eq
 8006b5c:	4290      	cmpeq	r0, r2
 8006b5e:	bf2c      	ite	cs
 8006b60:	17d8      	asrcs	r0, r3, #31
 8006b62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b66:	f040 0001 	orr.w	r0, r0, #1
 8006b6a:	4770      	bx	lr
 8006b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b74:	d102      	bne.n	8006b7c <__cmpdf2+0x64>
 8006b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b7a:	d107      	bne.n	8006b8c <__cmpdf2+0x74>
 8006b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b84:	d1d6      	bne.n	8006b34 <__cmpdf2+0x1c>
 8006b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b8a:	d0d3      	beq.n	8006b34 <__cmpdf2+0x1c>
 8006b8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop

08006b94 <__aeabi_cdrcmple>:
 8006b94:	4684      	mov	ip, r0
 8006b96:	4610      	mov	r0, r2
 8006b98:	4662      	mov	r2, ip
 8006b9a:	468c      	mov	ip, r1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4663      	mov	r3, ip
 8006ba0:	e000      	b.n	8006ba4 <__aeabi_cdcmpeq>
 8006ba2:	bf00      	nop

08006ba4 <__aeabi_cdcmpeq>:
 8006ba4:	b501      	push	{r0, lr}
 8006ba6:	f7ff ffb7 	bl	8006b18 <__cmpdf2>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	bf48      	it	mi
 8006bae:	f110 0f00 	cmnmi.w	r0, #0
 8006bb2:	bd01      	pop	{r0, pc}

08006bb4 <__aeabi_dcmpeq>:
 8006bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bb8:	f7ff fff4 	bl	8006ba4 <__aeabi_cdcmpeq>
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2001      	moveq	r0, #1
 8006bc0:	2000      	movne	r0, #0
 8006bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bc6:	bf00      	nop

08006bc8 <__aeabi_dcmplt>:
 8006bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bcc:	f7ff ffea 	bl	8006ba4 <__aeabi_cdcmpeq>
 8006bd0:	bf34      	ite	cc
 8006bd2:	2001      	movcc	r0, #1
 8006bd4:	2000      	movcs	r0, #0
 8006bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bda:	bf00      	nop

08006bdc <__aeabi_dcmple>:
 8006bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006be0:	f7ff ffe0 	bl	8006ba4 <__aeabi_cdcmpeq>
 8006be4:	bf94      	ite	ls
 8006be6:	2001      	movls	r0, #1
 8006be8:	2000      	movhi	r0, #0
 8006bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bee:	bf00      	nop

08006bf0 <__aeabi_dcmpge>:
 8006bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bf4:	f7ff ffce 	bl	8006b94 <__aeabi_cdrcmple>
 8006bf8:	bf94      	ite	ls
 8006bfa:	2001      	movls	r0, #1
 8006bfc:	2000      	movhi	r0, #0
 8006bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c02:	bf00      	nop

08006c04 <__aeabi_dcmpgt>:
 8006c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c08:	f7ff ffc4 	bl	8006b94 <__aeabi_cdrcmple>
 8006c0c:	bf34      	ite	cc
 8006c0e:	2001      	movcc	r0, #1
 8006c10:	2000      	movcs	r0, #0
 8006c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c16:	bf00      	nop

08006c18 <__aeabi_dcmpun>:
 8006c18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c20:	d102      	bne.n	8006c28 <__aeabi_dcmpun+0x10>
 8006c22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c26:	d10a      	bne.n	8006c3e <__aeabi_dcmpun+0x26>
 8006c28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c30:	d102      	bne.n	8006c38 <__aeabi_dcmpun+0x20>
 8006c32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c36:	d102      	bne.n	8006c3e <__aeabi_dcmpun+0x26>
 8006c38:	f04f 0000 	mov.w	r0, #0
 8006c3c:	4770      	bx	lr
 8006c3e:	f04f 0001 	mov.w	r0, #1
 8006c42:	4770      	bx	lr

08006c44 <__aeabi_d2iz>:
 8006c44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c4c:	d215      	bcs.n	8006c7a <__aeabi_d2iz+0x36>
 8006c4e:	d511      	bpl.n	8006c74 <__aeabi_d2iz+0x30>
 8006c50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c58:	d912      	bls.n	8006c80 <__aeabi_d2iz+0x3c>
 8006c5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c6a:	fa23 f002 	lsr.w	r0, r3, r2
 8006c6e:	bf18      	it	ne
 8006c70:	4240      	negne	r0, r0
 8006c72:	4770      	bx	lr
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	4770      	bx	lr
 8006c7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006c7e:	d105      	bne.n	8006c8c <__aeabi_d2iz+0x48>
 8006c80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006c84:	bf08      	it	eq
 8006c86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006c8a:	4770      	bx	lr
 8006c8c:	f04f 0000 	mov.w	r0, #0
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <__aeabi_d2uiz>:
 8006c94:	004a      	lsls	r2, r1, #1
 8006c96:	d211      	bcs.n	8006cbc <__aeabi_d2uiz+0x28>
 8006c98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c9c:	d211      	bcs.n	8006cc2 <__aeabi_d2uiz+0x2e>
 8006c9e:	d50d      	bpl.n	8006cbc <__aeabi_d2uiz+0x28>
 8006ca0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ca4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006ca8:	d40e      	bmi.n	8006cc8 <__aeabi_d2uiz+0x34>
 8006caa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cb6:	fa23 f002 	lsr.w	r0, r3, r2
 8006cba:	4770      	bx	lr
 8006cbc:	f04f 0000 	mov.w	r0, #0
 8006cc0:	4770      	bx	lr
 8006cc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cc6:	d102      	bne.n	8006cce <__aeabi_d2uiz+0x3a>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	4770      	bx	lr
 8006cce:	f04f 0000 	mov.w	r0, #0
 8006cd2:	4770      	bx	lr

08006cd4 <__aeabi_d2f>:
 8006cd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006cd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006cdc:	bf24      	itt	cs
 8006cde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006ce2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006ce6:	d90d      	bls.n	8006d04 <__aeabi_d2f+0x30>
 8006ce8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006cec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006cf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006cf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006cf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006cfc:	bf08      	it	eq
 8006cfe:	f020 0001 	biceq.w	r0, r0, #1
 8006d02:	4770      	bx	lr
 8006d04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d08:	d121      	bne.n	8006d4e <__aeabi_d2f+0x7a>
 8006d0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d0e:	bfbc      	itt	lt
 8006d10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d14:	4770      	bxlt	lr
 8006d16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d1e:	f1c2 0218 	rsb	r2, r2, #24
 8006d22:	f1c2 0c20 	rsb	ip, r2, #32
 8006d26:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d2a:	fa20 f002 	lsr.w	r0, r0, r2
 8006d2e:	bf18      	it	ne
 8006d30:	f040 0001 	orrne.w	r0, r0, #1
 8006d34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d40:	ea40 000c 	orr.w	r0, r0, ip
 8006d44:	fa23 f302 	lsr.w	r3, r3, r2
 8006d48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d4c:	e7cc      	b.n	8006ce8 <__aeabi_d2f+0x14>
 8006d4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006d52:	d107      	bne.n	8006d64 <__aeabi_d2f+0x90>
 8006d54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006d58:	bf1e      	ittt	ne
 8006d5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006d5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006d62:	4770      	bxne	lr
 8006d64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006d68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <__aeabi_uldivmod>:
 8006d74:	b953      	cbnz	r3, 8006d8c <__aeabi_uldivmod+0x18>
 8006d76:	b94a      	cbnz	r2, 8006d8c <__aeabi_uldivmod+0x18>
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	bf08      	it	eq
 8006d7c:	2800      	cmpeq	r0, #0
 8006d7e:	bf1c      	itt	ne
 8006d80:	f04f 31ff 	movne.w	r1, #4294967295
 8006d84:	f04f 30ff 	movne.w	r0, #4294967295
 8006d88:	f000 b9a6 	b.w	80070d8 <__aeabi_idiv0>
 8006d8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006d90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006d94:	f000 f83c 	bl	8006e10 <__udivmoddi4>
 8006d98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da0:	b004      	add	sp, #16
 8006da2:	4770      	bx	lr

08006da4 <__aeabi_d2lz>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	4604      	mov	r4, r0
 8006dac:	460d      	mov	r5, r1
 8006dae:	f7ff ff0b 	bl	8006bc8 <__aeabi_dcmplt>
 8006db2:	b928      	cbnz	r0, 8006dc0 <__aeabi_d2lz+0x1c>
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dbc:	f000 b80a 	b.w	8006dd4 <__aeabi_d2ulz>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006dc6:	f000 f805 	bl	8006dd4 <__aeabi_d2ulz>
 8006dca:	4240      	negs	r0, r0
 8006dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006dd0:	bd38      	pop	{r3, r4, r5, pc}
 8006dd2:	bf00      	nop

08006dd4 <__aeabi_d2ulz>:
 8006dd4:	b5d0      	push	{r4, r6, r7, lr}
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <__aeabi_d2ulz+0x34>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	f7ff fc81 	bl	80066e4 <__aeabi_dmul>
 8006de2:	f7ff ff57 	bl	8006c94 <__aeabi_d2uiz>
 8006de6:	4604      	mov	r4, r0
 8006de8:	f7ff fc02 	bl	80065f0 <__aeabi_ui2d>
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <__aeabi_d2ulz+0x38>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	f7ff fc78 	bl	80066e4 <__aeabi_dmul>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4639      	mov	r1, r7
 8006dfc:	f7ff faba 	bl	8006374 <__aeabi_dsub>
 8006e00:	f7ff ff48 	bl	8006c94 <__aeabi_d2uiz>
 8006e04:	4621      	mov	r1, r4
 8006e06:	bdd0      	pop	{r4, r6, r7, pc}
 8006e08:	3df00000 	.word	0x3df00000
 8006e0c:	41f00000 	.word	0x41f00000

08006e10 <__udivmoddi4>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	9e08      	ldr	r6, [sp, #32]
 8006e16:	460d      	mov	r5, r1
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d14a      	bne.n	8006eb6 <__udivmoddi4+0xa6>
 8006e20:	428a      	cmp	r2, r1
 8006e22:	4694      	mov	ip, r2
 8006e24:	d965      	bls.n	8006ef2 <__udivmoddi4+0xe2>
 8006e26:	fab2 f382 	clz	r3, r2
 8006e2a:	b143      	cbz	r3, 8006e3e <__udivmoddi4+0x2e>
 8006e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8006e30:	f1c3 0220 	rsb	r2, r3, #32
 8006e34:	409f      	lsls	r7, r3
 8006e36:	fa20 f202 	lsr.w	r2, r0, r2
 8006e3a:	4317      	orrs	r7, r2
 8006e3c:	409c      	lsls	r4, r3
 8006e3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006e42:	fa1f f58c 	uxth.w	r5, ip
 8006e46:	fbb7 f1fe 	udiv	r1, r7, lr
 8006e4a:	0c22      	lsrs	r2, r4, #16
 8006e4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8006e50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006e54:	fb01 f005 	mul.w	r0, r1, r5
 8006e58:	4290      	cmp	r0, r2
 8006e5a:	d90a      	bls.n	8006e72 <__udivmoddi4+0x62>
 8006e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8006e60:	f101 37ff 	add.w	r7, r1, #4294967295
 8006e64:	f080 811c 	bcs.w	80070a0 <__udivmoddi4+0x290>
 8006e68:	4290      	cmp	r0, r2
 8006e6a:	f240 8119 	bls.w	80070a0 <__udivmoddi4+0x290>
 8006e6e:	3902      	subs	r1, #2
 8006e70:	4462      	add	r2, ip
 8006e72:	1a12      	subs	r2, r2, r0
 8006e74:	b2a4      	uxth	r4, r4
 8006e76:	fbb2 f0fe 	udiv	r0, r2, lr
 8006e7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8006e7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006e82:	fb00 f505 	mul.w	r5, r0, r5
 8006e86:	42a5      	cmp	r5, r4
 8006e88:	d90a      	bls.n	8006ea0 <__udivmoddi4+0x90>
 8006e8a:	eb1c 0404 	adds.w	r4, ip, r4
 8006e8e:	f100 32ff 	add.w	r2, r0, #4294967295
 8006e92:	f080 8107 	bcs.w	80070a4 <__udivmoddi4+0x294>
 8006e96:	42a5      	cmp	r5, r4
 8006e98:	f240 8104 	bls.w	80070a4 <__udivmoddi4+0x294>
 8006e9c:	4464      	add	r4, ip
 8006e9e:	3802      	subs	r0, #2
 8006ea0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	b11e      	cbz	r6, 8006eb2 <__udivmoddi4+0xa2>
 8006eaa:	40dc      	lsrs	r4, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	e9c6 4300 	strd	r4, r3, [r6]
 8006eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eb6:	428b      	cmp	r3, r1
 8006eb8:	d908      	bls.n	8006ecc <__udivmoddi4+0xbc>
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	f000 80ed 	beq.w	800709a <__udivmoddi4+0x28a>
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	e9c6 0500 	strd	r0, r5, [r6]
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ecc:	fab3 f183 	clz	r1, r3
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	d149      	bne.n	8006f68 <__udivmoddi4+0x158>
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	d302      	bcc.n	8006ede <__udivmoddi4+0xce>
 8006ed8:	4282      	cmp	r2, r0
 8006eda:	f200 80f8 	bhi.w	80070ce <__udivmoddi4+0x2be>
 8006ede:	1a84      	subs	r4, r0, r2
 8006ee0:	eb65 0203 	sbc.w	r2, r5, r3
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	4617      	mov	r7, r2
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	d0e2      	beq.n	8006eb2 <__udivmoddi4+0xa2>
 8006eec:	e9c6 4700 	strd	r4, r7, [r6]
 8006ef0:	e7df      	b.n	8006eb2 <__udivmoddi4+0xa2>
 8006ef2:	b902      	cbnz	r2, 8006ef6 <__udivmoddi4+0xe6>
 8006ef4:	deff      	udf	#255	; 0xff
 8006ef6:	fab2 f382 	clz	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8090 	bne.w	8007020 <__udivmoddi4+0x210>
 8006f00:	1a8a      	subs	r2, r1, r2
 8006f02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006f06:	fa1f fe8c 	uxth.w	lr, ip
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	fbb2 f5f7 	udiv	r5, r2, r7
 8006f10:	fb07 2015 	mls	r0, r7, r5, r2
 8006f14:	0c22      	lsrs	r2, r4, #16
 8006f16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006f1a:	fb0e f005 	mul.w	r0, lr, r5
 8006f1e:	4290      	cmp	r0, r2
 8006f20:	d908      	bls.n	8006f34 <__udivmoddi4+0x124>
 8006f22:	eb1c 0202 	adds.w	r2, ip, r2
 8006f26:	f105 38ff 	add.w	r8, r5, #4294967295
 8006f2a:	d202      	bcs.n	8006f32 <__udivmoddi4+0x122>
 8006f2c:	4290      	cmp	r0, r2
 8006f2e:	f200 80cb 	bhi.w	80070c8 <__udivmoddi4+0x2b8>
 8006f32:	4645      	mov	r5, r8
 8006f34:	1a12      	subs	r2, r2, r0
 8006f36:	b2a4      	uxth	r4, r4
 8006f38:	fbb2 f0f7 	udiv	r0, r2, r7
 8006f3c:	fb07 2210 	mls	r2, r7, r0, r2
 8006f40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f44:	fb0e fe00 	mul.w	lr, lr, r0
 8006f48:	45a6      	cmp	lr, r4
 8006f4a:	d908      	bls.n	8006f5e <__udivmoddi4+0x14e>
 8006f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8006f50:	f100 32ff 	add.w	r2, r0, #4294967295
 8006f54:	d202      	bcs.n	8006f5c <__udivmoddi4+0x14c>
 8006f56:	45a6      	cmp	lr, r4
 8006f58:	f200 80bb 	bhi.w	80070d2 <__udivmoddi4+0x2c2>
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	eba4 040e 	sub.w	r4, r4, lr
 8006f62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006f66:	e79f      	b.n	8006ea8 <__udivmoddi4+0x98>
 8006f68:	f1c1 0720 	rsb	r7, r1, #32
 8006f6c:	408b      	lsls	r3, r1
 8006f6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8006f72:	ea4c 0c03 	orr.w	ip, ip, r3
 8006f76:	fa05 f401 	lsl.w	r4, r5, r1
 8006f7a:	fa20 f307 	lsr.w	r3, r0, r7
 8006f7e:	40fd      	lsrs	r5, r7
 8006f80:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006f84:	4323      	orrs	r3, r4
 8006f86:	fbb5 f8f9 	udiv	r8, r5, r9
 8006f8a:	fa1f fe8c 	uxth.w	lr, ip
 8006f8e:	fb09 5518 	mls	r5, r9, r8, r5
 8006f92:	0c1c      	lsrs	r4, r3, #16
 8006f94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006f98:	fb08 f50e 	mul.w	r5, r8, lr
 8006f9c:	42a5      	cmp	r5, r4
 8006f9e:	fa02 f201 	lsl.w	r2, r2, r1
 8006fa2:	fa00 f001 	lsl.w	r0, r0, r1
 8006fa6:	d90b      	bls.n	8006fc0 <__udivmoddi4+0x1b0>
 8006fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8006fac:	f108 3aff 	add.w	sl, r8, #4294967295
 8006fb0:	f080 8088 	bcs.w	80070c4 <__udivmoddi4+0x2b4>
 8006fb4:	42a5      	cmp	r5, r4
 8006fb6:	f240 8085 	bls.w	80070c4 <__udivmoddi4+0x2b4>
 8006fba:	f1a8 0802 	sub.w	r8, r8, #2
 8006fbe:	4464      	add	r4, ip
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	b29d      	uxth	r5, r3
 8006fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8006fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8006fcc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006fd0:	fb03 fe0e 	mul.w	lr, r3, lr
 8006fd4:	45a6      	cmp	lr, r4
 8006fd6:	d908      	bls.n	8006fea <__udivmoddi4+0x1da>
 8006fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8006fdc:	f103 35ff 	add.w	r5, r3, #4294967295
 8006fe0:	d26c      	bcs.n	80070bc <__udivmoddi4+0x2ac>
 8006fe2:	45a6      	cmp	lr, r4
 8006fe4:	d96a      	bls.n	80070bc <__udivmoddi4+0x2ac>
 8006fe6:	3b02      	subs	r3, #2
 8006fe8:	4464      	add	r4, ip
 8006fea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006fee:	fba3 9502 	umull	r9, r5, r3, r2
 8006ff2:	eba4 040e 	sub.w	r4, r4, lr
 8006ff6:	42ac      	cmp	r4, r5
 8006ff8:	46c8      	mov	r8, r9
 8006ffa:	46ae      	mov	lr, r5
 8006ffc:	d356      	bcc.n	80070ac <__udivmoddi4+0x29c>
 8006ffe:	d053      	beq.n	80070a8 <__udivmoddi4+0x298>
 8007000:	b156      	cbz	r6, 8007018 <__udivmoddi4+0x208>
 8007002:	ebb0 0208 	subs.w	r2, r0, r8
 8007006:	eb64 040e 	sbc.w	r4, r4, lr
 800700a:	fa04 f707 	lsl.w	r7, r4, r7
 800700e:	40ca      	lsrs	r2, r1
 8007010:	40cc      	lsrs	r4, r1
 8007012:	4317      	orrs	r7, r2
 8007014:	e9c6 7400 	strd	r7, r4, [r6]
 8007018:	4618      	mov	r0, r3
 800701a:	2100      	movs	r1, #0
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	f1c3 0120 	rsb	r1, r3, #32
 8007024:	fa02 fc03 	lsl.w	ip, r2, r3
 8007028:	fa20 f201 	lsr.w	r2, r0, r1
 800702c:	fa25 f101 	lsr.w	r1, r5, r1
 8007030:	409d      	lsls	r5, r3
 8007032:	432a      	orrs	r2, r5
 8007034:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007038:	fa1f fe8c 	uxth.w	lr, ip
 800703c:	fbb1 f0f7 	udiv	r0, r1, r7
 8007040:	fb07 1510 	mls	r5, r7, r0, r1
 8007044:	0c11      	lsrs	r1, r2, #16
 8007046:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800704a:	fb00 f50e 	mul.w	r5, r0, lr
 800704e:	428d      	cmp	r5, r1
 8007050:	fa04 f403 	lsl.w	r4, r4, r3
 8007054:	d908      	bls.n	8007068 <__udivmoddi4+0x258>
 8007056:	eb1c 0101 	adds.w	r1, ip, r1
 800705a:	f100 38ff 	add.w	r8, r0, #4294967295
 800705e:	d22f      	bcs.n	80070c0 <__udivmoddi4+0x2b0>
 8007060:	428d      	cmp	r5, r1
 8007062:	d92d      	bls.n	80070c0 <__udivmoddi4+0x2b0>
 8007064:	3802      	subs	r0, #2
 8007066:	4461      	add	r1, ip
 8007068:	1b49      	subs	r1, r1, r5
 800706a:	b292      	uxth	r2, r2
 800706c:	fbb1 f5f7 	udiv	r5, r1, r7
 8007070:	fb07 1115 	mls	r1, r7, r5, r1
 8007074:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007078:	fb05 f10e 	mul.w	r1, r5, lr
 800707c:	4291      	cmp	r1, r2
 800707e:	d908      	bls.n	8007092 <__udivmoddi4+0x282>
 8007080:	eb1c 0202 	adds.w	r2, ip, r2
 8007084:	f105 38ff 	add.w	r8, r5, #4294967295
 8007088:	d216      	bcs.n	80070b8 <__udivmoddi4+0x2a8>
 800708a:	4291      	cmp	r1, r2
 800708c:	d914      	bls.n	80070b8 <__udivmoddi4+0x2a8>
 800708e:	3d02      	subs	r5, #2
 8007090:	4462      	add	r2, ip
 8007092:	1a52      	subs	r2, r2, r1
 8007094:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8007098:	e738      	b.n	8006f0c <__udivmoddi4+0xfc>
 800709a:	4631      	mov	r1, r6
 800709c:	4630      	mov	r0, r6
 800709e:	e708      	b.n	8006eb2 <__udivmoddi4+0xa2>
 80070a0:	4639      	mov	r1, r7
 80070a2:	e6e6      	b.n	8006e72 <__udivmoddi4+0x62>
 80070a4:	4610      	mov	r0, r2
 80070a6:	e6fb      	b.n	8006ea0 <__udivmoddi4+0x90>
 80070a8:	4548      	cmp	r0, r9
 80070aa:	d2a9      	bcs.n	8007000 <__udivmoddi4+0x1f0>
 80070ac:	ebb9 0802 	subs.w	r8, r9, r2
 80070b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80070b4:	3b01      	subs	r3, #1
 80070b6:	e7a3      	b.n	8007000 <__udivmoddi4+0x1f0>
 80070b8:	4645      	mov	r5, r8
 80070ba:	e7ea      	b.n	8007092 <__udivmoddi4+0x282>
 80070bc:	462b      	mov	r3, r5
 80070be:	e794      	b.n	8006fea <__udivmoddi4+0x1da>
 80070c0:	4640      	mov	r0, r8
 80070c2:	e7d1      	b.n	8007068 <__udivmoddi4+0x258>
 80070c4:	46d0      	mov	r8, sl
 80070c6:	e77b      	b.n	8006fc0 <__udivmoddi4+0x1b0>
 80070c8:	3d02      	subs	r5, #2
 80070ca:	4462      	add	r2, ip
 80070cc:	e732      	b.n	8006f34 <__udivmoddi4+0x124>
 80070ce:	4608      	mov	r0, r1
 80070d0:	e70a      	b.n	8006ee8 <__udivmoddi4+0xd8>
 80070d2:	4464      	add	r4, ip
 80070d4:	3802      	subs	r0, #2
 80070d6:	e742      	b.n	8006f5e <__udivmoddi4+0x14e>

080070d8 <__aeabi_idiv0>:
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop

080070dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80070dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007114 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070e0:	480d      	ldr	r0, [pc, #52]	; (8007118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80070e2:	490e      	ldr	r1, [pc, #56]	; (800711c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80070e4:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80070e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070e8:	e002      	b.n	80070f0 <LoopCopyDataInit>

080070ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070ee:	3304      	adds	r3, #4

080070f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070f4:	d3f9      	bcc.n	80070ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070f8:	4c0b      	ldr	r4, [pc, #44]	; (8007128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80070fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070fc:	e001      	b.n	8007102 <LoopFillZerobss>

080070fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007100:	3204      	adds	r2, #4

08007102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007104:	d3fb      	bcc.n	80070fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007106:	f004 f8ab 	bl	800b260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800710a:	f00a fc77 	bl	80119fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800710e:	f000 fde7 	bl	8007ce0 <main>
  bx  lr    
 8007112:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007114:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800711c:	20000a9c 	.word	0x20000a9c
  ldr r2, =_sidata
 8007120:	0814fe58 	.word	0x0814fe58
  ldr r2, =_sbss
 8007124:	20000a9c 	.word	0x20000a9c
  ldr r4, =_ebss
 8007128:	2001a12c 	.word	0x2001a12c

0800712c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800712c:	e7fe      	b.n	800712c <ADC_IRQHandler>
	...

08007130 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b090      	sub	sp, #64	; 0x40
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8007138:	4b2e      	ldr	r3, [pc, #184]	; (80071f4 <aiInit+0xc4>)
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	2301      	movs	r3, #1
 800713e:	823b      	strh	r3, [r7, #16]
 8007140:	2301      	movs	r3, #1
 8007142:	827b      	strh	r3, [r7, #18]
 8007144:	2301      	movs	r3, #1
 8007146:	82bb      	strh	r3, [r7, #20]
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <aiInit+0xc8>)
 800714a:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800714c:	f001 fb6c 	bl	8008828 <ai_network_data_weights_get>
 8007150:	4603      	mov	r3, r0
    const ai_network_params params = {
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
 8007158:	4b28      	ldr	r3, [pc, #160]	; (80071fc <aiInit+0xcc>)
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
 800715c:	2301      	movs	r3, #1
 800715e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007160:	2301      	movs	r3, #1
 8007162:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007164:	2301      	movs	r3, #1
 8007166:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <aiInit+0xd0>)
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
 8007170:	2300      	movs	r3, #0
 8007172:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8007174:	2100      	movs	r1, #0
 8007176:	4823      	ldr	r0, [pc, #140]	; (8007204 <aiInit+0xd4>)
 8007178:	f001 faf0 	bl	800875c <ai_network_create>
 800717c:	4603      	mov	r3, r0
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 8007180:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <aiInit+0x5e>
	    return -1;
 8007188:	f04f 33ff 	mov.w	r3, #4294967295
 800718c:	e02e      	b.n	80071ec <aiInit+0xbc>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800718e:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <aiInit+0xd4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f107 020c 	add.w	r2, r7, #12
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fb01 	bl	80087a0 <ai_network_init>
 800719e:	4603      	mov	r3, r0
 80071a0:	f083 0301 	eor.w	r3, r3, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01f      	beq.n	80071ea <aiInit+0xba>
        err = ai_network_get_error(network);
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <aiInit+0xd4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fac8 	bl	8008744 <ai_network_get_error>
 80071b4:	4603      	mov	r3, r0
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (err.type != AI_ERROR_NONE) {
 80071b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <aiInit+0xa4>
        	printf("ERROR : type=%d code=%d\r\n", err.type, err.code);
 80071c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80071c4:	4619      	mov	r1, r3
 80071c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c8:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80071cc:	461a      	mov	r2, r3
 80071ce:	480e      	ldr	r0, [pc, #56]	; (8007208 <aiInit+0xd8>)
 80071d0:	f00a fa46 	bl	8011660 <iprintf>
        }
        ai_network_destroy(network);
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <aiInit+0xd4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 fad5 	bl	8008788 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <aiInit+0xd4>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
	    return -2;
 80071e4:	f06f 0301 	mvn.w	r3, #1
 80071e8:	e000      	b.n	80071ec <aiInit+0xbc>
    }

    return 0;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3740      	adds	r7, #64	; 0x40
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40040440 	.word	0x40040440
 80071f8:	00134028 	.word	0x00134028
 80071fc:	00040440 	.word	0x00040440
 8007200:	00018f00 	.word	0x00018f00
 8007204:	20000ab8 	.word	0x20000ab8
 8007208:	08017ec0 	.word	0x08017ec0

0800720c <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
    ai_error err;



    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8007216:	4b14      	ldr	r3, [pc, #80]	; (8007268 <aiRun+0x5c>)
 8007218:	2201      	movs	r2, #1
 800721a:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <aiRun+0x5c>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <aiRun+0x60>)
 8007224:	2201      	movs	r2, #1
 8007226:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8007228:	4a10      	ldr	r2, [pc, #64]	; (800726c <aiRun+0x60>)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
     ai_network_run(network, &ai_input[0], &ai_output[0]);
 800722e:	4b10      	ldr	r3, [pc, #64]	; (8007270 <aiRun+0x64>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <aiRun+0x60>)
 8007234:	490c      	ldr	r1, [pc, #48]	; (8007268 <aiRun+0x5c>)
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fae5 	bl	8008806 <ai_network_run>
     err = ai_network_get_error(network);
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <aiRun+0x64>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fa7f 	bl	8008744 <ai_network_get_error>
 8007246:	4603      	mov	r3, r0
 8007248:	60fb      	str	r3, [r7, #12]
     printf("ERROR : type=%d code=%d", err.type, err.code);
 800724a:	7b3b      	ldrb	r3, [r7, #12]
 800724c:	4619      	mov	r1, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007254:	461a      	mov	r2, r3
 8007256:	4807      	ldr	r0, [pc, #28]	; (8007274 <aiRun+0x68>)
 8007258:	f00a fa02 	bl	8011660 <iprintf>
}
 800725c:	bf00      	nop
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000000 	.word	0x20000000
 800726c:	20000018 	.word	0x20000018
 8007270:	20000ab8 	.word	0x20000ab8
 8007274:	08017edc 	.word	0x08017edc

08007278 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800727c:	4802      	ldr	r0, [pc, #8]	; (8007288 <MX_X_CUBE_AI_Init+0x10>)
 800727e:	f7ff ff57 	bl	8007130 <aiInit>
    /* USER CODE END 0 */
}
 8007282:	bf00      	nop
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000abc 	.word	0x20000abc

0800728c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float * nn_input_data, ai_float *nn_output_data)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]

        aiRun(nn_input_data, nn_output_data);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ffb7 	bl	800720c <aiRun>

}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <MX_CRC_Init+0x20>)
 80072ae:	4a07      	ldr	r2, [pc, #28]	; (80072cc <MX_CRC_Init+0x24>)
 80072b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <MX_CRC_Init+0x20>)
 80072b4:	f004 f92e 	bl	800b514 <HAL_CRC_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80072be:	f001 f91f 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	200199bc 	.word	0x200199bc
 80072cc:	40023000 	.word	0x40023000

080072d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a0b      	ldr	r2, [pc, #44]	; (800730c <HAL_CRC_MspInit+0x3c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d10d      	bne.n	80072fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <HAL_CRC_MspInit+0x40>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	4a09      	ldr	r2, [pc, #36]	; (8007310 <HAL_CRC_MspInit+0x40>)
 80072ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072f0:	6313      	str	r3, [r2, #48]	; 0x30
 80072f2:	4b07      	ldr	r3, [pc, #28]	; (8007310 <HAL_CRC_MspInit+0x40>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40023000 	.word	0x40023000
 8007310:	40023800 	.word	0x40023800

08007314 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8007318:	4b15      	ldr	r3, [pc, #84]	; (8007370 <MX_DMA2D_Init+0x5c>)
 800731a:	4a16      	ldr	r2, [pc, #88]	; (8007374 <MX_DMA2D_Init+0x60>)
 800731c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800731e:	4b14      	ldr	r3, [pc, #80]	; (8007370 <MX_DMA2D_Init+0x5c>)
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007324:	4b12      	ldr	r3, [pc, #72]	; (8007370 <MX_DMA2D_Init+0x5c>)
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800732a:	4b11      	ldr	r3, [pc, #68]	; (8007370 <MX_DMA2D_Init+0x5c>)
 800732c:	2200      	movs	r2, #0
 800732e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007330:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <MX_DMA2D_Init+0x5c>)
 8007332:	2200      	movs	r2, #0
 8007334:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <MX_DMA2D_Init+0x5c>)
 8007338:	2200      	movs	r2, #0
 800733a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <MX_DMA2D_Init+0x5c>)
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <MX_DMA2D_Init+0x5c>)
 8007344:	2200      	movs	r2, #0
 8007346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007348:	4809      	ldr	r0, [pc, #36]	; (8007370 <MX_DMA2D_Init+0x5c>)
 800734a:	f004 fabd 	bl	800b8c8 <HAL_DMA2D_Init>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8007354:	f001 f8d4 	bl	8008500 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007358:	2101      	movs	r1, #1
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <MX_DMA2D_Init+0x5c>)
 800735c:	f004 fc12 	bl	800bb84 <HAL_DMA2D_ConfigLayer>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8007366:	f001 f8cb 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200199c4 	.word	0x200199c4
 8007374:	4002b000 	.word	0x4002b000

08007378 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a0b      	ldr	r2, [pc, #44]	; (80073b4 <HAL_DMA2D_MspInit+0x3c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d10d      	bne.n	80073a6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <HAL_DMA2D_MspInit+0x40>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <HAL_DMA2D_MspInit+0x40>)
 8007394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007398:	6313      	str	r3, [r2, #48]	; 0x30
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <HAL_DMA2D_MspInit+0x40>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	4002b000 	.word	0x4002b000
 80073b8:	40023800 	.word	0x40023800

080073bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80073c2:	1d3b      	adds	r3, r7, #4
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	611a      	str	r2, [r3, #16]
 80073d0:	615a      	str	r2, [r3, #20]
 80073d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80073d4:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <MX_FMC_Init+0x98>)
 80073d6:	4a20      	ldr	r2, [pc, #128]	; (8007458 <MX_FMC_Init+0x9c>)
 80073d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80073da:	4b1e      	ldr	r3, [pc, #120]	; (8007454 <MX_FMC_Init+0x98>)
 80073dc:	2201      	movs	r2, #1
 80073de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80073e0:	4b1c      	ldr	r3, [pc, #112]	; (8007454 <MX_FMC_Init+0x98>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80073e6:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <MX_FMC_Init+0x98>)
 80073e8:	2204      	movs	r2, #4
 80073ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80073ec:	4b19      	ldr	r3, [pc, #100]	; (8007454 <MX_FMC_Init+0x98>)
 80073ee:	2210      	movs	r2, #16
 80073f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80073f2:	4b18      	ldr	r3, [pc, #96]	; (8007454 <MX_FMC_Init+0x98>)
 80073f4:	2240      	movs	r2, #64	; 0x40
 80073f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <MX_FMC_Init+0x98>)
 80073fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80073fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <MX_FMC_Init+0x98>)
 8007402:	2200      	movs	r2, #0
 8007404:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007406:	4b13      	ldr	r3, [pc, #76]	; (8007454 <MX_FMC_Init+0x98>)
 8007408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800740c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <MX_FMC_Init+0x98>)
 8007410:	2200      	movs	r2, #0
 8007412:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <MX_FMC_Init+0x98>)
 8007416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800741a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800741c:	2302      	movs	r3, #2
 800741e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007420:	2307      	movs	r3, #7
 8007422:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8007424:	2304      	movs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8007428:	2307      	movs	r3, #7
 800742a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800742c:	2303      	movs	r3, #3
 800742e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8007430:	2302      	movs	r3, #2
 8007432:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8007434:	2302      	movs	r3, #2
 8007436:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	4619      	mov	r1, r3
 800743c:	4805      	ldr	r0, [pc, #20]	; (8007454 <MX_FMC_Init+0x98>)
 800743e:	f007 fa09 	bl	800e854 <HAL_SDRAM_Init>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8007448:	f001 f85a 	bl	8008500 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800744c:	bf00      	nop
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20019a04 	.word	0x20019a04
 8007458:	a0000140 	.word	0xa0000140

0800745c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8007470:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <HAL_FMC_MspInit+0x104>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d16f      	bne.n	8007558 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8007478:	4b39      	ldr	r3, [pc, #228]	; (8007560 <HAL_FMC_MspInit+0x104>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4b38      	ldr	r3, [pc, #224]	; (8007564 <HAL_FMC_MspInit+0x108>)
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	4a37      	ldr	r2, [pc, #220]	; (8007564 <HAL_FMC_MspInit+0x108>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6393      	str	r3, [r2, #56]	; 0x38
 800748e:	4b35      	ldr	r3, [pc, #212]	; (8007564 <HAL_FMC_MspInit+0x108>)
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800749a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800749e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a0:	2302      	movs	r3, #2
 80074a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a8:	2303      	movs	r3, #3
 80074aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074ac:	230c      	movs	r3, #12
 80074ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80074b0:	1d3b      	adds	r3, r7, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	482c      	ldr	r0, [pc, #176]	; (8007568 <HAL_FMC_MspInit+0x10c>)
 80074b6:	f004 fc93 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80074ba:	2301      	movs	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074be:	2302      	movs	r3, #2
 80074c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074c6:	2303      	movs	r3, #3
 80074c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074ca:	230c      	movs	r3, #12
 80074cc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4826      	ldr	r0, [pc, #152]	; (800756c <HAL_FMC_MspInit+0x110>)
 80074d4:	f004 fc84 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80074d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80074dc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074de:	2302      	movs	r3, #2
 80074e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e6:	2303      	movs	r3, #3
 80074e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074ea:	230c      	movs	r3, #12
 80074ec:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	481f      	ldr	r0, [pc, #124]	; (8007570 <HAL_FMC_MspInit+0x114>)
 80074f4:	f004 fc74 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80074f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80074fc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fe:	2302      	movs	r3, #2
 8007500:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007506:	2303      	movs	r3, #3
 8007508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800750a:	230c      	movs	r3, #12
 800750c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	4619      	mov	r1, r3
 8007512:	4818      	ldr	r0, [pc, #96]	; (8007574 <HAL_FMC_MspInit+0x118>)
 8007514:	f004 fc64 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8007518:	f24c 7303 	movw	r3, #50947	; 0xc703
 800751c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751e:	2302      	movs	r3, #2
 8007520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007526:	2303      	movs	r3, #3
 8007528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800752a:	230c      	movs	r3, #12
 800752c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	4619      	mov	r1, r3
 8007532:	4811      	ldr	r0, [pc, #68]	; (8007578 <HAL_FMC_MspInit+0x11c>)
 8007534:	f004 fc54 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8007538:	2360      	movs	r3, #96	; 0x60
 800753a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753c:	2302      	movs	r3, #2
 800753e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007544:	2303      	movs	r3, #3
 8007546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007548:	230c      	movs	r3, #12
 800754a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	4619      	mov	r1, r3
 8007550:	480a      	ldr	r0, [pc, #40]	; (800757c <HAL_FMC_MspInit+0x120>)
 8007552:	f004 fc45 	bl	800bde0 <HAL_GPIO_Init>
 8007556:	e000      	b.n	800755a <HAL_FMC_MspInit+0xfe>
    return;
 8007558:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20019a38 	.word	0x20019a38
 8007564:	40023800 	.word	0x40023800
 8007568:	40021400 	.word	0x40021400
 800756c:	40020800 	.word	0x40020800
 8007570:	40021800 	.word	0x40021800
 8007574:	40021000 	.word	0x40021000
 8007578:	40020c00 	.word	0x40020c00
 800757c:	40020400 	.word	0x40020400

08007580 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007588:	f7ff ff68 	bl	800745c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800758c:	bf00      	nop
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08e      	sub	sp, #56	; 0x38
 8007598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	60da      	str	r2, [r3, #12]
 80075a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075aa:	2300      	movs	r3, #0
 80075ac:	623b      	str	r3, [r7, #32]
 80075ae:	4b8a      	ldr	r3, [pc, #552]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	4a89      	ldr	r2, [pc, #548]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075b4:	f043 0304 	orr.w	r3, r3, #4
 80075b8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ba:	4b87      	ldr	r3, [pc, #540]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80075c6:	2300      	movs	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	4b83      	ldr	r3, [pc, #524]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	4a82      	ldr	r2, [pc, #520]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075d0:	f043 0320 	orr.w	r3, r3, #32
 80075d4:	6313      	str	r3, [r2, #48]	; 0x30
 80075d6:	4b80      	ldr	r3, [pc, #512]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	4b7c      	ldr	r3, [pc, #496]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	4a7b      	ldr	r2, [pc, #492]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f0:	6313      	str	r3, [r2, #48]	; 0x30
 80075f2:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <MX_GPIO_Init+0x244>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	4b75      	ldr	r3, [pc, #468]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4a74      	ldr	r2, [pc, #464]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	6313      	str	r3, [r2, #48]	; 0x30
 800760e:	4b72      	ldr	r3, [pc, #456]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	4b6e      	ldr	r3, [pc, #440]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	4a6d      	ldr	r2, [pc, #436]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	6313      	str	r3, [r2, #48]	; 0x30
 800762a:	4b6b      	ldr	r3, [pc, #428]	; (80077d8 <MX_GPIO_Init+0x244>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	4b67      	ldr	r3, [pc, #412]	; (80077d8 <MX_GPIO_Init+0x244>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	4a66      	ldr	r2, [pc, #408]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007644:	6313      	str	r3, [r2, #48]	; 0x30
 8007646:	4b64      	ldr	r3, [pc, #400]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	4b60      	ldr	r3, [pc, #384]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a5f      	ldr	r2, [pc, #380]	; (80077d8 <MX_GPIO_Init+0x244>)
 800765c:	f043 0310 	orr.w	r3, r3, #16
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b5d      	ldr	r3, [pc, #372]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	60bb      	str	r3, [r7, #8]
 800766c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	4b59      	ldr	r3, [pc, #356]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a58      	ldr	r2, [pc, #352]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007678:	f043 0308 	orr.w	r3, r3, #8
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b56      	ldr	r3, [pc, #344]	; (80077d8 <MX_GPIO_Init+0x244>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800768a:	2200      	movs	r2, #0
 800768c:	2116      	movs	r1, #22
 800768e:	4853      	ldr	r0, [pc, #332]	; (80077dc <MX_GPIO_Init+0x248>)
 8007690:	f004 fe76 	bl	800c380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	; 0x80
 8007698:	4851      	ldr	r0, [pc, #324]	; (80077e0 <MX_GPIO_Init+0x24c>)
 800769a:	f004 fe71 	bl	800c380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800769e:	2200      	movs	r2, #0
 80076a0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80076a4:	484f      	ldr	r0, [pc, #316]	; (80077e4 <MX_GPIO_Init+0x250>)
 80076a6:	f004 fe6b 	bl	800c380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80076aa:	2200      	movs	r2, #0
 80076ac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80076b0:	484d      	ldr	r0, [pc, #308]	; (80077e8 <MX_GPIO_Init+0x254>)
 80076b2:	f004 fe65 	bl	800c380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80076b6:	2316      	movs	r3, #22
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c2:	2300      	movs	r3, #0
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ca:	4619      	mov	r1, r3
 80076cc:	4843      	ldr	r0, [pc, #268]	; (80077dc <MX_GPIO_Init+0x248>)
 80076ce:	f004 fb87 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80076d2:	f248 0307 	movw	r3, #32775	; 0x8007
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80076d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e6:	4619      	mov	r1, r3
 80076e8:	483d      	ldr	r0, [pc, #244]	; (80077e0 <MX_GPIO_Init+0x24c>)
 80076ea:	f004 fb79 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076f2:	2301      	movs	r3, #1
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076fa:	2300      	movs	r3, #0
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80076fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007702:	4619      	mov	r1, r3
 8007704:	4836      	ldr	r0, [pc, #216]	; (80077e0 <MX_GPIO_Init+0x24c>)
 8007706:	f004 fb6b 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800770a:	2320      	movs	r3, #32
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800770e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007714:	2300      	movs	r3, #0
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800771c:	4619      	mov	r1, r3
 800771e:	482f      	ldr	r0, [pc, #188]	; (80077dc <MX_GPIO_Init+0x248>)
 8007720:	f004 fb5e 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007724:	2304      	movs	r3, #4
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007728:	2300      	movs	r3, #0
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772c:	2300      	movs	r3, #0
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007734:	4619      	mov	r1, r3
 8007736:	482d      	ldr	r0, [pc, #180]	; (80077ec <MX_GPIO_Init+0x258>)
 8007738:	f004 fb52 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800773c:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007742:	2302      	movs	r3, #2
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007746:	2300      	movs	r3, #0
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800774a:	2300      	movs	r3, #0
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800774e:	230c      	movs	r3, #12
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007756:	4619      	mov	r1, r3
 8007758:	4824      	ldr	r0, [pc, #144]	; (80077ec <MX_GPIO_Init+0x258>)
 800775a:	f004 fb41 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800775e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007764:	2300      	movs	r3, #0
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007768:	2300      	movs	r3, #0
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800776c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007770:	4619      	mov	r1, r3
 8007772:	481e      	ldr	r0, [pc, #120]	; (80077ec <MX_GPIO_Init+0x258>)
 8007774:	f004 fb34 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800777e:	2300      	movs	r3, #0
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007782:	2300      	movs	r3, #0
 8007784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8007786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800778a:	4619      	mov	r1, r3
 800778c:	4815      	ldr	r0, [pc, #84]	; (80077e4 <MX_GPIO_Init+0x250>)
 800778e:	f004 fb27 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8007792:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007798:	2301      	movs	r3, #1
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800779c:	2300      	movs	r3, #0
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077a0:	2300      	movs	r3, #0
 80077a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077a8:	4619      	mov	r1, r3
 80077aa:	480e      	ldr	r0, [pc, #56]	; (80077e4 <MX_GPIO_Init+0x250>)
 80077ac:	f004 fb18 	bl	800bde0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80077b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077b6:	2301      	movs	r3, #1
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077be:	2300      	movs	r3, #0
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80077c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c6:	4619      	mov	r1, r3
 80077c8:	4807      	ldr	r0, [pc, #28]	; (80077e8 <MX_GPIO_Init+0x254>)
 80077ca:	f004 fb09 	bl	800bde0 <HAL_GPIO_Init>

}
 80077ce:	bf00      	nop
 80077d0:	3738      	adds	r7, #56	; 0x38
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40020800 	.word	0x40020800
 80077e0:	40020000 	.word	0x40020000
 80077e4:	40020c00 	.word	0x40020c00
 80077e8:	40021800 	.word	0x40021800
 80077ec:	40020400 	.word	0x40020400

080077f0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <MX_I2C3_Init+0x74>)
 80077f6:	4a1c      	ldr	r2, [pc, #112]	; (8007868 <MX_I2C3_Init+0x78>)
 80077f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <MX_I2C3_Init+0x74>)
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <MX_I2C3_Init+0x7c>)
 80077fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007800:	4b18      	ldr	r3, [pc, #96]	; (8007864 <MX_I2C3_Init+0x74>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007806:	4b17      	ldr	r3, [pc, #92]	; (8007864 <MX_I2C3_Init+0x74>)
 8007808:	2200      	movs	r2, #0
 800780a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800780c:	4b15      	ldr	r3, [pc, #84]	; (8007864 <MX_I2C3_Init+0x74>)
 800780e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007812:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <MX_I2C3_Init+0x74>)
 8007816:	2200      	movs	r2, #0
 8007818:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <MX_I2C3_Init+0x74>)
 800781c:	2200      	movs	r2, #0
 800781e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <MX_I2C3_Init+0x74>)
 8007822:	2200      	movs	r2, #0
 8007824:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <MX_I2C3_Init+0x74>)
 8007828:	2200      	movs	r2, #0
 800782a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800782c:	480d      	ldr	r0, [pc, #52]	; (8007864 <MX_I2C3_Init+0x74>)
 800782e:	f004 fdc1 	bl	800c3b4 <HAL_I2C_Init>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007838:	f000 fe62 	bl	8008500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800783c:	2100      	movs	r1, #0
 800783e:	4809      	ldr	r0, [pc, #36]	; (8007864 <MX_I2C3_Init+0x74>)
 8007840:	f005 fdb5 	bl	800d3ae <HAL_I2CEx_ConfigAnalogFilter>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800784a:	f000 fe59 	bl	8008500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800784e:	2100      	movs	r1, #0
 8007850:	4804      	ldr	r0, [pc, #16]	; (8007864 <MX_I2C3_Init+0x74>)
 8007852:	f005 fde8 	bl	800d426 <HAL_I2CEx_ConfigDigitalFilter>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800785c:	f000 fe50 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20019a3c 	.word	0x20019a3c
 8007868:	40005c00 	.word	0x40005c00
 800786c:	000186a0 	.word	0x000186a0

08007870 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	605a      	str	r2, [r3, #4]
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a29      	ldr	r2, [pc, #164]	; (8007934 <HAL_I2C_MspInit+0xc4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d14b      	bne.n	800792a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	613b      	str	r3, [r7, #16]
 8007896:	4b28      	ldr	r3, [pc, #160]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	4a27      	ldr	r2, [pc, #156]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 800789c:	f043 0304 	orr.w	r3, r3, #4
 80078a0:	6313      	str	r3, [r2, #48]	; 0x30
 80078a2:	4b25      	ldr	r3, [pc, #148]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	4a20      	ldr	r2, [pc, #128]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	6313      	str	r3, [r2, #48]	; 0x30
 80078be:	4b1e      	ldr	r3, [pc, #120]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80078ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078d0:	2312      	movs	r3, #18
 80078d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078d4:	2301      	movs	r3, #1
 80078d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d8:	2300      	movs	r3, #0
 80078da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80078dc:	2304      	movs	r3, #4
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	4619      	mov	r1, r3
 80078e6:	4815      	ldr	r0, [pc, #84]	; (800793c <HAL_I2C_MspInit+0xcc>)
 80078e8:	f004 fa7a 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80078ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078f2:	2312      	movs	r3, #18
 80078f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fa:	2300      	movs	r3, #0
 80078fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80078fe:	2304      	movs	r3, #4
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8007902:	f107 0314 	add.w	r3, r7, #20
 8007906:	4619      	mov	r1, r3
 8007908:	480d      	ldr	r0, [pc, #52]	; (8007940 <HAL_I2C_MspInit+0xd0>)
 800790a:	f004 fa69 	bl	800bde0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	4b09      	ldr	r3, [pc, #36]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	4a08      	ldr	r2, [pc, #32]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 8007918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800791c:	6413      	str	r3, [r2, #64]	; 0x40
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <HAL_I2C_MspInit+0xc8>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800792a:	bf00      	nop
 800792c:	3728      	adds	r7, #40	; 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40005c00 	.word	0x40005c00
 8007938:	40023800 	.word	0x40023800
 800793c:	40020800 	.word	0x40020800
 8007940:	40020000 	.word	0x40020000

08007944 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0b      	ldr	r2, [pc, #44]	; (8007980 <HAL_I2C_MspDeInit+0x3c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d10f      	bne.n	8007976 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <HAL_I2C_MspDeInit+0x40>)
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <HAL_I2C_MspDeInit+0x40>)
 800795c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007960:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8007962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007966:	4808      	ldr	r0, [pc, #32]	; (8007988 <HAL_I2C_MspDeInit+0x44>)
 8007968:	f004 fbe6 	bl	800c138 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 800796c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007970:	4806      	ldr	r0, [pc, #24]	; (800798c <HAL_I2C_MspDeInit+0x48>)
 8007972:	f004 fbe1 	bl	800c138 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40005c00 	.word	0x40005c00
 8007984:	40023800 	.word	0x40023800
 8007988:	40020800 	.word	0x40020800
 800798c:	40020000 	.word	0x40020000

08007990 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007996:	1d3b      	adds	r3, r7, #4
 8007998:	2234      	movs	r2, #52	; 0x34
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f009 ffd5 	bl	801194c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80079a2:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079a4:	4a39      	ldr	r2, [pc, #228]	; (8007a8c <MX_LTDC_Init+0xfc>)
 80079a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80079a8:	4b37      	ldr	r3, [pc, #220]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80079ae:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80079b4:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80079ba:	4b33      	ldr	r3, [pc, #204]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079bc:	2200      	movs	r2, #0
 80079be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80079c0:	4b31      	ldr	r3, [pc, #196]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079c2:	2209      	movs	r2, #9
 80079c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80079cc:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079ce:	221d      	movs	r2, #29
 80079d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80079d2:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079d4:	2203      	movs	r2, #3
 80079d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80079d8:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079da:	f240 120d 	movw	r2, #269	; 0x10d
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80079e0:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079e2:	f240 1243 	movw	r2, #323	; 0x143
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80079e8:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079ea:	f240 1217 	movw	r2, #279	; 0x117
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079f2:	f240 1247 	movw	r2, #327	; 0x147
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80079f8:	4b23      	ldr	r3, [pc, #140]	; (8007a88 <MX_LTDC_Init+0xf8>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007a00:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <MX_LTDC_Init+0xf8>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007a08:	4b1f      	ldr	r3, [pc, #124]	; (8007a88 <MX_LTDC_Init+0xf8>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007a10:	481d      	ldr	r0, [pc, #116]	; (8007a88 <MX_LTDC_Init+0xf8>)
 8007a12:	f005 fd47 	bl	800d4a4 <HAL_LTDC_Init>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8007a1c:	f000 fd70 	bl	8008500 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8007a24:	23f0      	movs	r3, #240	; 0xf0
 8007a26:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8007a2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007a30:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007a32:	2302      	movs	r3, #2
 8007a34:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8007a36:	23ff      	movs	r3, #255	; 0xff
 8007a38:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007a42:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007a44:	2307      	movs	r3, #7
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007a48:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007a4e:	23f0      	movs	r3, #240	; 0xf0
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8007a52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4805      	ldr	r0, [pc, #20]	; (8007a88 <MX_LTDC_Init+0xf8>)
 8007a72:	f005 fde7 	bl	800d644 <HAL_LTDC_ConfigLayer>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007a7c:	f000 fd40 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8007a80:	bf00      	nop
 8007a82:	3738      	adds	r7, #56	; 0x38
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20019a90 	.word	0x20019a90
 8007a8c:	40016800 	.word	0x40016800

08007a90 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b09a      	sub	sp, #104	; 0x68
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aac:	2230      	movs	r2, #48	; 0x30
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f009 ff4b 	bl	801194c <memset>
  if(ltdcHandle->Instance==LTDC)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a81      	ldr	r2, [pc, #516]	; (8007cc0 <HAL_LTDC_MspInit+0x230>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	f040 80fa 	bne.w	8007cb6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8007ac6:	2364      	movs	r3, #100	; 0x64
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8007aca:	2305      	movs	r3, #5
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f006 fcfc 	bl	800e4d4 <HAL_RCCEx_PeriphCLKConfig>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8007ae2:	f000 fd0d 	bl	8008500 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	623b      	str	r3, [r7, #32]
 8007aea:	4b76      	ldr	r3, [pc, #472]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aee:	4a75      	ldr	r2, [pc, #468]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007af4:	6453      	str	r3, [r2, #68]	; 0x44
 8007af6:	4b73      	ldr	r3, [pc, #460]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	4b6f      	ldr	r3, [pc, #444]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	4a6e      	ldr	r2, [pc, #440]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	6313      	str	r3, [r2, #48]	; 0x30
 8007b12:	4b6c      	ldr	r3, [pc, #432]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	4b68      	ldr	r3, [pc, #416]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	4a67      	ldr	r2, [pc, #412]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b2e:	4b65      	ldr	r3, [pc, #404]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	4b61      	ldr	r3, [pc, #388]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	4a60      	ldr	r2, [pc, #384]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	6313      	str	r3, [r2, #48]	; 0x30
 8007b4a:	4b5e      	ldr	r3, [pc, #376]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	4b5a      	ldr	r3, [pc, #360]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	4a59      	ldr	r2, [pc, #356]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b64:	6313      	str	r3, [r2, #48]	; 0x30
 8007b66:	4b57      	ldr	r3, [pc, #348]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	4b53      	ldr	r3, [pc, #332]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	4a52      	ldr	r2, [pc, #328]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b7c:	f043 0304 	orr.w	r3, r3, #4
 8007b80:	6313      	str	r3, [r2, #48]	; 0x30
 8007b82:	4b50      	ldr	r3, [pc, #320]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	4b4c      	ldr	r3, [pc, #304]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	4a4b      	ldr	r2, [pc, #300]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007b98:	f043 0308 	orr.w	r3, r3, #8
 8007b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b9e:	4b49      	ldr	r3, [pc, #292]	; (8007cc4 <HAL_LTDC_MspInit+0x234>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f003 0308 	and.w	r3, r3, #8
 8007ba6:	60bb      	str	r3, [r7, #8]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8007baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007bbc:	230e      	movs	r3, #14
 8007bbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4840      	ldr	r0, [pc, #256]	; (8007cc8 <HAL_LTDC_MspInit+0x238>)
 8007bc8:	f004 f90a 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8007bcc:	f641 0358 	movw	r3, #6232	; 0x1858
 8007bd0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007bde:	230e      	movs	r3, #14
 8007be0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007be6:	4619      	mov	r1, r3
 8007be8:	4838      	ldr	r0, [pc, #224]	; (8007ccc <HAL_LTDC_MspInit+0x23c>)
 8007bea:	f004 f8f9 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007bfe:	2309      	movs	r3, #9
 8007c00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c06:	4619      	mov	r1, r3
 8007c08:	4831      	ldr	r0, [pc, #196]	; (8007cd0 <HAL_LTDC_MspInit+0x240>)
 8007c0a:	f004 f8e9 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8007c0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007c12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c14:	2302      	movs	r3, #2
 8007c16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007c20:	230e      	movs	r3, #14
 8007c22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4829      	ldr	r0, [pc, #164]	; (8007cd0 <HAL_LTDC_MspInit+0x240>)
 8007c2c:	f004 f8d8 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8007c30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007c34:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	2302      	movs	r3, #2
 8007c38:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007c42:	230e      	movs	r3, #14
 8007c44:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4821      	ldr	r0, [pc, #132]	; (8007cd4 <HAL_LTDC_MspInit+0x244>)
 8007c4e:	f004 f8c7 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8007c52:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007c56:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c60:	2300      	movs	r3, #0
 8007c62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007c64:	230e      	movs	r3, #14
 8007c66:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	481a      	ldr	r0, [pc, #104]	; (8007cd8 <HAL_LTDC_MspInit+0x248>)
 8007c70:	f004 f8b6 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8007c74:	2348      	movs	r3, #72	; 0x48
 8007c76:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c80:	2300      	movs	r3, #0
 8007c82:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007c84:	230e      	movs	r3, #14
 8007c86:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4813      	ldr	r0, [pc, #76]	; (8007cdc <HAL_LTDC_MspInit+0x24c>)
 8007c90:	f004 f8a6 	bl	800bde0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007c94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c98:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007ca6:	2309      	movs	r3, #9
 8007ca8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007caa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4808      	ldr	r0, [pc, #32]	; (8007cd4 <HAL_LTDC_MspInit+0x244>)
 8007cb2:	f004 f895 	bl	800bde0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3768      	adds	r7, #104	; 0x68
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40016800 	.word	0x40016800
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	40021400 	.word	0x40021400
 8007ccc:	40020000 	.word	0x40020000
 8007cd0:	40020400 	.word	0x40020400
 8007cd4:	40021800 	.word	0x40021800
 8007cd8:	40020800 	.word	0x40020800
 8007cdc:	40020c00 	.word	0x40020c00

08007ce0 <main>:
typedef struct prediction_probability pred_probType;

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred);

int main(void)
{
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	f6ad 4d94 	subw	sp, sp, #3220	; 0xc94
 8007ce6:	af00      	add	r7, sp, #0

  HAL_Init();
 8007ce8:	f003 facc 	bl	800b284 <HAL_Init>

  SystemClock_Config();
 8007cec:	f000 fb8c 	bl	8008408 <SystemClock_Config>

  freq = HAL_RCC_GetHCLKFreq();
 8007cf0:	f006 fb8a 	bl	800e408 <HAL_RCC_GetHCLKFreq>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	4bd0      	ldr	r3, [pc, #832]	; (800803c <main+0x35c>)
 8007cfa:	601a      	str	r2, [r3, #0]

  MX_GPIO_Init();
 8007cfc:	f7ff fc4a 	bl	8007594 <MX_GPIO_Init>
  MX_CRC_Init();
 8007d00:	f7ff fad2 	bl	80072a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8007d04:	f7ff fb06 	bl	8007314 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007d08:	f7ff fb58 	bl	80073bc <MX_FMC_Init>
  MX_I2C3_Init();
 8007d0c:	f7ff fd70 	bl	80077f0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8007d10:	f7ff fe3e 	bl	8007990 <MX_LTDC_Init>
  MX_SPI5_Init();
 8007d14:	f000 fd92 	bl	800883c <MX_SPI5_Init>
  MX_TIM1_Init();
 8007d18:	f000 ffb0 	bl	8008c7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d1c:	f001 f820 	bl	8008d60 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8007d20:	f7ff faaa 	bl	8007278 <MX_X_CUBE_AI_Init>

  BSP_PB_Init(BUTTON_KEY,0);
 8007d24:	2100      	movs	r1, #0
 8007d26:	2000      	movs	r0, #0
 8007d28:	f001 fcb2 	bl	8009690 <BSP_PB_Init>
  touch_sensor_init();
 8007d2c:	f000 fad8 	bl	80082e0 <touch_sensor_init>

  user_interface_init();
 8007d30:	f000 faea 	bl	8008308 <user_interface_init>
  user_interface_reset();
 8007d34:	f000 fb1a 	bl	800836c <user_interface_reset>

  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
  ai_float nn_output_data[NUM_CLASSES];

  pred_probType _1st_pred, _2nd_pred;
  _1st_pred.prob = _2nd_pred.prob =0.0;
 8007d38:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d3c:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d4a:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007d54:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8007d58:	601a      	str	r2, [r3, #0]
  //char _2nd_pred_str[10];

  while (1)
  {

	  BSP_TS_GetState(&ui_state);
 8007d5a:	48b9      	ldr	r0, [pc, #740]	; (8008040 <main+0x360>)
 8007d5c:	f003 f9ce 	bl	800b0fc <BSP_TS_GetState>

	  if(ui_state.TouchDetected) {
 8007d60:	4bb7      	ldr	r3, [pc, #732]	; (8008040 <main+0x360>)
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8190 	beq.w	800808a <main+0x3aa>

		  if((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2) && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2))
 8007d6a:	4bb5      	ldr	r3, [pc, #724]	; (8008040 <main+0x360>)
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	2b0a      	cmp	r3, #10
 8007d70:	f240 816e 	bls.w	8008050 <main+0x370>
 8007d74:	4bb2      	ldr	r3, [pc, #712]	; (8008040 <main+0x360>)
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	2be5      	cmp	r3, #229	; 0xe5
 8007d7a:	f200 8169 	bhi.w	8008050 <main+0x370>
 8007d7e:	4bb0      	ldr	r3, [pc, #704]	; (8008040 <main+0x360>)
 8007d80:	889b      	ldrh	r3, [r3, #4]
 8007d82:	2b0a      	cmp	r3, #10
 8007d84:	f240 8164 	bls.w	8008050 <main+0x370>
 8007d88:	4bad      	ldr	r3, [pc, #692]	; (8008040 <main+0x360>)
 8007d8a:	889b      	ldrh	r3, [r3, #4]
 8007d8c:	2be5      	cmp	r3, #229	; 0xe5
 8007d8e:	f200 815f 	bhi.w	8008050 <main+0x370>
		  {
			  BSP_LCD_FillCircle(ui_state.X, ui_state.Y, 5);
 8007d92:	4bab      	ldr	r3, [pc, #684]	; (8008040 <main+0x360>)
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	4aaa      	ldr	r2, [pc, #680]	; (8008040 <main+0x360>)
 8007d98:	8891      	ldrh	r1, [r2, #4]
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f002 fd0b 	bl	800a7b8 <BSP_LCD_FillCircle>
			  int x = ui_state.Y*((float)28/240);
 8007da2:	4ba7      	ldr	r3, [pc, #668]	; (8008040 <main+0x360>)
 8007da4:	889b      	ldrh	r3, [r3, #4]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dae:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8008044 <main+0x364>
 8007db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dba:	ee17 3a90 	vmov	r3, s15
 8007dbe:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
			  int y = ui_state.X*((float)28/240);
 8007dc2:	4b9f      	ldr	r3, [pc, #636]	; (8008040 <main+0x360>)
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dce:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8008044 <main+0x364>
 8007dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dda:	ee17 3a90 	vmov	r3, s15
 8007dde:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

			  BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1, 255);
 8007de2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	33c9      	adds	r3, #201	; 0xc9
 8007dea:	b298      	uxth	r0, r3
 8007dec:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	33fb      	adds	r3, #251	; 0xfb
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f002 fe63 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1, 255);
 8007dfe:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	33c7      	adds	r3, #199	; 0xc7
 8007e06:	b298      	uxth	r0, r3
 8007e08:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	33f9      	adds	r3, #249	; 0xf9
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	22ff      	movs	r2, #255	; 0xff
 8007e14:	4619      	mov	r1, r3
 8007e16:	f002 fe55 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x, 255);
 8007e1a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	33c9      	adds	r3, #201	; 0xc9
 8007e22:	b298      	uxth	r0, r3
 8007e24:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	33fa      	adds	r3, #250	; 0xfa
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	22ff      	movs	r2, #255	; 0xff
 8007e30:	4619      	mov	r1, r3
 8007e32:	f002 fe47 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x, 255);
 8007e36:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	33c7      	adds	r3, #199	; 0xc7
 8007e3e:	b298      	uxth	r0, r3
 8007e40:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	33fa      	adds	r3, #250	; 0xfa
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	f002 fe39 	bl	800aac4 <BSP_LCD_DrawPixel>

			  BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x, 255);
 8007e52:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	33c8      	adds	r3, #200	; 0xc8
 8007e5a:	b298      	uxth	r0, r3
 8007e5c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	33fa      	adds	r3, #250	; 0xfa
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	22ff      	movs	r2, #255	; 0xff
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f002 fe2b 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1, 255);
 8007e6e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	33c8      	adds	r3, #200	; 0xc8
 8007e76:	b298      	uxth	r0, r3
 8007e78:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	33fb      	adds	r3, #251	; 0xfb
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	22ff      	movs	r2, #255	; 0xff
 8007e84:	4619      	mov	r1, r3
 8007e86:	f002 fe1d 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1, 255);
 8007e8a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	33c8      	adds	r3, #200	; 0xc8
 8007e92:	b298      	uxth	r0, r3
 8007e94:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	33f9      	adds	r3, #249	; 0xf9
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	22ff      	movs	r2, #255	; 0xff
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f002 fe0f 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1, 255);
 8007ea6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	33c9      	adds	r3, #201	; 0xc9
 8007eae:	b298      	uxth	r0, r3
 8007eb0:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	33f9      	adds	r3, #249	; 0xf9
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	22ff      	movs	r2, #255	; 0xff
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f002 fe01 	bl	800aac4 <BSP_LCD_DrawPixel>
			  BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1, 255);
 8007ec2:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	33c7      	adds	r3, #199	; 0xc7
 8007eca:	b298      	uxth	r0, r3
 8007ecc:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	33fb      	adds	r3, #251	; 0xfb
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	22ff      	movs	r2, #255	; 0xff
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f002 fdf3 	bl	800aac4 <BSP_LCD_DrawPixel>

			nn_input_data[x+1][y+1] = PXL_SET;
 8007ede:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ee8:	1c58      	adds	r0, r3, #1
 8007eea:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007eee:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4403      	add	r3, r0
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	4a51      	ldr	r2, [pc, #324]	; (8008048 <main+0x368>)
 8007f02:	601a      	str	r2, [r3, #0]
			nn_input_data[x-1][y-1] = PXL_SET;
 8007f04:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007f08:	1e5a      	subs	r2, r3, #1
 8007f0a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007f0e:	1e58      	subs	r0, r3, #1
 8007f10:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f14:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4403      	add	r3, r0
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	4a48      	ldr	r2, [pc, #288]	; (8008048 <main+0x368>)
 8007f28:	601a      	str	r2, [r3, #0]
			nn_input_data[x+1][y]   = PXL_SET;
 8007f2a:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f34:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	440b      	add	r3, r1
 8007f4a:	4a3f      	ldr	r2, [pc, #252]	; (8008048 <main+0x368>)
 8007f4c:	601a      	str	r2, [r3, #0]
			nn_input_data[x-1][y]   = PXL_SET;
 8007f4e:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007f52:	1e5a      	subs	r2, r3, #1
 8007f54:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f58:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	4a36      	ldr	r2, [pc, #216]	; (8008048 <main+0x368>)
 8007f70:	601a      	str	r2, [r3, #0]
			nn_input_data[x][y+1]   = PXL_SET;
 8007f72:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007f76:	1c58      	adds	r0, r3, #1
 8007f78:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007f7c:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007f80:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4403      	add	r3, r0
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	4a2d      	ldr	r2, [pc, #180]	; (8008048 <main+0x368>)
 8007f94:	601a      	str	r2, [r3, #0]
			nn_input_data[x][y-1]   = PXL_SET;
 8007f96:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007f9a:	1e58      	subs	r0, r3, #1
 8007f9c:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fa0:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007fa4:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4403      	add	r3, r0
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	4a24      	ldr	r2, [pc, #144]	; (8008048 <main+0x368>)
 8007fb8:	601a      	str	r2, [r3, #0]
			nn_input_data[x+1][y-1] = PXL_SET;
 8007fba:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007fc4:	1e58      	subs	r0, r3, #1
 8007fc6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007fca:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007fce:	4613      	mov	r3, r2
 8007fd0:	00db      	lsls	r3, r3, #3
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4403      	add	r3, r0
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	4a1a      	ldr	r2, [pc, #104]	; (8008048 <main+0x368>)
 8007fde:	601a      	str	r2, [r3, #0]
			nn_input_data[x-1][y+1] = PXL_SET;
 8007fe0:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007fe4:	1e5a      	subs	r2, r3, #1
 8007fe6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007fea:	1c58      	adds	r0, r3, #1
 8007fec:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007ff0:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4403      	add	r3, r0
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	4a11      	ldr	r2, [pc, #68]	; (8008048 <main+0x368>)
 8008004:	601a      	str	r2, [r3, #0]
			nn_input_data[x][y]     = PXL_SET;
 8008006:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800800a:	f6a3 414c 	subw	r1, r3, #3148	; 0xc4c
 800800e:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8008012:	4613      	mov	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	4a08      	ldr	r2, [pc, #32]	; (8008048 <main+0x368>)
 8008026:	601a      	str	r2, [r3, #0]

		printf("X =%d Y=%d\r\n", ui_state.X,ui_state.Y);
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <main+0x360>)
 800802a:	885b      	ldrh	r3, [r3, #2]
 800802c:	4619      	mov	r1, r3
 800802e:	4b04      	ldr	r3, [pc, #16]	; (8008040 <main+0x360>)
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	461a      	mov	r2, r3
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <main+0x36c>)
 8008036:	f009 fb13 	bl	8011660 <iprintf>
		  {
 800803a:	e026      	b.n	800808a <main+0x3aa>
 800803c:	20019b38 	.word	0x20019b38
 8008040:	20019b3c 	.word	0x20019b3c
 8008044:	3deeeeef 	.word	0x3deeeeef
 8008048:	3f7d70a4 	.word	0x3f7d70a4
 800804c:	08017ef4 	.word	0x08017ef4
		  }
		  else if((ui_state.X > ERASE_BUTTON_X1 && ui_state.X < ERASE_BUTTON_X2) && (ui_state.Y > ERASE_BUTTON_Y1 && ui_state.Y < ERASE_BUTTON_Y2))
 8008050:	4b79      	ldr	r3, [pc, #484]	; (8008238 <main+0x558>)
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	2b05      	cmp	r3, #5
 8008056:	d918      	bls.n	800808a <main+0x3aa>
 8008058:	4b77      	ldr	r3, [pc, #476]	; (8008238 <main+0x558>)
 800805a:	885b      	ldrh	r3, [r3, #2]
 800805c:	2bea      	cmp	r3, #234	; 0xea
 800805e:	d814      	bhi.n	800808a <main+0x3aa>
 8008060:	4b75      	ldr	r3, [pc, #468]	; (8008238 <main+0x558>)
 8008062:	889b      	ldrh	r3, [r3, #4]
 8008064:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8008068:	d30f      	bcc.n	800808a <main+0x3aa>
 800806a:	4b73      	ldr	r3, [pc, #460]	; (8008238 <main+0x558>)
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8008072:	d80a      	bhi.n	800808a <main+0x3aa>
		  {
			  user_interface_reset();
 8008074:	f000 f97a 	bl	800836c <user_interface_reset>
			  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 8008078:	f107 020c 	add.w	r2, r7, #12
 800807c:	f107 0114 	add.w	r1, r7, #20
 8008080:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f8e3 	bl	8008250 <mnist_game_reset>
		  }
	  }
	 HAL_Delay(1);
 800808a:	2001      	movs	r0, #1
 800808c:	f003 f93c 	bl	800b308 <HAL_Delay>

	 	 if(BSP_PB_GetState(BUTTON_KEY)){
 8008090:	2000      	movs	r0, #0
 8008092:	f001 fb53 	bl	800973c <BSP_PB_GetState>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f43f ae5e 	beq.w	8007d5a <main+0x7a>


	       MX_X_CUBE_AI_Process(nn_input_data,nn_output_data);
 800809e:	f107 021c 	add.w	r2, r7, #28
 80080a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff f8ef 	bl	800728c <MX_X_CUBE_AI_Process>

	       for(int i =0;i<NUM_CLASSES;i++){
 80080ae:	2300      	movs	r3, #0
 80080b0:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 80080b4:	e06f      	b.n	8008196 <main+0x4b6>

	     	  if(_1st_pred.prob  < nn_output_data[i]){
 80080b6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80080ba:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80080be:	ed93 7a00 	vldr	s14, [r3]
 80080c2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80080c6:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 80080ca:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	edd3 7a00 	vldr	s15, [r3]
 80080d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	d52a      	bpl.n	8008136 <main+0x456>
	     		  _2nd_pred.label = _1st_pred.label;
 80080e0:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80080e4:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80080e8:	791a      	ldrb	r2, [r3, #4]
 80080ea:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80080ee:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 80080f2:	711a      	strb	r2, [r3, #4]
	     		  _2nd_pred.prob  = _1st_pred.prob;
 80080f4:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80080f8:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008102:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 8008106:	601a      	str	r2, [r3, #0]
	     		  _1st_pred.prob  = nn_output_data[i];
 8008108:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800810c:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8008110:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800811e:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8008122:	601a      	str	r2, [r3, #0]
	     		  _1st_pred.label =i;
 8008124:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008128:	b2da      	uxtb	r2, r3
 800812a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800812e:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 8008132:	711a      	strb	r2, [r3, #4]
 8008134:	e02a      	b.n	800818c <main+0x4ac>

	          }
	     	  else if(_2nd_pred.prob < nn_output_data[i]){
 8008136:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800813a:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 800813e:	ed93 7a00 	vldr	s14, [r3]
 8008142:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008146:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 800814a:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	edd3 7a00 	vldr	s15, [r3]
 8008156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	d515      	bpl.n	800818c <main+0x4ac>
	     		  _2nd_pred.label = i;
 8008160:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008164:	b2da      	uxtb	r2, r3
 8008166:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800816a:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 800816e:	711a      	strb	r2, [r3, #4]
	     		  _2nd_pred.prob =  nn_output_data[i];
 8008170:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008174:	f6a3 4274 	subw	r2, r3, #3188	; 0xc74
 8008178:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008186:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 800818a:	601a      	str	r2, [r3, #0]
	       for(int i =0;i<NUM_CLASSES;i++){
 800818c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008190:	3301      	adds	r3, #1
 8008192:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8008196:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800819a:	2b09      	cmp	r3, #9
 800819c:	dd8b      	ble.n	80080b6 <main+0x3d6>
	     	  }
	       }

	 	  printf("  AI First Guess %d  %f \n\r",_1st_pred.label,_1st_pred.prob);
 800819e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80081a2:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80081a6:	791b      	ldrb	r3, [r3, #4]
 80081a8:	461c      	mov	r4, r3
 80081aa:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80081ae:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fa3d 	bl	8006634 <__aeabi_f2d>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4621      	mov	r1, r4
 80081c0:	481e      	ldr	r0, [pc, #120]	; (800823c <main+0x55c>)
 80081c2:	f009 fa4d 	bl	8011660 <iprintf>
	 	  printf("  AI Second Guess %d  %f \n\r",_2nd_pred.label,_2nd_pred.prob);
 80081c6:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80081ca:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	461c      	mov	r4, r3
 80081d2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80081d6:	f6a3 4384 	subw	r3, r3, #3204	; 0xc84
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fa29 	bl	8006634 <__aeabi_f2d>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4621      	mov	r1, r4
 80081e8:	4815      	ldr	r0, [pc, #84]	; (8008240 <main+0x560>)
 80081ea:	f009 fa39 	bl	8011660 <iprintf>

	 	  sprintf(_1st_pred_str,"%d",_1st_pred.label);
 80081ee:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80081f2:	f6a3 437c 	subw	r3, r3, #3196	; 0xc7c
 80081f6:	791b      	ldrb	r3, [r3, #4]
 80081f8:	461a      	mov	r2, r3
 80081fa:	463b      	mov	r3, r7
 80081fc:	4911      	ldr	r1, [pc, #68]	; (8008244 <main+0x564>)
 80081fe:	4618      	mov	r0, r3
 8008200:	f009 fa9c 	bl	801173c <siprintf>

	 	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008204:	4810      	ldr	r0, [pc, #64]	; (8008248 <main+0x568>)
 8008206:	f001 ff6b 	bl	800a0e0 <BSP_LCD_SetTextColor>
	 	  BSP_LCD_SetFont(&Font20);
 800820a:	4810      	ldr	r0, [pc, #64]	; (800824c <main+0x56c>)
 800820c:	f001 ff9a 	bl	800a144 <BSP_LCD_SetFont>
	 	  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8008210:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008214:	f001 ff7c 	bl	800a110 <BSP_LCD_SetBackColor>
	 	  BSP_LCD_DisplayStringAt(130,255,(uint8_t *)_1st_pred_str,LEFT_MODE);
 8008218:	463a      	mov	r2, r7
 800821a:	2303      	movs	r3, #3
 800821c:	21ff      	movs	r1, #255	; 0xff
 800821e:	2082      	movs	r0, #130	; 0x82
 8008220:	f002 f816 	bl	800a250 <BSP_LCD_DisplayStringAt>


	 	  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 8008224:	f107 020c 	add.w	r2, r7, #12
 8008228:	f107 0114 	add.w	r1, r7, #20
 800822c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f80d 	bl	8008250 <mnist_game_reset>
	  BSP_TS_GetState(&ui_state);
 8008236:	e590      	b.n	8007d5a <main+0x7a>
 8008238:	20019b3c 	.word	0x20019b3c
 800823c:	08017f04 	.word	0x08017f04
 8008240:	08017f20 	.word	0x08017f20
 8008244:	08017f3c 	.word	0x08017f3c
 8008248:	ffff0000 	.word	0xffff0000
 800824c:	200008a8 	.word	0x200008a8

08008250 <mnist_game_reset>:

  }

}

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred){
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]

	memset(in_data,0.0,sizeof(in_data[0][0])*NN_INPUT_IMAGE_WIDTH *NN_INPUT_IMAGE_HEIGHT);
 800825c:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 8008260:	2100      	movs	r1, #0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f009 fb72 	bl	801194c <memset>
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob  =0.0;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2200      	movs	r2, #0
 8008274:	711a      	strb	r2, [r3, #4]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	edc3 7a00 	vstr	s15, [r3]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	edd3 7a00 	vldr	s15, [r3]
 800828e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008292:	edc7 7a00 	vstr	s15, [r7]
 8008296:	783b      	ldrb	r3, [r7, #0]
 8008298:	b2da      	uxtb	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	711a      	strb	r2, [r3, #4]
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <_write>:


int _write(int fd, const void *buff, int c){
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

	 HAL_StatusTypeDef st;

	 st =  HAL_UART_Transmit(&huart1,(uint8_t *)buff,c,HAL_MAX_DELAY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	4807      	ldr	r0, [pc, #28]	; (80082dc <_write+0x34>)
 80082c0:	f007 fe07 	bl	800fed2 <HAL_UART_Transmit>
 80082c4:	4603      	mov	r3, r0
 80082c6:	75fb      	strb	r3, [r7, #23]
	 return (st == HAL_OK ? c :0);
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <_write+0x2a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	e000      	b.n	80082d4 <_write+0x2c>
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20019cdc 	.word	0x20019cdc

080082e0 <touch_sensor_init>:

void touch_sensor_init(){
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
if(BSP_TS_Init(240,320) == TS_ERROR){
 80082e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082e8:	20f0      	movs	r0, #240	; 0xf0
 80082ea:	f002 fecd 	bl	800b088 <BSP_TS_Init>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d102      	bne.n	80082fa <touch_sensor_init+0x1a>
	printf("Touch sensor failure\r\n");
 80082f4:	4803      	ldr	r0, [pc, #12]	; (8008304 <touch_sensor_init+0x24>)
 80082f6:	f009 fa19 	bl	801172c <puts>
 }
  HAL_Delay(100);
 80082fa:	2064      	movs	r0, #100	; 0x64
 80082fc:	f003 f804 	bl	800b308 <HAL_Delay>
}
 8008300:	bf00      	nop
 8008302:	bd80      	pop	{r7, pc}
 8008304:	08017f40 	.word	0x08017f40

08008308 <user_interface_init>:

void user_interface_init(void){
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 800830c:	f001 fda0 	bl	8009e50 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER_LAYER1);
 8008310:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008314:	2001      	movs	r0, #1
 8008316:	f001 fe1d 	bl	8009f54 <BSP_LCD_LayerDefaultInit>

  BSP_LCD_SelectLayer(1);
 800831a:	2001      	movs	r0, #1
 800831c:	f001 fe7e 	bl	800a01c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8008320:	480f      	ldr	r0, [pc, #60]	; (8008360 <user_interface_init+0x58>)
 8008322:	f001 ff29 	bl	800a178 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1,LCD_COLOR_DARKCYAN);
 8008326:	490f      	ldr	r1, [pc, #60]	; (8008364 <user_interface_init+0x5c>)
 8008328:	2001      	movs	r0, #1
 800832a:	f001 fec5 	bl	800a0b8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1,DISABLE);
 800832e:	2100      	movs	r1, #0
 8008330:	2001      	movs	r0, #1
 8008332:	f001 fe83 	bl	800a03c <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0,LCD_FRAME_BUFFER_LAYER0);
 8008336:	490c      	ldr	r1, [pc, #48]	; (8008368 <user_interface_init+0x60>)
 8008338:	2000      	movs	r0, #0
 800833a:	f001 fe0b 	bl	8009f54 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800833e:	2000      	movs	r0, #0
 8008340:	f001 fe6c 	bl	800a01c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8008344:	f002 fad8 	bl	800a8f8 <BSP_LCD_DisplayOn>
  HAL_Delay(150);
 8008348:	2096      	movs	r0, #150	; 0x96
 800834a:	f002 ffdd 	bl	800b308 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 800834e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008352:	f001 ff11 	bl	800a178 <BSP_LCD_Clear>
  HAL_Delay(100);
 8008356:	2064      	movs	r0, #100	; 0x64
 8008358:	f002 ffd6 	bl	800b308 <HAL_Delay>

}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	ffff0000 	.word	0xffff0000
 8008364:	ff008080 	.word	0xff008080
 8008368:	d0130000 	.word	0xd0130000

0800836c <user_interface_reset>:

void user_interface_reset(){
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8008370:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008374:	f001 ff00 	bl	800a178 <BSP_LCD_Clear>
  //NOTE COLOR CHANGED FROM DARKYELLOW TO BLACK
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008378:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800837c:	f001 feb0 	bl	800a0e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 8008380:	481d      	ldr	r0, [pc, #116]	; (80083f8 <user_interface_reset+0x8c>)
 8008382:	f001 fedf 	bl	800a144 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8008386:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800838a:	f001 fec1 	bl	800a110 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(5,255,(uint8_t*) "AI  Guess:", LEFT_MODE);
 800838e:	2303      	movs	r3, #3
 8008390:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <user_interface_reset+0x90>)
 8008392:	21ff      	movs	r1, #255	; 0xff
 8008394:	2005      	movs	r0, #5
 8008396:	f001 ff5b 	bl	800a250 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(200,250,28,28);
 800839a:	231c      	movs	r3, #28
 800839c:	221c      	movs	r2, #28
 800839e:	21fa      	movs	r1, #250	; 0xfa
 80083a0:	20c8      	movs	r0, #200	; 0xc8
 80083a2:	f002 f893 	bl	800a4cc <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80083a6:	4816      	ldr	r0, [pc, #88]	; (8008400 <user_interface_reset+0x94>)
 80083a8:	f001 fe9a 	bl	800a0e0 <BSP_LCD_SetTextColor>

  BSP_LCD_FillRect(5,285,230,30);
 80083ac:	231e      	movs	r3, #30
 80083ae:	22e6      	movs	r2, #230	; 0xe6
 80083b0:	f240 111d 	movw	r1, #285	; 0x11d
 80083b4:	2005      	movs	r0, #5
 80083b6:	f002 f9a5 	bl	800a704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	f001 fe8f 	bl	800a0e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 80083c2:	480d      	ldr	r0, [pc, #52]	; (80083f8 <user_interface_reset+0x8c>)
 80083c4:	f001 febe 	bl	800a144 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80083c8:	480d      	ldr	r0, [pc, #52]	; (8008400 <user_interface_reset+0x94>)
 80083ca:	f001 fea1 	bl	800a110 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(330,291,(uint8_t*) "ERASE", LEFT_MODE);
 80083ce:	2303      	movs	r3, #3
 80083d0:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <user_interface_reset+0x98>)
 80083d2:	f240 1123 	movw	r1, #291	; 0x123
 80083d6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80083da:	f001 ff39 	bl	800a250 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(2,2,237,237);
 80083de:	23ed      	movs	r3, #237	; 0xed
 80083e0:	22ed      	movs	r2, #237	; 0xed
 80083e2:	2102      	movs	r1, #2
 80083e4:	2002      	movs	r0, #2
 80083e6:	f002 f871 	bl	800a4cc <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80083ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80083ee:	f001 fe77 	bl	800a0e0 <BSP_LCD_SetTextColor>
}
 80083f2:	bf00      	nop
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200008b0 	.word	0x200008b0
 80083fc:	08017f58 	.word	0x08017f58
 8008400:	ff0000ff 	.word	0xff0000ff
 8008404:	08017f64 	.word	0x08017f64

08008408 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b094      	sub	sp, #80	; 0x50
 800840c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800840e:	f107 0320 	add.w	r3, r7, #32
 8008412:	2230      	movs	r2, #48	; 0x30
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f009 fa98 	bl	801194c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	609a      	str	r2, [r3, #8]
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800842c:	2300      	movs	r3, #0
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <SystemClock_Config+0xcc>)
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	4a27      	ldr	r2, [pc, #156]	; (80084d4 <SystemClock_Config+0xcc>)
 8008436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843a:	6413      	str	r3, [r2, #64]	; 0x40
 800843c:	4b25      	ldr	r3, [pc, #148]	; (80084d4 <SystemClock_Config+0xcc>)
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008448:	2300      	movs	r3, #0
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <SystemClock_Config+0xd0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <SystemClock_Config+0xd0>)
 8008452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <SystemClock_Config+0xd0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008460:	607b      	str	r3, [r7, #4]
 8008462:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008464:	2301      	movs	r3, #1
 8008466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800846e:	2302      	movs	r3, #2
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008478:	2308      	movs	r3, #8
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800847c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008482:	2302      	movs	r3, #2
 8008484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008486:	2307      	movs	r3, #7
 8008488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800848a:	f107 0320 	add.w	r3, r7, #32
 800848e:	4618      	mov	r0, r3
 8008490:	f005 fb56 	bl	800db40 <HAL_RCC_OscConfig>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800849a:	f000 f831 	bl	8008500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800849e:	230f      	movs	r3, #15
 80084a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084a2:	2302      	movs	r3, #2
 80084a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80084aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80084ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80084b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	2105      	movs	r1, #5
 80084bc:	4618      	mov	r0, r3
 80084be:	f005 fdb7 	bl	800e030 <HAL_RCC_ClockConfig>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80084c8:	f000 f81a 	bl	8008500 <Error_Handler>
  }
}
 80084cc:	bf00      	nop
 80084ce:	3750      	adds	r7, #80	; 0x50
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	40023800 	.word	0x40023800
 80084d8:	40007000 	.word	0x40007000

080084dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a04      	ldr	r2, [pc, #16]	; (80084fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d101      	bne.n	80084f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80084ee:	f002 feeb 	bl	800b2c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	40001000 	.word	0x40001000

08008500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008504:	b672      	cpsid	i
}
 8008506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008508:	e7fe      	b.n	8008508 <Error_Handler+0x8>
	...

0800850c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	3303      	adds	r3, #3
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_2_scratch0_array.data = AI_PTR(activations + 89856);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8008528:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800852c:	4a29      	ldr	r2, [pc, #164]	; (80085d4 <network_configure_activations+0xc8>)
 800852e:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 89856);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8008536:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800853a:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <network_configure_activations+0xc8>)
 800853c:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800853e:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <network_configure_activations+0xcc>)
 8008540:	2200      	movs	r2, #0
 8008542:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8008544:	4b24      	ldr	r3, [pc, #144]	; (80085d8 <network_configure_activations+0xcc>)
 8008546:	2200      	movs	r2, #0
 8008548:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 3328);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8008550:	4a22      	ldr	r2, [pc, #136]	; (80085dc <network_configure_activations+0xd0>)
 8008552:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 3328);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 800855a:	4a20      	ldr	r2, [pc, #128]	; (80085dc <network_configure_activations+0xd0>)
 800855c:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 800855e:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <network_configure_activations+0xd4>)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 8008564:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <network_configure_activations+0xd4>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 89344);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 8008570:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008574:	4a1b      	ldr	r2, [pc, #108]	; (80085e4 <network_configure_activations+0xd8>)
 8008576:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 89344);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 800857e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008582:	4a18      	ldr	r2, [pc, #96]	; (80085e4 <network_configure_activations+0xd8>)
 8008584:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 89344);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 800858c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008590:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <network_configure_activations+0xdc>)
 8008592:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 89344);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 800859a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800859e:	4a12      	ldr	r2, [pc, #72]	; (80085e8 <network_configure_activations+0xdc>)
 80085a0:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 89304);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80085a8:	33d8      	adds	r3, #216	; 0xd8
 80085aa:	4a10      	ldr	r2, [pc, #64]	; (80085ec <network_configure_activations+0xe0>)
 80085ac:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 89304);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80085b4:	33d8      	adds	r3, #216	; 0xd8
 80085b6:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <network_configure_activations+0xe0>)
 80085b8:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 80085ba:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <network_configure_activations+0xe4>)
 80085bc:	2200      	movs	r2, #0
 80085be:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <network_configure_activations+0xe4>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80085c6:	2301      	movs	r3, #1
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20000088 	.word	0x20000088
 80085d8:	20000118 	.word	0x20000118
 80085dc:	20000128 	.word	0x20000128
 80085e0:	20000138 	.word	0x20000138
 80085e4:	20000148 	.word	0x20000148
 80085e8:	20000158 	.word	0x20000158
 80085ec:	20000168 	.word	0x20000168
 80085f0:	20000178 	.word	0x20000178

080085f4 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008604:	4b47      	ldr	r3, [pc, #284]	; (8008724 <network_configure_weights+0x130>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800860c:	4a45      	ldr	r2, [pc, #276]	; (8008724 <network_configure_weights+0x130>)
 800860e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1261568);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 8008616:	4a43      	ldr	r2, [pc, #268]	; (8008724 <network_configure_weights+0x130>)
 8008618:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1261568);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 8008620:	4a40      	ldr	r2, [pc, #256]	; (8008724 <network_configure_weights+0x130>)
 8008622:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8008624:	4b40      	ldr	r3, [pc, #256]	; (8008728 <network_configure_weights+0x134>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	4a3e      	ldr	r2, [pc, #248]	; (8008728 <network_configure_weights+0x134>)
 800862e:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1256448);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008636:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800863a:	4a3b      	ldr	r2, [pc, #236]	; (8008728 <network_configure_weights+0x134>)
 800863c:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1256448);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008644:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008648:	4a37      	ldr	r2, [pc, #220]	; (8008728 <network_configure_weights+0x134>)
 800864a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800864c:	4b37      	ldr	r3, [pc, #220]	; (800872c <network_configure_weights+0x138>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008654:	4a35      	ldr	r2, [pc, #212]	; (800872c <network_configure_weights+0x138>)
 8008656:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1255936);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 800865e:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8008662:	4a32      	ldr	r2, [pc, #200]	; (800872c <network_configure_weights+0x138>)
 8008664:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1255936);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 800866c:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8008670:	4a2e      	ldr	r2, [pc, #184]	; (800872c <network_configure_weights+0x138>)
 8008672:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008674:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <network_configure_weights+0x13c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800867c:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <network_configure_weights+0x13c>)
 800867e:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 76288);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 3395 	add.w	r3, r3, #76288	; 0x12a00
 8008686:	4a2a      	ldr	r2, [pc, #168]	; (8008730 <network_configure_weights+0x13c>)
 8008688:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 75264);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 8008690:	4a27      	ldr	r2, [pc, #156]	; (8008730 <network_configure_weights+0x13c>)
 8008692:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8008694:	4b27      	ldr	r3, [pc, #156]	; (8008734 <network_configure_weights+0x140>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800869c:	4a25      	ldr	r2, [pc, #148]	; (8008734 <network_configure_weights+0x140>)
 800869e:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 75008);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80086a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80086aa:	4a22      	ldr	r2, [pc, #136]	; (8008734 <network_configure_weights+0x140>)
 80086ac:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 75008);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80086b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80086b8:	4a1e      	ldr	r2, [pc, #120]	; (8008734 <network_configure_weights+0x140>)
 80086ba:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80086bc:	4b1e      	ldr	r3, [pc, #120]	; (8008738 <network_configure_weights+0x144>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c4:	4a1c      	ldr	r2, [pc, #112]	; (8008738 <network_configure_weights+0x144>)
 80086c6:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 1280);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ce:	4a1a      	ldr	r2, [pc, #104]	; (8008738 <network_configure_weights+0x144>)
 80086d0:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 1280);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d8:	4a17      	ldr	r2, [pc, #92]	; (8008738 <network_configure_weights+0x144>)
 80086da:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80086dc:	4b17      	ldr	r3, [pc, #92]	; (800873c <network_configure_weights+0x148>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e4:	4a15      	ldr	r2, [pc, #84]	; (800873c <network_configure_weights+0x148>)
 80086e6:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 1152);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <network_configure_weights+0x148>)
 80086f0:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 1152);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80086f8:	4a10      	ldr	r2, [pc, #64]	; (800873c <network_configure_weights+0x148>)
 80086fa:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80086fc:	4b10      	ldr	r3, [pc, #64]	; (8008740 <network_configure_weights+0x14c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008704:	4a0e      	ldr	r2, [pc, #56]	; (8008740 <network_configure_weights+0x14c>)
 8008706:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 8008708:	4a0d      	ldr	r2, [pc, #52]	; (8008740 <network_configure_weights+0x14c>)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 800870e:	4a0c      	ldr	r2, [pc, #48]	; (8008740 <network_configure_weights+0x14c>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8008714:	2301      	movs	r3, #1
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000098 	.word	0x20000098
 8008728:	200000a8 	.word	0x200000a8
 800872c:	200000b8 	.word	0x200000b8
 8008730:	200000c8 	.word	0x200000c8
 8008734:	200000d8 	.word	0x200000d8
 8008738:	200000e8 	.word	0x200000e8
 800873c:	200000f8 	.word	0x200000f8
 8008740:	20000108 	.word	0x20000108

08008744 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7f7 fe4a 	bl	80003e6 <ai_platform_network_get_error>
 8008752:	4603      	mov	r3, r0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af02      	add	r7, sp, #8
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8008766:	2300      	movs	r3, #0
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	2303      	movs	r3, #3
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2301      	movs	r3, #1
 8008770:	4a04      	ldr	r2, [pc, #16]	; (8008784 <ai_network_create+0x28>)
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7f7 ff21 	bl	80005bc <ai_platform_network_create>
 800877a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000030 	.word	0x20000030

08008788 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7f7 ff58 	bl	8000646 <ai_platform_network_destroy>
 8008796:	4603      	mov	r3, r0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7f7 ff6d 	bl	800068c <ai_platform_network_init>
 80087b2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <ai_network_init+0x1e>
 80087ba:	2300      	movs	r3, #0
 80087bc:	e01f      	b.n	80087fe <ai_network_init+0x5e>

  ai_bool ok = true;
 80087be:	2301      	movs	r3, #1
 80087c0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	4619      	mov	r1, r3
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff ff14 	bl	80085f4 <network_configure_weights>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	3318      	adds	r3, #24
 80087e2:	4619      	mov	r1, r3
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff fe91 	bl	800850c <network_configure_activations>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf14      	ite	ne
 80087f6:	2301      	movne	r3, #1
 80087f8:	2300      	moveq	r3, #0
 80087fa:	72fb      	strb	r3, [r7, #11]

  return ok;
 80087fc:	7afb      	ldrb	r3, [r7, #11]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7f7 ff94 	bl	8000744 <ai_platform_network_process>
 800881c:	4603      	mov	r3, r0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
    0x96, 0xb4, 0x8d, 0xbd, 0x82, 0xc2, 0x18, 0xbe, 0xb8, 0x5b,
    0x4c, 0xbc, 0x6c, 0x24, 0xa1, 0xbd, 0x85, 0x58, 0x81,
    0x3c, 0x6f, 0xde, 0xdb, 0xbd, 0xd7, 0xd2, 0xb3, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <ai_network_data_weights_get+0x10>)

}
 800882e:	4618      	mov	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	0801803c 	.word	0x0801803c

0800883c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8008840:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008842:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <MX_SPI5_Init+0x68>)
 8008844:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800884c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800884e:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008850:	2200      	movs	r2, #0
 8008852:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008854:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008856:	2200      	movs	r2, #0
 8008858:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <MX_SPI5_Init+0x64>)
 800885c:	2200      	movs	r2, #0
 800885e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008862:	2200      	movs	r2, #0
 8008864:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800886c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800886e:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008870:	2200      	movs	r2, #0
 8008872:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008876:	2200      	movs	r2, #0
 8008878:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <MX_SPI5_Init+0x64>)
 800887c:	2200      	movs	r2, #0
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008882:	2200      	movs	r2, #0
 8008884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <MX_SPI5_Init+0x64>)
 8008888:	220a      	movs	r2, #10
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800888c:	4804      	ldr	r0, [pc, #16]	; (80088a0 <MX_SPI5_Init+0x64>)
 800888e:	f006 f872 	bl	800e976 <HAL_SPI_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008898:	f7ff fe32 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800889c:	bf00      	nop
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20019bf0 	.word	0x20019bf0
 80088a4:	40015000 	.word	0x40015000

080088a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <HAL_SPI_MspInit+0x84>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d12c      	bne.n	8008924 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d2:	4a17      	ldr	r2, [pc, #92]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088d8:	6453      	str	r3, [r2, #68]	; 0x44
 80088da:	4b15      	ldr	r3, [pc, #84]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	4b11      	ldr	r3, [pc, #68]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4a10      	ldr	r2, [pc, #64]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088f0:	f043 0320 	orr.w	r3, r3, #32
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <HAL_SPI_MspInit+0x88>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8008902:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008908:	2302      	movs	r3, #2
 800890a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008910:	2300      	movs	r3, #0
 8008912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008914:	2305      	movs	r3, #5
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	4619      	mov	r1, r3
 800891e:	4805      	ldr	r0, [pc, #20]	; (8008934 <HAL_SPI_MspInit+0x8c>)
 8008920:	f003 fa5e 	bl	800bde0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008924:	bf00      	nop
 8008926:	3728      	adds	r7, #40	; 0x28
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40015000 	.word	0x40015000
 8008930:	40023800 	.word	0x40023800
 8008934:	40021400 	.word	0x40021400

08008938 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <HAL_SPI_MspDeInit+0x30>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10a      	bne.n	8008960 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <HAL_SPI_MspDeInit+0x34>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	4a07      	ldr	r2, [pc, #28]	; (800896c <HAL_SPI_MspDeInit+0x34>)
 8008950:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008954:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8008956:	f44f 7160 	mov.w	r1, #896	; 0x380
 800895a:	4805      	ldr	r0, [pc, #20]	; (8008970 <HAL_SPI_MspDeInit+0x38>)
 800895c:	f003 fbec 	bl	800c138 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40015000 	.word	0x40015000
 800896c:	40023800 	.word	0x40023800
 8008970:	40021400 	.word	0x40021400

08008974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800897a:	2300      	movs	r3, #0
 800897c:	607b      	str	r3, [r7, #4]
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <HAL_MspInit+0x4c>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	4a0f      	ldr	r2, [pc, #60]	; (80089c0 <HAL_MspInit+0x4c>)
 8008984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008988:	6453      	str	r3, [r2, #68]	; 0x44
 800898a:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <HAL_MspInit+0x4c>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008996:	2300      	movs	r3, #0
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_MspInit+0x4c>)
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_MspInit+0x4c>)
 80089a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a4:	6413      	str	r3, [r2, #64]	; 0x40
 80089a6:	4b06      	ldr	r3, [pc, #24]	; (80089c0 <HAL_MspInit+0x4c>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800

080089c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08e      	sub	sp, #56	; 0x38
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80089d0:	2300      	movs	r3, #0
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	4b33      	ldr	r3, [pc, #204]	; (8008aa8 <HAL_InitTick+0xe4>)
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	4a32      	ldr	r2, [pc, #200]	; (8008aa8 <HAL_InitTick+0xe4>)
 80089de:	f043 0310 	orr.w	r3, r3, #16
 80089e2:	6413      	str	r3, [r2, #64]	; 0x40
 80089e4:	4b30      	ldr	r3, [pc, #192]	; (8008aa8 <HAL_InitTick+0xe4>)
 80089e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80089f0:	f107 0210 	add.w	r2, r7, #16
 80089f4:	f107 0314 	add.w	r3, r7, #20
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f005 fd38 	bl	800e470 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d103      	bne.n	8008a12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008a0a:	f005 fd09 	bl	800e420 <HAL_RCC_GetPCLK1Freq>
 8008a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8008a10:	e004      	b.n	8008a1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008a12:	f005 fd05 	bl	800e420 <HAL_RCC_GetPCLK1Freq>
 8008a16:	4603      	mov	r3, r0
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1e:	4a23      	ldr	r2, [pc, #140]	; (8008aac <HAL_InitTick+0xe8>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	0c9b      	lsrs	r3, r3, #18
 8008a26:	3b01      	subs	r3, #1
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008a2a:	4b21      	ldr	r3, [pc, #132]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a2c:	4a21      	ldr	r2, [pc, #132]	; (8008ab4 <HAL_InitTick+0xf0>)
 8008a2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008a30:	4b1f      	ldr	r3, [pc, #124]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008a38:	4a1d      	ldr	r2, [pc, #116]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008a3e:	4b1c      	ldr	r3, [pc, #112]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a4a:	4b19      	ldr	r3, [pc, #100]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008a50:	4817      	ldr	r0, [pc, #92]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a52:	f006 fd6f 	bl	800f534 <HAL_TIM_Base_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11b      	bne.n	8008a9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008a64:	4812      	ldr	r0, [pc, #72]	; (8008ab0 <HAL_InitTick+0xec>)
 8008a66:	f006 fdb5 	bl	800f5d4 <HAL_TIM_Base_Start_IT>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d111      	bne.n	8008a9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008a78:	2036      	movs	r0, #54	; 0x36
 8008a7a:	f002 fd3d 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b0f      	cmp	r3, #15
 8008a82:	d808      	bhi.n	8008a96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008a84:	2200      	movs	r2, #0
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	2036      	movs	r0, #54	; 0x36
 8008a8a:	f002 fd19 	bl	800b4c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <HAL_InitTick+0xf4>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	e002      	b.n	8008a9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3738      	adds	r7, #56	; 0x38
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40023800 	.word	0x40023800
 8008aac:	431bde83 	.word	0x431bde83
 8008ab0:	20019c48 	.word	0x20019c48
 8008ab4:	40001000 	.word	0x40001000
 8008ab8:	200008c0 	.word	0x200008c0

08008abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ac0:	e7fe      	b.n	8008ac0 <NMI_Handler+0x4>

08008ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ac6:	e7fe      	b.n	8008ac6 <HardFault_Handler+0x4>

08008ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008acc:	e7fe      	b.n	8008acc <MemManage_Handler+0x4>

08008ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ad2:	e7fe      	b.n	8008ad2 <BusFault_Handler+0x4>

08008ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ad8:	e7fe      	b.n	8008ad8 <UsageFault_Handler+0x4>

08008ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ada:	b480      	push	{r7}
 8008adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ade:	bf00      	nop
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008aec:	bf00      	nop
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008af6:	b480      	push	{r7}
 8008af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008afa:	bf00      	nop
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b08:	bf00      	nop
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008b18:	4802      	ldr	r0, [pc, #8]	; (8008b24 <TIM6_DAC_IRQHandler+0x10>)
 8008b1a:	f006 fdcb 	bl	800f6b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20019c48 	.word	0x20019c48

08008b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
  return 1;
 8008b2c:	2301      	movs	r3, #1
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <_kill>:

int _kill(int pid, int sig)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008b42:	f008 ff55 	bl	80119f0 <__errno>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2216      	movs	r2, #22
 8008b4a:	601a      	str	r2, [r3, #0]
  return -1;
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <_exit>:

void _exit (int status)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008b60:	f04f 31ff 	mov.w	r1, #4294967295
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ffe7 	bl	8008b38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008b6a:	e7fe      	b.n	8008b6a <_exit+0x12>

08008b6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e00a      	b.n	8008b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008b7e:	f3af 8000 	nop.w
 8008b82:	4601      	mov	r1, r0
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	60ba      	str	r2, [r7, #8]
 8008b8a:	b2ca      	uxtb	r2, r1
 8008b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dbf0      	blt.n	8008b7e <_read+0x12>
  }

  return len;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bce:	605a      	str	r2, [r3, #4]
  return 0;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <_isatty>:

int _isatty(int file)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008be6:	2301      	movs	r3, #1
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c18:	4a14      	ldr	r2, [pc, #80]	; (8008c6c <_sbrk+0x5c>)
 8008c1a:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <_sbrk+0x60>)
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c24:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <_sbrk+0x64>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <_sbrk+0x64>)
 8008c2e:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <_sbrk+0x68>)
 8008c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <_sbrk+0x64>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d207      	bcs.n	8008c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c40:	f008 fed6 	bl	80119f0 <__errno>
 8008c44:	4603      	mov	r3, r0
 8008c46:	220c      	movs	r2, #12
 8008c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4e:	e009      	b.n	8008c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c50:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <_sbrk+0x64>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <_sbrk+0x64>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	4a05      	ldr	r2, [pc, #20]	; (8008c74 <_sbrk+0x64>)
 8008c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20030000 	.word	0x20030000
 8008c70:	00004000 	.word	0x00004000
 8008c74:	20019c90 	.word	0x20019c90
 8008c78:	2001a130 	.word	0x2001a130

08008c7c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c82:	f107 0308 	add.w	r3, r7, #8
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	605a      	str	r2, [r3, #4]
 8008c8c:	609a      	str	r2, [r3, #8]
 8008c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c90:	463b      	mov	r3, r7
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	; (8008d18 <MX_TIM1_Init+0x9c>)
 8008c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008c9e:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ca4:	4b1b      	ldr	r3, [pc, #108]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008caa:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cb2:	4b18      	ldr	r3, [pc, #96]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008cb8:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008cc4:	4813      	ldr	r0, [pc, #76]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cc6:	f006 fc35 	bl	800f534 <HAL_TIM_Base_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8008cd0:	f7ff fc16 	bl	8008500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	480c      	ldr	r0, [pc, #48]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008ce2:	f006 fdef 	bl	800f8c4 <HAL_TIM_ConfigClockSource>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8008cec:	f7ff fc08 	bl	8008500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4805      	ldr	r0, [pc, #20]	; (8008d14 <MX_TIM1_Init+0x98>)
 8008cfe:	f007 f80b 	bl	800fd18 <HAL_TIMEx_MasterConfigSynchronization>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008d08:	f7ff fbfa 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008d0c:	bf00      	nop
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20019c94 	.word	0x20019c94
 8008d18:	40010000 	.word	0x40010000

08008d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <HAL_TIM_Base_MspInit+0x3c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d10d      	bne.n	8008d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <HAL_TIM_Base_MspInit+0x40>)
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <HAL_TIM_Base_MspInit+0x40>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <HAL_TIM_Base_MspInit+0x40>)
 8008d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40023800 	.word	0x40023800

08008d60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d66:	4a12      	ldr	r2, [pc, #72]	; (8008db0 <MX_USART1_UART_Init+0x50>)
 8008d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d72:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d84:	4b09      	ldr	r3, [pc, #36]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d86:	220c      	movs	r2, #12
 8008d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d8a:	4b08      	ldr	r3, [pc, #32]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d90:	4b06      	ldr	r3, [pc, #24]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <MX_USART1_UART_Init+0x4c>)
 8008d98:	f007 f84e 	bl	800fe38 <HAL_UART_Init>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008da2:	f7ff fbad 	bl	8008500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008da6:	bf00      	nop
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20019cdc 	.word	0x20019cdc
 8008db0:	40011000 	.word	0x40011000

08008db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dbc:	f107 0314 	add.w	r3, r7, #20
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <HAL_UART_MspInit+0x84>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d12c      	bne.n	8008e30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	4b18      	ldr	r3, [pc, #96]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	4a17      	ldr	r2, [pc, #92]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008de0:	f043 0310 	orr.w	r3, r3, #16
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	613b      	str	r3, [r7, #16]
 8008df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	4b11      	ldr	r3, [pc, #68]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	6313      	str	r3, [r2, #48]	; 0x30
 8008e02:	4b0e      	ldr	r3, [pc, #56]	; (8008e3c <HAL_UART_MspInit+0x88>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008e0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e14:	2302      	movs	r3, #2
 8008e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e20:	2307      	movs	r3, #7
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e24:	f107 0314 	add.w	r3, r7, #20
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <HAL_UART_MspInit+0x8c>)
 8008e2c:	f002 ffd8 	bl	800bde0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008e30:	bf00      	nop
 8008e32:	3728      	adds	r7, #40	; 0x28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	40020000 	.word	0x40020000

08008e44 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8008e48:	f000 feb4 	bl	8009bb4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8008e4c:	20ca      	movs	r0, #202	; 0xca
 8008e4e:	f000 f95d 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8008e52:	20c3      	movs	r0, #195	; 0xc3
 8008e54:	f000 f967 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8008e58:	2008      	movs	r0, #8
 8008e5a:	f000 f964 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8008e5e:	2050      	movs	r0, #80	; 0x50
 8008e60:	f000 f961 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8008e64:	20cf      	movs	r0, #207	; 0xcf
 8008e66:	f000 f951 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f000 f95b 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8008e70:	20c1      	movs	r0, #193	; 0xc1
 8008e72:	f000 f958 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8008e76:	2030      	movs	r0, #48	; 0x30
 8008e78:	f000 f955 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8008e7c:	20ed      	movs	r0, #237	; 0xed
 8008e7e:	f000 f945 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8008e82:	2064      	movs	r0, #100	; 0x64
 8008e84:	f000 f94f 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f000 f94c 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8008e8e:	2012      	movs	r0, #18
 8008e90:	f000 f949 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8008e94:	2081      	movs	r0, #129	; 0x81
 8008e96:	f000 f946 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8008e9a:	20e8      	movs	r0, #232	; 0xe8
 8008e9c:	f000 f936 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8008ea0:	2085      	movs	r0, #133	; 0x85
 8008ea2:	f000 f940 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f000 f93d 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008eac:	2078      	movs	r0, #120	; 0x78
 8008eae:	f000 f93a 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8008eb2:	20cb      	movs	r0, #203	; 0xcb
 8008eb4:	f000 f92a 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8008eb8:	2039      	movs	r0, #57	; 0x39
 8008eba:	f000 f934 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8008ebe:	202c      	movs	r0, #44	; 0x2c
 8008ec0:	f000 f931 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f000 f92e 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8008eca:	2034      	movs	r0, #52	; 0x34
 8008ecc:	f000 f92b 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8008ed0:	2002      	movs	r0, #2
 8008ed2:	f000 f928 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8008ed6:	20f7      	movs	r0, #247	; 0xf7
 8008ed8:	f000 f918 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8008edc:	2020      	movs	r0, #32
 8008ede:	f000 f922 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8008ee2:	20ea      	movs	r0, #234	; 0xea
 8008ee4:	f000 f912 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f000 f91c 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008eee:	2000      	movs	r0, #0
 8008ef0:	f000 f919 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8008ef4:	20b1      	movs	r0, #177	; 0xb1
 8008ef6:	f000 f909 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008efa:	2000      	movs	r0, #0
 8008efc:	f000 f913 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008f00:	201b      	movs	r0, #27
 8008f02:	f000 f910 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008f06:	20b6      	movs	r0, #182	; 0xb6
 8008f08:	f000 f900 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008f0c:	200a      	movs	r0, #10
 8008f0e:	f000 f90a 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8008f12:	20a2      	movs	r0, #162	; 0xa2
 8008f14:	f000 f907 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8008f18:	20c0      	movs	r0, #192	; 0xc0
 8008f1a:	f000 f8f7 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008f1e:	2010      	movs	r0, #16
 8008f20:	f000 f901 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8008f24:	20c1      	movs	r0, #193	; 0xc1
 8008f26:	f000 f8f1 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008f2a:	2010      	movs	r0, #16
 8008f2c:	f000 f8fb 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8008f30:	20c5      	movs	r0, #197	; 0xc5
 8008f32:	f000 f8eb 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8008f36:	2045      	movs	r0, #69	; 0x45
 8008f38:	f000 f8f5 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8008f3c:	2015      	movs	r0, #21
 8008f3e:	f000 f8f2 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8008f42:	20c7      	movs	r0, #199	; 0xc7
 8008f44:	f000 f8e2 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8008f48:	2090      	movs	r0, #144	; 0x90
 8008f4a:	f000 f8ec 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8008f4e:	2036      	movs	r0, #54	; 0x36
 8008f50:	f000 f8dc 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8008f54:	20c8      	movs	r0, #200	; 0xc8
 8008f56:	f000 f8e6 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8008f5a:	20f2      	movs	r0, #242	; 0xf2
 8008f5c:	f000 f8d6 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008f60:	2000      	movs	r0, #0
 8008f62:	f000 f8e0 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8008f66:	20b0      	movs	r0, #176	; 0xb0
 8008f68:	f000 f8d0 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8008f6c:	20c2      	movs	r0, #194	; 0xc2
 8008f6e:	f000 f8da 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008f72:	20b6      	movs	r0, #182	; 0xb6
 8008f74:	f000 f8ca 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008f78:	200a      	movs	r0, #10
 8008f7a:	f000 f8d4 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8008f7e:	20a7      	movs	r0, #167	; 0xa7
 8008f80:	f000 f8d1 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8008f84:	2027      	movs	r0, #39	; 0x27
 8008f86:	f000 f8ce 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008f8a:	2004      	movs	r0, #4
 8008f8c:	f000 f8cb 	bl	8009126 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8008f90:	202a      	movs	r0, #42	; 0x2a
 8008f92:	f000 f8bb 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008f96:	2000      	movs	r0, #0
 8008f98:	f000 f8c5 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f000 f8c2 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f000 f8bf 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8008fa8:	20ef      	movs	r0, #239	; 0xef
 8008faa:	f000 f8bc 	bl	8009126 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8008fae:	202b      	movs	r0, #43	; 0x2b
 8008fb0:	f000 f8ac 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f000 f8b6 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f000 f8b3 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	f000 f8b0 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8008fc6:	203f      	movs	r0, #63	; 0x3f
 8008fc8:	f000 f8ad 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8008fcc:	20f6      	movs	r0, #246	; 0xf6
 8008fce:	f000 f89d 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	f000 f8a7 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008fd8:	2000      	movs	r0, #0
 8008fda:	f000 f8a4 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8008fde:	2006      	movs	r0, #6
 8008fe0:	f000 f8a1 	bl	8009126 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8008fe4:	202c      	movs	r0, #44	; 0x2c
 8008fe6:	f000 f891 	bl	800910c <ili9341_WriteReg>
  LCD_Delay(200);
 8008fea:	20c8      	movs	r0, #200	; 0xc8
 8008fec:	f000 fed0 	bl	8009d90 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8008ff0:	2026      	movs	r0, #38	; 0x26
 8008ff2:	f000 f88b 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f000 f895 	bl	8009126 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8008ffc:	20e0      	movs	r0, #224	; 0xe0
 8008ffe:	f000 f885 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8009002:	200f      	movs	r0, #15
 8009004:	f000 f88f 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8009008:	2029      	movs	r0, #41	; 0x29
 800900a:	f000 f88c 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800900e:	2024      	movs	r0, #36	; 0x24
 8009010:	f000 f889 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8009014:	200c      	movs	r0, #12
 8009016:	f000 f886 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800901a:	200e      	movs	r0, #14
 800901c:	f000 f883 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8009020:	2009      	movs	r0, #9
 8009022:	f000 f880 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8009026:	204e      	movs	r0, #78	; 0x4e
 8009028:	f000 f87d 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800902c:	2078      	movs	r0, #120	; 0x78
 800902e:	f000 f87a 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8009032:	203c      	movs	r0, #60	; 0x3c
 8009034:	f000 f877 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8009038:	2009      	movs	r0, #9
 800903a:	f000 f874 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800903e:	2013      	movs	r0, #19
 8009040:	f000 f871 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8009044:	2005      	movs	r0, #5
 8009046:	f000 f86e 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800904a:	2017      	movs	r0, #23
 800904c:	f000 f86b 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8009050:	2011      	movs	r0, #17
 8009052:	f000 f868 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8009056:	2000      	movs	r0, #0
 8009058:	f000 f865 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800905c:	20e1      	movs	r0, #225	; 0xe1
 800905e:	f000 f855 	bl	800910c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8009062:	2000      	movs	r0, #0
 8009064:	f000 f85f 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8009068:	2016      	movs	r0, #22
 800906a:	f000 f85c 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800906e:	201b      	movs	r0, #27
 8009070:	f000 f859 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8009074:	2004      	movs	r0, #4
 8009076:	f000 f856 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800907a:	2011      	movs	r0, #17
 800907c:	f000 f853 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8009080:	2007      	movs	r0, #7
 8009082:	f000 f850 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8009086:	2031      	movs	r0, #49	; 0x31
 8009088:	f000 f84d 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800908c:	2033      	movs	r0, #51	; 0x33
 800908e:	f000 f84a 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8009092:	2042      	movs	r0, #66	; 0x42
 8009094:	f000 f847 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8009098:	2005      	movs	r0, #5
 800909a:	f000 f844 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800909e:	200c      	movs	r0, #12
 80090a0:	f000 f841 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80090a4:	200a      	movs	r0, #10
 80090a6:	f000 f83e 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80090aa:	2028      	movs	r0, #40	; 0x28
 80090ac:	f000 f83b 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80090b0:	202f      	movs	r0, #47	; 0x2f
 80090b2:	f000 f838 	bl	8009126 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80090b6:	200f      	movs	r0, #15
 80090b8:	f000 f835 	bl	8009126 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80090bc:	2011      	movs	r0, #17
 80090be:	f000 f825 	bl	800910c <ili9341_WriteReg>
  LCD_Delay(200);
 80090c2:	20c8      	movs	r0, #200	; 0xc8
 80090c4:	f000 fe64 	bl	8009d90 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80090c8:	2029      	movs	r0, #41	; 0x29
 80090ca:	f000 f81f 	bl	800910c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80090ce:	202c      	movs	r0, #44	; 0x2c
 80090d0:	f000 f81c 	bl	800910c <ili9341_WriteReg>
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80090dc:	f000 fd6a 	bl	8009bb4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80090e0:	2103      	movs	r1, #3
 80090e2:	20d3      	movs	r0, #211	; 0xd3
 80090e4:	f000 f82c 	bl	8009140 <ili9341_ReadData>
 80090e8:	4603      	mov	r3, r0
 80090ea:	b29b      	uxth	r3, r3
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80090f4:	2029      	movs	r0, #41	; 0x29
 80090f6:	f000 f809 	bl	800910c <ili9341_WriteReg>
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}

080090fe <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8009102:	2028      	movs	r0, #40	; 0x28
 8009104:	f000 f802 	bl	800910c <ili9341_WriteReg>
}
 8009108:	bf00      	nop
 800910a:	bd80      	pop	{r7, pc}

0800910c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fde5 	bl	8009ce8 <LCD_IO_WriteReg>
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	4603      	mov	r3, r0
 800912e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fdb6 	bl	8009ca4 <LCD_IO_WriteData>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	460a      	mov	r2, r1
 800914a:	80fb      	strh	r3, [r7, #6]
 800914c:	4613      	mov	r3, r2
 800914e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8009150:	797a      	ldrb	r2, [r7, #5]
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fde8 	bl	8009d2c <LCD_IO_ReadData>
 800915c:	4603      	mov	r3, r0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8009166:	b480      	push	{r7}
 8009168:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800916a:	23f0      	movs	r3, #240	; 0xf0
}
 800916c:	4618      	mov	r0, r3
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8009176:	b480      	push	{r7}
 8009178:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800917a:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fa59 	bl	800964c <stmpe811_GetInstance>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2bff      	cmp	r3, #255	; 0xff
 80091a2:	d112      	bne.n	80091ca <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80091a4:	2000      	movs	r0, #0
 80091a6:	f000 fa51 	bl	800964c <stmpe811_GetInstance>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d80a      	bhi.n	80091ca <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	88fa      	ldrh	r2, [r7, #6]
 80091b8:	b2d1      	uxtb	r1, r2
 80091ba:	4a06      	ldr	r2, [pc, #24]	; (80091d4 <stmpe811_Init+0x4c>)
 80091bc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80091be:	f000 fdf2 	bl	8009da6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f807 	bl	80091d8 <stmpe811_Reset>
    }
  }
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20019d20 	.word	0x20019d20

080091d8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2202      	movs	r2, #2
 80091e8:	2103      	movs	r1, #3
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fde7 	bl	8009dbe <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80091f0:	200a      	movs	r0, #10
 80091f2:	f000 fe21 	bl	8009e38 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80091f6:	88fb      	ldrh	r3, [r7, #6]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2200      	movs	r2, #0
 80091fc:	2103      	movs	r1, #3
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fddd 	bl	8009dbe <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8009204:	2002      	movs	r0, #2
 8009206:	f000 fe17 	bl	8009e38 <IOE_Delay>
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8009212:	b590      	push	{r4, r7, lr}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	4603      	mov	r3, r0
 800921a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800921c:	f000 fdc3 	bl	8009da6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fddc 	bl	8009de4 <IOE_Read>
 800922c:	4603      	mov	r3, r0
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fdd3 	bl	8009de4 <IOE_Read>
 800923e:	4603      	mov	r3, r0
 8009240:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8009242:	4323      	orrs	r3, r4
 8009244:	b21b      	sxth	r3, r3
 8009246:	b29b      	uxth	r3, r3
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800925e:	88fb      	ldrh	r3, [r7, #6]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2109      	movs	r1, #9
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fdbd 	bl	8009de4 <IOE_Read>
 800926a:	4603      	mov	r3, r0
 800926c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8009276:	88fb      	ldrh	r3, [r7, #6]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	7bfa      	ldrb	r2, [r7, #15]
 800927c:	2109      	movs	r1, #9
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fd9d 	bl	8009dbe <IOE_Write>
}
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2109      	movs	r1, #9
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fd9f 	bl	8009de4 <IOE_Read>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	f023 0301 	bic.w	r3, r3, #1
 80092b0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	7bfa      	ldrb	r2, [r7, #15]
 80092b8:	2109      	movs	r1, #9
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fd7f 	bl	8009dbe <IOE_Write>
    
}
 80092c0:	bf00      	nop
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	460a      	mov	r2, r1
 80092d2:	80fb      	strh	r3, [r7, #6]
 80092d4:	4613      	mov	r3, r2
 80092d6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80092dc:	88fb      	ldrh	r3, [r7, #6]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	210a      	movs	r1, #10
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fd7e 	bl	8009de4 <IOE_Read>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 80092ec:	7bfa      	ldrb	r2, [r7, #15]
 80092ee:	797b      	ldrb	r3, [r7, #5]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	7bfa      	ldrb	r2, [r7, #15]
 80092fa:	210a      	movs	r1, #10
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fd5e 	bl	8009dbe <IOE_Write>
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	4603      	mov	r3, r0
 8009312:	460a      	mov	r2, r1
 8009314:	80fb      	strh	r3, [r7, #6]
 8009316:	4613      	mov	r3, r2
 8009318:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800931e:	88fb      	ldrh	r3, [r7, #6]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	210a      	movs	r1, #10
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fd5d 	bl	8009de4 <IOE_Read>
 800932a:	4603      	mov	r3, r0
 800932c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800932e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009332:	43db      	mvns	r3, r3
 8009334:	b25a      	sxtb	r2, r3
 8009336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800933a:	4013      	ands	r3, r2
 800933c:	b25b      	sxtb	r3, r3
 800933e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	210a      	movs	r1, #10
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fd38 	bl	8009dbe <IOE_Write>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	4603      	mov	r3, r0
 800935e:	460a      	mov	r2, r1
 8009360:	80fb      	strh	r3, [r7, #6]
 8009362:	4613      	mov	r3, r2
 8009364:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	210b      	movs	r1, #11
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fd39 	bl	8009de4 <IOE_Read>
 8009372:	4603      	mov	r3, r0
 8009374:	461a      	mov	r2, r3
 8009376:	797b      	ldrb	r3, [r7, #5]
 8009378:	4013      	ands	r3, r2
 800937a:	b2db      	uxtb	r3, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	460a      	mov	r2, r1
 800938e:	80fb      	strh	r3, [r7, #6]
 8009390:	4613      	mov	r3, r2
 8009392:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	797a      	ldrb	r2, [r7, #5]
 800939a:	210b      	movs	r1, #11
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fd0e 	bl	8009dbe <IOE_Write>
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	4603      	mov	r3, r0
 80093b2:	6039      	str	r1, [r7, #0]
 80093b4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2117      	movs	r1, #23
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fd0f 	bl	8009de4 <IOE_Read>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	b25b      	sxtb	r3, r3
 80093ce:	43db      	mvns	r3, r3
 80093d0:	b25a      	sxtb	r2, r3
 80093d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d6:	4013      	ands	r3, r2
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	7bfa      	ldrb	r2, [r7, #15]
 80093e2:	2117      	movs	r1, #23
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fcea 	bl	8009dbe <IOE_Write>
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	4603      	mov	r3, r0
 80093fa:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2104      	movs	r1, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fcee 	bl	8009de4 <IOE_Read>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	f023 0304 	bic.w	r3, r3, #4
 8009412:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8009414:	88fb      	ldrh	r3, [r7, #6]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	7bfa      	ldrb	r2, [r7, #15]
 800941a:	2104      	movs	r1, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fcce 	bl	8009dbe <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	21f0      	movs	r1, #240	; 0xf0
 8009426:	4618      	mov	r0, r3
 8009428:	f7ff ffbf 	bl	80093aa <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	f023 0303 	bic.w	r3, r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	b2db      	uxtb	r3, r3
 8009438:	7bfa      	ldrb	r2, [r7, #15]
 800943a:	2104      	movs	r1, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fcbe 	bl	8009dbe <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2249      	movs	r2, #73	; 0x49
 8009448:	2120      	movs	r1, #32
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fcb7 	bl	8009dbe <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8009450:	2002      	movs	r0, #2
 8009452:	f000 fcf1 	bl	8009e38 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2201      	movs	r2, #1
 800945c:	2121      	movs	r1, #33	; 0x21
 800945e:	4618      	mov	r0, r3
 8009460:	f000 fcad 	bl	8009dbe <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	229a      	movs	r2, #154	; 0x9a
 800946a:	2141      	movs	r1, #65	; 0x41
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fca6 	bl	8009dbe <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2201      	movs	r2, #1
 8009478:	214a      	movs	r1, #74	; 0x4a
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc9f 	bl	8009dbe <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009480:	88fb      	ldrh	r3, [r7, #6]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2201      	movs	r2, #1
 8009486:	214b      	movs	r1, #75	; 0x4b
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fc98 	bl	8009dbe <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2200      	movs	r2, #0
 8009494:	214b      	movs	r1, #75	; 0x4b
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fc91 	bl	8009dbe <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2201      	movs	r2, #1
 80094a2:	2156      	movs	r1, #86	; 0x56
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fc8a 	bl	8009dbe <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2201      	movs	r2, #1
 80094b0:	2158      	movs	r1, #88	; 0x58
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fc83 	bl	8009dbe <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2201      	movs	r2, #1
 80094be:	2140      	movs	r1, #64	; 0x40
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fc7c 	bl	8009dbe <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	22ff      	movs	r2, #255	; 0xff
 80094cc:	210b      	movs	r1, #11
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fc75 	bl	8009dbe <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80094d4:	2002      	movs	r0, #2
 80094d6:	f000 fcaf 	bl	8009e38 <IOE_Delay>
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	4603      	mov	r3, r0
 80094ea:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80094f0:	88fb      	ldrh	r3, [r7, #6]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2140      	movs	r1, #64	; 0x40
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 fc74 	bl	8009de4 <IOE_Read>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009502:	2b80      	cmp	r3, #128	; 0x80
 8009504:	bf0c      	ite	eq
 8009506:	2301      	moveq	r3, #1
 8009508:	2300      	movne	r3, #0
 800950a:	b2db      	uxtb	r3, r3
 800950c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8009514:	88fb      	ldrh	r3, [r7, #6]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	214c      	movs	r1, #76	; 0x4c
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fc62 	bl	8009de4 <IOE_Read>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d010      	beq.n	8009548 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8009526:	2301      	movs	r3, #1
 8009528:	73fb      	strb	r3, [r7, #15]
 800952a:	e00d      	b.n	8009548 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2201      	movs	r2, #1
 8009532:	214b      	movs	r1, #75	; 0x4b
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fc42 	bl	8009dbe <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2200      	movs	r2, #0
 8009540:	214b      	movs	r1, #75	; 0x4b
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fc3b 	bl	8009dbe <IOE_Write>
  }
  
  return ret;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	4603      	mov	r3, r0
 800955a:	60b9      	str	r1, [r7, #8]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	b2d8      	uxtb	r0, r3
 8009564:	f107 0210 	add.w	r2, r7, #16
 8009568:	2304      	movs	r3, #4
 800956a:	21d7      	movs	r1, #215	; 0xd7
 800956c:	f000 fc4d 	bl	8009e0a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8009570:	7c3b      	ldrb	r3, [r7, #16]
 8009572:	061a      	lsls	r2, r3, #24
 8009574:	7c7b      	ldrb	r3, [r7, #17]
 8009576:	041b      	lsls	r3, r3, #16
 8009578:	431a      	orrs	r2, r3
 800957a:	7cbb      	ldrb	r3, [r7, #18]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	4313      	orrs	r3, r2
 8009580:	7cfa      	ldrb	r2, [r7, #19]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	0d1b      	lsrs	r3, r3, #20
 800958a:	b29a      	uxth	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	b29b      	uxth	r3, r3
 8009596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800959a:	b29a      	uxth	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2201      	movs	r2, #1
 80095a6:	214b      	movs	r1, #75	; 0x4b
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fc08 	bl	8009dbe <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80095ae:	89fb      	ldrh	r3, [r7, #14]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2200      	movs	r2, #0
 80095b4:	214b      	movs	r1, #75	; 0x4b
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fc01 	bl	8009dbe <IOE_Write>
}
 80095bc:	bf00      	nop
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80095ce:	f000 fbf0 	bl	8009db2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	211f      	movs	r1, #31
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fe76 	bl	80092c8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fe36 	bl	8009250 <stmpe811_EnableGlobalIT>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fe47 	bl	800928c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	211f      	movs	r1, #31
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fe81 	bl	800930a <stmpe811_DisableITSource>
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	211f      	movs	r1, #31
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fe99 	bl	8009356 <stmpe811_ReadGITStatus>
 8009624:	4603      	mov	r3, r0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	4603      	mov	r3, r0
 8009636:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	211f      	movs	r1, #31
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fea1 	bl	8009384 <stmpe811_ClearGlobalIT>
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
 800965e:	e00b      	b.n	8009678 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4a0a      	ldr	r2, [pc, #40]	; (800968c <stmpe811_GetInstance+0x40>)
 8009664:	5cd3      	ldrb	r3, [r2, r3]
 8009666:	b29b      	uxth	r3, r3
 8009668:	88fa      	ldrh	r2, [r7, #6]
 800966a:	429a      	cmp	r2, r3
 800966c:	d101      	bne.n	8009672 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	e006      	b.n	8009680 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	3301      	adds	r3, #1
 8009676:	73fb      	strb	r3, [r7, #15]
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d9f0      	bls.n	8009660 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800967e:	23ff      	movs	r3, #255	; 0xff
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20019d20 	.word	0x20019d20

08009690 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	460a      	mov	r2, r1
 800969a:	71fb      	strb	r3, [r7, #7]
 800969c:	4613      	mov	r3, r2
 800969e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10d      	bne.n	80096c2 <BSP_PB_Init+0x32>
 80096a6:	2300      	movs	r3, #0
 80096a8:	60bb      	str	r3, [r7, #8]
 80096aa:	4b22      	ldr	r3, [pc, #136]	; (8009734 <BSP_PB_Init+0xa4>)
 80096ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ae:	4a21      	ldr	r2, [pc, #132]	; (8009734 <BSP_PB_Init+0xa4>)
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	6313      	str	r3, [r2, #48]	; 0x30
 80096b6:	4b1f      	ldr	r3, [pc, #124]	; (8009734 <BSP_PB_Init+0xa4>)
 80096b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	60bb      	str	r3, [r7, #8]
 80096c0:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 80096c2:	79bb      	ldrb	r3, [r7, #6]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d111      	bne.n	80096ec <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80096c8:	2301      	movs	r3, #1
 80096ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096cc:	2300      	movs	r3, #0
 80096ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80096d0:	2302      	movs	r3, #2
 80096d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80096d4:	2302      	movs	r3, #2
 80096d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	4a17      	ldr	r2, [pc, #92]	; (8009738 <BSP_PB_Init+0xa8>)
 80096dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e0:	f107 020c 	add.w	r2, r7, #12
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f002 fb7a 	bl	800bde0 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 80096ec:	79bb      	ldrb	r3, [r7, #6]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d11c      	bne.n	800972c <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80096f2:	2301      	movs	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80096fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80096fe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	4a0d      	ldr	r2, [pc, #52]	; (8009738 <BSP_PB_Init+0xa8>)
 8009704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009708:	f107 020c 	add.w	r2, r7, #12
 800970c:	4611      	mov	r1, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f002 fb66 	bl	800bde0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009714:	2306      	movs	r3, #6
 8009716:	b25b      	sxtb	r3, r3
 8009718:	2200      	movs	r2, #0
 800971a:	210f      	movs	r1, #15
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fecf 	bl	800b4c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8009722:	2306      	movs	r3, #6
 8009724:	b25b      	sxtb	r3, r3
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fee6 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
  }
}
 800972c:	bf00      	nop
 800972e:	3720      	adds	r7, #32
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	40023800 	.word	0x40023800
 8009738:	20000894 	.word	0x20000894

0800973c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	4a06      	ldr	r2, [pc, #24]	; (8009764 <BSP_PB_GetState+0x28>)
 800974a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800974e:	2201      	movs	r2, #1
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f002 fdfc 	bl	800c350 <HAL_GPIO_ReadPin>
 8009758:	4603      	mov	r3, r0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000894 	.word	0x20000894

08009768 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	; 0x28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a33      	ldr	r2, [pc, #204]	; (8009844 <I2Cx_MspInit+0xdc>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d15f      	bne.n	800983a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800977a:	2300      	movs	r3, #0
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	4b32      	ldr	r3, [pc, #200]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	4a31      	ldr	r2, [pc, #196]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009784:	f043 0304 	orr.w	r3, r3, #4
 8009788:	6313      	str	r3, [r2, #48]	; 0x30
 800978a:	4b2f      	ldr	r3, [pc, #188]	; (8009848 <I2Cx_MspInit+0xe0>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	613b      	str	r3, [r7, #16]
 8009794:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	4b2b      	ldr	r3, [pc, #172]	; (8009848 <I2Cx_MspInit+0xe0>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979e:	4a2a      	ldr	r2, [pc, #168]	; (8009848 <I2Cx_MspInit+0xe0>)
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	6313      	str	r3, [r2, #48]	; 0x30
 80097a6:	4b28      	ldr	r3, [pc, #160]	; (8009848 <I2Cx_MspInit+0xe0>)
 80097a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80097b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80097b8:	2312      	movs	r3, #18
 80097ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80097bc:	2300      	movs	r3, #0
 80097be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80097c0:	2302      	movs	r3, #2
 80097c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80097c4:	2304      	movs	r3, #4
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	4619      	mov	r1, r3
 80097ce:	481f      	ldr	r0, [pc, #124]	; (800984c <I2Cx_MspInit+0xe4>)
 80097d0:	f002 fb06 	bl	800bde0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80097d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097d8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80097da:	f107 0314 	add.w	r3, r7, #20
 80097de:	4619      	mov	r1, r3
 80097e0:	481b      	ldr	r0, [pc, #108]	; (8009850 <I2Cx_MspInit+0xe8>)
 80097e2:	f002 fafd 	bl	800bde0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <I2Cx_MspInit+0xe0>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	4a16      	ldr	r2, [pc, #88]	; (8009848 <I2Cx_MspInit+0xe0>)
 80097f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097f4:	6413      	str	r3, [r2, #64]	; 0x40
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <I2Cx_MspInit+0xe0>)
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097fe:	60bb      	str	r3, [r7, #8]
 8009800:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	4a10      	ldr	r2, [pc, #64]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800980c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	4a0d      	ldr	r2, [pc, #52]	; (8009848 <I2Cx_MspInit+0xe0>)
 8009814:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009818:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800981a:	2200      	movs	r2, #0
 800981c:	210f      	movs	r1, #15
 800981e:	2048      	movs	r0, #72	; 0x48
 8009820:	f001 fe4e 	bl	800b4c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009824:	2048      	movs	r0, #72	; 0x48
 8009826:	f001 fe67 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800982a:	2200      	movs	r2, #0
 800982c:	210f      	movs	r1, #15
 800982e:	2049      	movs	r0, #73	; 0x49
 8009830:	f001 fe46 	bl	800b4c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8009834:	2049      	movs	r0, #73	; 0x49
 8009836:	f001 fe5f 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800983a:	bf00      	nop
 800983c:	3728      	adds	r7, #40	; 0x28
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	40005c00 	.word	0x40005c00
 8009848:	40023800 	.word	0x40023800
 800984c:	40020000 	.word	0x40020000
 8009850:	40020800 	.word	0x40020800

08009854 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8009858:	4814      	ldr	r0, [pc, #80]	; (80098ac <I2Cx_Init+0x58>)
 800985a:	f003 fa3f 	bl	800ccdc <HAL_I2C_GetState>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d121      	bne.n	80098a8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8009864:	4b11      	ldr	r3, [pc, #68]	; (80098ac <I2Cx_Init+0x58>)
 8009866:	4a12      	ldr	r2, [pc, #72]	; (80098b0 <I2Cx_Init+0x5c>)
 8009868:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800986a:	4b10      	ldr	r3, [pc, #64]	; (80098ac <I2Cx_Init+0x58>)
 800986c:	4a11      	ldr	r2, [pc, #68]	; (80098b4 <I2Cx_Init+0x60>)
 800986e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8009870:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <I2Cx_Init+0x58>)
 8009872:	2200      	movs	r2, #0
 8009874:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8009876:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <I2Cx_Init+0x58>)
 8009878:	2200      	movs	r2, #0
 800987a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <I2Cx_Init+0x58>)
 800987e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009882:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <I2Cx_Init+0x58>)
 8009886:	2200      	movs	r2, #0
 8009888:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800988a:	4b08      	ldr	r3, [pc, #32]	; (80098ac <I2Cx_Init+0x58>)
 800988c:	2200      	movs	r2, #0
 800988e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <I2Cx_Init+0x58>)
 8009892:	2200      	movs	r2, #0
 8009894:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <I2Cx_Init+0x58>)
 8009898:	2200      	movs	r2, #0
 800989a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800989c:	4803      	ldr	r0, [pc, #12]	; (80098ac <I2Cx_Init+0x58>)
 800989e:	f7ff ff63 	bl	8009768 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80098a2:	4802      	ldr	r0, [pc, #8]	; (80098ac <I2Cx_Init+0x58>)
 80098a4:	f002 fd86 	bl	800c3b4 <HAL_I2C_Init>
  }
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20019d24 	.word	0x20019d24
 80098b0:	40005c00 	.word	0x40005c00
 80098b4:	000186a0 	.word	0x000186a0

080098b8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80098be:	2300      	movs	r3, #0
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	4b13      	ldr	r3, [pc, #76]	; (8009910 <I2Cx_ITConfig+0x58>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	4a12      	ldr	r2, [pc, #72]	; (8009910 <I2Cx_ITConfig+0x58>)
 80098c8:	f043 0301 	orr.w	r3, r3, #1
 80098cc:	6313      	str	r3, [r2, #48]	; 0x30
 80098ce:	4b10      	ldr	r3, [pc, #64]	; (8009910 <I2Cx_ITConfig+0x58>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80098da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80098e0:	2301      	movs	r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80098e4:	2300      	movs	r3, #0
 80098e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80098e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80098ec:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80098ee:	1d3b      	adds	r3, r7, #4
 80098f0:	4619      	mov	r1, r3
 80098f2:	4808      	ldr	r0, [pc, #32]	; (8009914 <I2Cx_ITConfig+0x5c>)
 80098f4:	f002 fa74 	bl	800bde0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80098f8:	2200      	movs	r2, #0
 80098fa:	210f      	movs	r1, #15
 80098fc:	2028      	movs	r0, #40	; 0x28
 80098fe:	f001 fddf 	bl	800b4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8009902:	2028      	movs	r0, #40	; 0x28
 8009904:	f001 fdf8 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
}
 8009908:	bf00      	nop
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	40023800 	.word	0x40023800
 8009914:	40020000 	.word	0x40020000

08009918 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af04      	add	r7, sp, #16
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
 8009922:	460b      	mov	r3, r1
 8009924:	71bb      	strb	r3, [r7, #6]
 8009926:	4613      	mov	r3, r2
 8009928:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	b299      	uxth	r1, r3
 8009932:	79bb      	ldrb	r3, [r7, #6]
 8009934:	b29a      	uxth	r2, r3
 8009936:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <I2Cx_WriteData+0x4c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	9302      	str	r3, [sp, #8]
 800993c:	2301      	movs	r3, #1
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	1d7b      	adds	r3, r7, #5
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	2301      	movs	r3, #1
 8009946:	4808      	ldr	r0, [pc, #32]	; (8009968 <I2Cx_WriteData+0x50>)
 8009948:	f002 fea8 	bl	800c69c <HAL_I2C_Mem_Write>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009956:	f000 f863 	bl	8009a20 <I2Cx_Error>
  }        
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000898 	.word	0x20000898
 8009968:	20019d24 	.word	0x20019d24

0800996c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af04      	add	r7, sp, #16
 8009972:	4603      	mov	r3, r0
 8009974:	460a      	mov	r2, r1
 8009976:	71fb      	strb	r3, [r7, #7]
 8009978:	4613      	mov	r3, r2
 800997a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	b299      	uxth	r1, r3
 8009988:	79bb      	ldrb	r3, [r7, #6]
 800998a:	b29a      	uxth	r2, r3
 800998c:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <I2Cx_ReadData+0x50>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	9302      	str	r3, [sp, #8]
 8009992:	2301      	movs	r3, #1
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	f107 030e 	add.w	r3, r7, #14
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	2301      	movs	r3, #1
 800999e:	4808      	ldr	r0, [pc, #32]	; (80099c0 <I2Cx_ReadData+0x54>)
 80099a0:	f002 ff76 	bl	800c890 <HAL_I2C_Mem_Read>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80099ae:	f000 f837 	bl	8009a20 <I2Cx_Error>
  
  }
  return value;
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	20000898 	.word	0x20000898
 80099c0:	20019d24 	.word	0x20019d24

080099c4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	603a      	str	r2, [r7, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
 80099d2:	460b      	mov	r3, r1
 80099d4:	71bb      	strb	r3, [r7, #6]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	b299      	uxth	r1, r3
 80099e2:	79bb      	ldrb	r3, [r7, #6]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <I2Cx_ReadBuffer+0x54>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	9302      	str	r3, [sp, #8]
 80099ec:	88bb      	ldrh	r3, [r7, #4]
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	2301      	movs	r3, #1
 80099f6:	4809      	ldr	r0, [pc, #36]	; (8009a1c <I2Cx_ReadBuffer+0x58>)
 80099f8:	f002 ff4a 	bl	800c890 <HAL_I2C_Mem_Read>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	e002      	b.n	8009a10 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009a0a:	f000 f809 	bl	8009a20 <I2Cx_Error>

    return 1;
 8009a0e:	2301      	movs	r3, #1
  }
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000898 	.word	0x20000898
 8009a1c:	20019d24 	.word	0x20019d24

08009a20 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8009a24:	4803      	ldr	r0, [pc, #12]	; (8009a34 <I2Cx_Error+0x14>)
 8009a26:	f002 fe09 	bl	800c63c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8009a2a:	f7ff ff13 	bl	8009854 <I2Cx_Init>
}
 8009a2e:	bf00      	nop
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20019d24 	.word	0x20019d24

08009a38 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8009a3c:	4819      	ldr	r0, [pc, #100]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a3e:	f005 fc3a 	bl	800f2b6 <HAL_SPI_GetState>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d12b      	bne.n	8009aa0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8009a48:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a4a:	4a17      	ldr	r2, [pc, #92]	; (8009aa8 <SPIx_Init+0x70>)
 8009a4c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009a4e:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a50:	2218      	movs	r2, #24
 8009a52:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8009a54:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8009a60:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a6e:	2207      	movs	r2, #7
 8009a70:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a84:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8009a86:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009a92:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8009a94:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a96:	f000 f853 	bl	8009b40 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8009a9a:	4802      	ldr	r0, [pc, #8]	; (8009aa4 <SPIx_Init+0x6c>)
 8009a9c:	f004 ff6b 	bl	800e976 <HAL_SPI_Init>
  } 
}
 8009aa0:	bf00      	nop
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20019d78 	.word	0x20019d78
 8009aa8:	40015000 	.word	0x40015000

08009aac <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <SPIx_Read+0x38>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f107 0108 	add.w	r1, r7, #8
 8009ac6:	4808      	ldr	r0, [pc, #32]	; (8009ae8 <SPIx_Read+0x3c>)
 8009ac8:	f005 f942 	bl	800ed50 <HAL_SPI_Receive>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8009ad6:	f000 f827 	bl	8009b28 <SPIx_Error>
  }
  
  return readvalue;
 8009ada:	68bb      	ldr	r3, [r7, #8]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	2000089c 	.word	0x2000089c
 8009ae8:	20019d78 	.word	0x20019d78

08009aec <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8009afa:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <SPIx_Write+0x34>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	1db9      	adds	r1, r7, #6
 8009b00:	2201      	movs	r2, #1
 8009b02:	4808      	ldr	r0, [pc, #32]	; (8009b24 <SPIx_Write+0x38>)
 8009b04:	f004 ffe8 	bl	800ead8 <HAL_SPI_Transmit>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8009b12:	f000 f809 	bl	8009b28 <SPIx_Error>
  }
}
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	2000089c 	.word	0x2000089c
 8009b24:	20019d78 	.word	0x20019d78

08009b28 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8009b2c:	4803      	ldr	r0, [pc, #12]	; (8009b3c <SPIx_Error+0x14>)
 8009b2e:	f004 ffab 	bl	800ea88 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8009b32:	f7ff ff81 	bl	8009a38 <SPIx_Init>
}
 8009b36:	bf00      	nop
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20019d78 	.word	0x20019d78

08009b40 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	4b17      	ldr	r3, [pc, #92]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b50:	4a16      	ldr	r2, [pc, #88]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b56:	6453      	str	r3, [r2, #68]	; 0x44
 8009b58:	4b14      	ldr	r3, [pc, #80]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b60:	613b      	str	r3, [r7, #16]
 8009b62:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	4b10      	ldr	r3, [pc, #64]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	4a0f      	ldr	r2, [pc, #60]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b6e:	f043 0320 	orr.w	r3, r3, #32
 8009b72:	6313      	str	r3, [r2, #48]	; 0x30
 8009b74:	4b0d      	ldr	r3, [pc, #52]	; (8009bac <SPIx_MspInit+0x6c>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8009b80:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8009b86:	2302      	movs	r3, #2
 8009b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8009b92:	2305      	movs	r3, #5
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4804      	ldr	r0, [pc, #16]	; (8009bb0 <SPIx_MspInit+0x70>)
 8009b9e:	f002 f91f 	bl	800bde0 <HAL_GPIO_Init>
}
 8009ba2:	bf00      	nop
 8009ba4:	3728      	adds	r7, #40	; 0x28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	40023800 	.word	0x40023800
 8009bb0:	40021400 	.word	0x40021400

08009bb4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8009bba:	4b36      	ldr	r3, [pc, #216]	; (8009c94 <LCD_IO_Init+0xe0>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d164      	bne.n	8009c8c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8009bc2:	4b34      	ldr	r3, [pc, #208]	; (8009c94 <LCD_IO_Init+0xe0>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60bb      	str	r3, [r7, #8]
 8009bcc:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	4a31      	ldr	r2, [pc, #196]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009bd2:	f043 0308 	orr.w	r3, r3, #8
 8009bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8009bd8:	4b2f      	ldr	r3, [pc, #188]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	60bb      	str	r3, [r7, #8]
 8009be2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8009be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009bea:	2301      	movs	r3, #1
 8009bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8009bf6:	f107 030c 	add.w	r3, r7, #12
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4827      	ldr	r0, [pc, #156]	; (8009c9c <LCD_IO_Init+0xe8>)
 8009bfe:	f002 f8ef 	bl	800bde0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	4a23      	ldr	r2, [pc, #140]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c0c:	f043 0308 	orr.w	r3, r3, #8
 8009c10:	6313      	str	r3, [r2, #48]	; 0x30
 8009c12:	4b21      	ldr	r3, [pc, #132]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	f003 0308 	and.w	r3, r3, #8
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8009c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009c24:	2301      	movs	r3, #1
 8009c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8009c30:	f107 030c 	add.w	r3, r7, #12
 8009c34:	4619      	mov	r1, r3
 8009c36:	4819      	ldr	r0, [pc, #100]	; (8009c9c <LCD_IO_Init+0xe8>)
 8009c38:	f002 f8d2 	bl	800bde0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4b15      	ldr	r3, [pc, #84]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c46:	f043 0304 	orr.w	r3, r3, #4
 8009c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8009c4c:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <LCD_IO_Init+0xe4>)
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8009c58:	2304      	movs	r3, #4
 8009c5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009c64:	2302      	movs	r3, #2
 8009c66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8009c68:	f107 030c 	add.w	r3, r7, #12
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	480c      	ldr	r0, [pc, #48]	; (8009ca0 <LCD_IO_Init+0xec>)
 8009c70:	f002 f8b6 	bl	800bde0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8009c74:	2200      	movs	r2, #0
 8009c76:	2104      	movs	r1, #4
 8009c78:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <LCD_IO_Init+0xec>)
 8009c7a:	f002 fb81 	bl	800c380 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2104      	movs	r1, #4
 8009c82:	4807      	ldr	r0, [pc, #28]	; (8009ca0 <LCD_IO_Init+0xec>)
 8009c84:	f002 fb7c 	bl	800c380 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8009c88:	f7ff fed6 	bl	8009a38 <SPIx_Init>
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3720      	adds	r7, #32
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20019dd0 	.word	0x20019dd0
 8009c98:	40023800 	.word	0x40023800
 8009c9c:	40020c00 	.word	0x40020c00
 8009ca0:	40020800 	.word	0x40020800

08009ca4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cb4:	480a      	ldr	r0, [pc, #40]	; (8009ce0 <LCD_IO_WriteData+0x3c>)
 8009cb6:	f002 fb63 	bl	800c380 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	4809      	ldr	r0, [pc, #36]	; (8009ce4 <LCD_IO_WriteData+0x40>)
 8009cc0:	f002 fb5e 	bl	800c380 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7ff ff10 	bl	8009aec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009ccc:	2201      	movs	r2, #1
 8009cce:	2104      	movs	r1, #4
 8009cd0:	4804      	ldr	r0, [pc, #16]	; (8009ce4 <LCD_IO_WriteData+0x40>)
 8009cd2:	f002 fb55 	bl	800c380 <HAL_GPIO_WritePin>
}
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	40020c00 	.word	0x40020c00
 8009ce4:	40020800 	.word	0x40020800

08009ce8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cf8:	480a      	ldr	r0, [pc, #40]	; (8009d24 <LCD_IO_WriteReg+0x3c>)
 8009cfa:	f002 fb41 	bl	800c380 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2104      	movs	r1, #4
 8009d02:	4809      	ldr	r0, [pc, #36]	; (8009d28 <LCD_IO_WriteReg+0x40>)
 8009d04:	f002 fb3c 	bl	800c380 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff feed 	bl	8009aec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009d12:	2201      	movs	r2, #1
 8009d14:	2104      	movs	r1, #4
 8009d16:	4804      	ldr	r0, [pc, #16]	; (8009d28 <LCD_IO_WriteReg+0x40>)
 8009d18:	f002 fb32 	bl	800c380 <HAL_GPIO_WritePin>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40020c00 	.word	0x40020c00
 8009d28:	40020800 	.word	0x40020800

08009d2c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	460a      	mov	r2, r1
 8009d36:	80fb      	strh	r3, [r7, #6]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8009d40:	2200      	movs	r2, #0
 8009d42:	2104      	movs	r1, #4
 8009d44:	4810      	ldr	r0, [pc, #64]	; (8009d88 <LCD_IO_ReadData+0x5c>)
 8009d46:	f002 fb1b 	bl	800c380 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d50:	480e      	ldr	r0, [pc, #56]	; (8009d8c <LCD_IO_ReadData+0x60>)
 8009d52:	f002 fb15 	bl	800c380 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fec7 	bl	8009aec <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8009d5e:	797b      	ldrb	r3, [r7, #5]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fea3 	bl	8009aac <SPIx_Read>
 8009d66:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d6e:	4807      	ldr	r0, [pc, #28]	; (8009d8c <LCD_IO_ReadData+0x60>)
 8009d70:	f002 fb06 	bl	800c380 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009d74:	2201      	movs	r2, #1
 8009d76:	2104      	movs	r1, #4
 8009d78:	4803      	ldr	r0, [pc, #12]	; (8009d88 <LCD_IO_ReadData+0x5c>)
 8009d7a:	f002 fb01 	bl	800c380 <HAL_GPIO_WritePin>
  
  return readvalue;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40020800 	.word	0x40020800
 8009d8c:	40020c00 	.word	0x40020c00

08009d90 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 fab5 	bl	800b308 <HAL_Delay>
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8009daa:	f7ff fd53 	bl	8009854 <I2Cx_Init>
}
 8009dae:	bf00      	nop
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8009db6:	f7ff fd7f 	bl	80098b8 <I2Cx_ITConfig>
}
 8009dba:	bf00      	nop
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	71fb      	strb	r3, [r7, #7]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	71bb      	strb	r3, [r7, #6]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8009dd0:	797a      	ldrb	r2, [r7, #5]
 8009dd2:	79b9      	ldrb	r1, [r7, #6]
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff fd9e 	bl	8009918 <I2Cx_WriteData>
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	460a      	mov	r2, r1
 8009dee:	71fb      	strb	r3, [r7, #7]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8009df4:	79ba      	ldrb	r2, [r7, #6]
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fdb6 	bl	800996c <I2Cx_ReadData>
 8009e00:	4603      	mov	r3, r0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	603a      	str	r2, [r7, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	4603      	mov	r3, r0
 8009e16:	71fb      	strb	r3, [r7, #7]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	71bb      	strb	r3, [r7, #6]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8009e20:	88bb      	ldrh	r3, [r7, #4]
 8009e22:	79b9      	ldrb	r1, [r7, #6]
 8009e24:	79f8      	ldrb	r0, [r7, #7]
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	f7ff fdcc 	bl	80099c4 <I2Cx_ReadBuffer>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	b29b      	uxth	r3, r3
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 fa61 	bl	800b308 <HAL_Delay>
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8009e54:	4b2d      	ldr	r3, [pc, #180]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e56:	4a2e      	ldr	r2, [pc, #184]	; (8009f10 <BSP_LCD_Init+0xc0>)
 8009e58:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8009e5a:	4b2c      	ldr	r3, [pc, #176]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e5c:	2209      	movs	r2, #9
 8009e5e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8009e60:	4b2a      	ldr	r3, [pc, #168]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e62:	2201      	movs	r2, #1
 8009e64:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8009e66:	4b29      	ldr	r3, [pc, #164]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e68:	221d      	movs	r2, #29
 8009e6a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8009e6c:	4b27      	ldr	r3, [pc, #156]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e6e:	2203      	movs	r2, #3
 8009e70:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8009e72:	4b26      	ldr	r3, [pc, #152]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e74:	f240 120d 	movw	r2, #269	; 0x10d
 8009e78:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e7c:	f240 1243 	movw	r2, #323	; 0x143
 8009e80:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8009e82:	4b22      	ldr	r3, [pc, #136]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e84:	f240 1217 	movw	r2, #279	; 0x117
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8009e8a:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e8c:	f240 1247 	movw	r2, #327	; 0x147
 8009e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8009e92:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8009e9a:	4b1c      	ldr	r3, [pc, #112]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8009ea2:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <BSP_LCD_Init+0xc4>)
 8009eac:	2208      	movs	r2, #8
 8009eae:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009eb0:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <BSP_LCD_Init+0xc4>)
 8009eb2:	22c0      	movs	r2, #192	; 0xc0
 8009eb4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8009eb6:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <BSP_LCD_Init+0xc4>)
 8009eb8:	2204      	movs	r2, #4
 8009eba:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009ebc:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <BSP_LCD_Init+0xc4>)
 8009ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8009ec4:	4813      	ldr	r0, [pc, #76]	; (8009f14 <BSP_LCD_Init+0xc4>)
 8009ec6:	f004 fb05 	bl	800e4d4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009eca:	4b10      	ldr	r3, [pc, #64]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8009ee2:	f000 fd19 	bl	800a918 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8009ee6:	4809      	ldr	r0, [pc, #36]	; (8009f0c <BSP_LCD_Init+0xbc>)
 8009ee8:	f003 fadc 	bl	800d4a4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <BSP_LCD_Init+0xc8>)
 8009eee:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <BSP_LCD_Init+0xcc>)
 8009ef0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <BSP_LCD_Init+0xc8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8009efa:	f000 fefb 	bl	800acf4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009efe:	4808      	ldr	r0, [pc, #32]	; (8009f20 <BSP_LCD_Init+0xd0>)
 8009f00:	f000 f920 	bl	800a144 <BSP_LCD_SetFont>

  return LCD_OK;
 8009f04:	2300      	movs	r3, #0
}  
 8009f06:	4618      	mov	r0, r3
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20019dd4 	.word	0x20019dd4
 8009f10:	40016800 	.word	0x40016800
 8009f14:	20019ebc 	.word	0x20019ebc
 8009f18:	20019f08 	.word	0x20019f08
 8009f1c:	20000834 	.word	0x20000834
 8009f20:	200008a0 	.word	0x200008a0

08009f24 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <BSP_LCD_GetXSize+0x14>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2e:	4798      	blx	r3
 8009f30:	4603      	mov	r3, r0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20019f08 	.word	0x20019f08

08009f3c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8009f40:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <BSP_LCD_GetYSize+0x14>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	4798      	blx	r3
 8009f48:	4603      	mov	r3, r0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20019f08 	.word	0x20019f08

08009f54 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b090      	sub	sp, #64	; 0x40
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009f64:	f7ff ffde 	bl	8009f24 <BSP_LCD_GetXSize>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009f70:	f7ff ffe4 	bl	8009f3c <BSP_LCD_GetYSize>
 8009f74:	4603      	mov	r3, r0
 8009f76:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8009f80:	23ff      	movs	r3, #255	; 0xff
 8009f82:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009fa0:	2307      	movs	r3, #7
 8009fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8009fa4:	f7ff ffbe 	bl	8009f24 <BSP_LCD_GetXSize>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8009fac:	f7ff ffc6 	bl	8009f3c <BSP_LCD_GetYSize>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8009fb4:	88fa      	ldrh	r2, [r7, #6]
 8009fb6:	f107 030c 	add.w	r3, r7, #12
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4814      	ldr	r0, [pc, #80]	; (800a010 <BSP_LCD_LayerDefaultInit+0xbc>)
 8009fbe:	f003 fb41 	bl	800d644 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009fc2:	88fa      	ldrh	r2, [r7, #6]
 8009fc4:	4913      	ldr	r1, [pc, #76]	; (800a014 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	440b      	add	r3, r1
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	490e      	ldr	r1, [pc, #56]	; (800a014 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	3308      	adds	r3, #8
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <BSP_LCD_LayerDefaultInit+0xc4>)
 8009fea:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009fec:	88fa      	ldrh	r2, [r7, #6]
 8009fee:	4909      	ldr	r1, [pc, #36]	; (800a014 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009ffe:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800a000:	4803      	ldr	r0, [pc, #12]	; (800a010 <BSP_LCD_LayerDefaultInit+0xbc>)
 800a002:	f003 fbdb 	bl	800d7bc <HAL_LTDC_EnableDither>
}
 800a006:	bf00      	nop
 800a008:	3740      	adds	r7, #64	; 0x40
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20019dd4 	.word	0x20019dd4
 800a014:	20019ef0 	.word	0x20019ef0
 800a018:	200008a0 	.word	0x200008a0

0800a01c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800a024:	4a04      	ldr	r2, [pc, #16]	; (800a038 <BSP_LCD_SelectLayer+0x1c>)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6013      	str	r3, [r2, #0]
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20019eec 	.word	0x20019eec

0800a03c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d112      	bne.n	800a074 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	01db      	lsls	r3, r3, #7
 800a058:	4413      	add	r3, r2
 800a05a:	3384      	adds	r3, #132	; 0x84
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	4611      	mov	r1, r2
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	01d2      	lsls	r2, r2, #7
 800a068:	440a      	add	r2, r1
 800a06a:	3284      	adds	r2, #132	; 0x84
 800a06c:	f043 0301 	orr.w	r3, r3, #1
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e011      	b.n	800a098 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	01db      	lsls	r3, r3, #7
 800a07e:	4413      	add	r3, r2
 800a080:	3384      	adds	r3, #132	; 0x84
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a0b      	ldr	r2, [pc, #44]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	4611      	mov	r1, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	01d2      	lsls	r2, r2, #7
 800a08e:	440a      	add	r2, r1
 800a090:	3284      	adds	r2, #132	; 0x84
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <BSP_LCD_SetLayerVisible+0x78>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0201 	orr.w	r2, r2, #1
 800a0a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20019dd4 	.word	0x20019dd4

0800a0b8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	4805      	ldr	r0, [pc, #20]	; (800a0dc <BSP_LCD_SetColorKeying+0x24>)
 800a0c8:	f003 fafa 	bl	800d6c0 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4803      	ldr	r0, [pc, #12]	; (800a0dc <BSP_LCD_SetColorKeying+0x24>)
 800a0d0:	f003 fb3a 	bl	800d748 <HAL_LTDC_EnableColorKeying>
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20019dd4 	.word	0x20019dd4

0800a0e0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <BSP_LCD_SetTextColor+0x28>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	4907      	ldr	r1, [pc, #28]	; (800a10c <BSP_LCD_SetTextColor+0x2c>)
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	601a      	str	r2, [r3, #0]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	20019eec 	.word	0x20019eec
 800a10c:	20019ef0 	.word	0x20019ef0

0800a110 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <BSP_LCD_SetBackColor+0x2c>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4908      	ldr	r1, [pc, #32]	; (800a140 <BSP_LCD_SetBackColor+0x30>)
 800a11e:	4613      	mov	r3, r2
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	440b      	add	r3, r1
 800a128:	3304      	adds	r3, #4
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20019eec 	.word	0x20019eec
 800a140:	20019ef0 	.word	0x20019ef0

0800a144 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800a14c:	4b08      	ldr	r3, [pc, #32]	; (800a170 <BSP_LCD_SetFont+0x2c>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4908      	ldr	r1, [pc, #32]	; (800a174 <BSP_LCD_SetFont+0x30>)
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	440b      	add	r3, r1
 800a15c:	3308      	adds	r3, #8
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20019eec 	.word	0x20019eec
 800a174:	20019ef0 	.word	0x20019ef0

0800a178 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800a178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800a180:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <BSP_LCD_Clear+0x48>)
 800a182:	681c      	ldr	r4, [r3, #0]
 800a184:	4b0e      	ldr	r3, [pc, #56]	; (800a1c0 <BSP_LCD_Clear+0x48>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a0e      	ldr	r2, [pc, #56]	; (800a1c4 <BSP_LCD_Clear+0x4c>)
 800a18a:	2134      	movs	r1, #52	; 0x34
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	4413      	add	r3, r2
 800a192:	335c      	adds	r3, #92	; 0x5c
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	461e      	mov	r6, r3
 800a198:	f7ff fec4 	bl	8009f24 <BSP_LCD_GetXSize>
 800a19c:	4605      	mov	r5, r0
 800a19e:	f7ff fecd 	bl	8009f3c <BSP_LCD_GetYSize>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4631      	mov	r1, r6
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fd66 	bl	800ac84 <FillBuffer>
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c0:	20019eec 	.word	0x20019eec
 800a1c4:	20019dd4 	.word	0x20019dd4

0800a1c8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	80fb      	strh	r3, [r7, #6]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	80bb      	strh	r3, [r7, #4]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a1da:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <BSP_LCD_DisplayChar+0x80>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	491b      	ldr	r1, [pc, #108]	; (800a24c <BSP_LCD_DisplayChar+0x84>)
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6819      	ldr	r1, [r3, #0]
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <BSP_LCD_DisplayChar+0x80>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4c14      	ldr	r4, [pc, #80]	; (800a24c <BSP_LCD_DisplayChar+0x84>)
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4423      	add	r3, r4
 800a206:	3308      	adds	r3, #8
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a20c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a210:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <BSP_LCD_DisplayChar+0x80>)
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	4c0d      	ldr	r4, [pc, #52]	; (800a24c <BSP_LCD_DisplayChar+0x84>)
 800a216:	4613      	mov	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4423      	add	r3, r4
 800a220:	3308      	adds	r3, #8
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	889b      	ldrh	r3, [r3, #4]
 800a226:	3307      	adds	r3, #7
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da00      	bge.n	800a22e <BSP_LCD_DisplayChar+0x66>
 800a22c:	3307      	adds	r3, #7
 800a22e:	10db      	asrs	r3, r3, #3
 800a230:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a234:	18ca      	adds	r2, r1, r3
 800a236:	88b9      	ldrh	r1, [r7, #4]
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fc68 	bl	800ab10 <DrawChar>
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	bd90      	pop	{r4, r7, pc}
 800a248:	20019eec 	.word	0x20019eec
 800a24c:	20019ef0 	.word	0x20019ef0

0800a250 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	60ba      	str	r2, [r7, #8]
 800a258:	461a      	mov	r2, r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	81fb      	strh	r3, [r7, #14]
 800a25e:	460b      	mov	r3, r1
 800a260:	81bb      	strh	r3, [r7, #12]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a266:	2301      	movs	r3, #1
 800a268:	83fb      	strh	r3, [r7, #30]
 800a26a:	2300      	movs	r3, #0
 800a26c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800a26e:	2300      	movs	r3, #0
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800a27a:	e002      	b.n	800a282 <BSP_LCD_DisplayStringAt+0x32>
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	3301      	adds	r3, #1
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	617a      	str	r2, [r7, #20]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1f6      	bne.n	800a27c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800a28e:	f7ff fe49 	bl	8009f24 <BSP_LCD_GetXSize>
 800a292:	4601      	mov	r1, r0
 800a294:	4b4b      	ldr	r3, [pc, #300]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	484b      	ldr	r0, [pc, #300]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a29a:	4613      	mov	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4403      	add	r3, r0
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	889b      	ldrh	r3, [r3, #4]
 800a2aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2ae:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d01c      	beq.n	800a2f0 <BSP_LCD_DisplayStringAt+0xa0>
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	dc33      	bgt.n	800a322 <BSP_LCD_DisplayStringAt+0xd2>
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d002      	beq.n	800a2c4 <BSP_LCD_DisplayStringAt+0x74>
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d019      	beq.n	800a2f6 <BSP_LCD_DisplayStringAt+0xa6>
 800a2c2:	e02e      	b.n	800a322 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	1ad1      	subs	r1, r2, r3
 800a2ca:	4b3e      	ldr	r3, [pc, #248]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	483e      	ldr	r0, [pc, #248]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4403      	add	r3, r0
 800a2da:	3308      	adds	r3, #8
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	889b      	ldrh	r3, [r3, #4]
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	89fb      	ldrh	r3, [r7, #14]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	83fb      	strh	r3, [r7, #30]
      break;
 800a2ee:	e01b      	b.n	800a328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800a2f0:	89fb      	ldrh	r3, [r7, #14]
 800a2f2:	83fb      	strh	r3, [r7, #30]
      break;
 800a2f4:	e018      	b.n	800a328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	b299      	uxth	r1, r3
 800a2fe:	4b31      	ldr	r3, [pc, #196]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4831      	ldr	r0, [pc, #196]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a304:	4613      	mov	r3, r2
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4403      	add	r3, r0
 800a30e:	3308      	adds	r3, #8
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	889b      	ldrh	r3, [r3, #4]
 800a314:	fb11 f303 	smulbb	r3, r1, r3
 800a318:	b29a      	uxth	r2, r3
 800a31a:	89fb      	ldrh	r3, [r7, #14]
 800a31c:	4413      	add	r3, r2
 800a31e:	83fb      	strh	r3, [r7, #30]
      break;
 800a320:	e002      	b.n	800a328 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800a322:	89fb      	ldrh	r3, [r7, #14]
 800a324:	83fb      	strh	r3, [r7, #30]
      break;
 800a326:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a328:	e01a      	b.n	800a360 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	89b9      	ldrh	r1, [r7, #12]
 800a330:	8bfb      	ldrh	r3, [r7, #30]
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ff48 	bl	800a1c8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800a338:	4b22      	ldr	r3, [pc, #136]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4922      	ldr	r1, [pc, #136]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a33e:	4613      	mov	r3, r2
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	3308      	adds	r3, #8
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	889a      	ldrh	r2, [r3, #4]
 800a34e:	8bfb      	ldrh	r3, [r7, #30]
 800a350:	4413      	add	r3, r2
 800a352:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	3301      	adds	r3, #1
 800a358:	60bb      	str	r3, [r7, #8]
    i++;
 800a35a:	8bbb      	ldrh	r3, [r7, #28]
 800a35c:	3301      	adds	r3, #1
 800a35e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2dc      	uxtb	r4, r3
 800a36e:	f7ff fdd9 	bl	8009f24 <BSP_LCD_GetXSize>
 800a372:	8bb9      	ldrh	r1, [r7, #28]
 800a374:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	4d13      	ldr	r5, [pc, #76]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a37a:	4613      	mov	r3, r2
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	442b      	add	r3, r5
 800a384:	3308      	adds	r3, #8
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	889b      	ldrh	r3, [r3, #4]
 800a38a:	fb01 f303 	mul.w	r3, r1, r3
 800a38e:	1ac3      	subs	r3, r0, r3
 800a390:	b299      	uxth	r1, r3
 800a392:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <BSP_LCD_DisplayStringAt+0x174>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	480c      	ldr	r0, [pc, #48]	; (800a3c8 <BSP_LCD_DisplayStringAt+0x178>)
 800a398:	4613      	mov	r3, r2
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4403      	add	r3, r0
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	889b      	ldrh	r3, [r3, #4]
 800a3a8:	4299      	cmp	r1, r3
 800a3aa:	bf2c      	ite	cs
 800a3ac:	2301      	movcs	r3, #1
 800a3ae:	2300      	movcc	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4023      	ands	r3, r4
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1b7      	bne.n	800a32a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	3720      	adds	r7, #32
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3c4:	20019eec 	.word	0x20019eec
 800a3c8:	20019ef0 	.word	0x20019ef0

0800a3cc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a3cc:	b5b0      	push	{r4, r5, r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	80fb      	strh	r3, [r7, #6]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	80bb      	strh	r3, [r7, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a3e2:	4b16      	ldr	r3, [pc, #88]	; (800a43c <BSP_LCD_DrawHLine+0x70>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a16      	ldr	r2, [pc, #88]	; (800a440 <BSP_LCD_DrawHLine+0x74>)
 800a3e8:	2134      	movs	r1, #52	; 0x34
 800a3ea:	fb01 f303 	mul.w	r3, r1, r3
 800a3ee:	4413      	add	r3, r2
 800a3f0:	335c      	adds	r3, #92	; 0x5c
 800a3f2:	681c      	ldr	r4, [r3, #0]
 800a3f4:	f7ff fd96 	bl	8009f24 <BSP_LCD_GetXSize>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	88bb      	ldrh	r3, [r7, #4]
 800a3fc:	fb03 f202 	mul.w	r2, r3, r2
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4423      	add	r3, r4
 800a408:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800a40a:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <BSP_LCD_DrawHLine+0x70>)
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	887c      	ldrh	r4, [r7, #2]
 800a412:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <BSP_LCD_DrawHLine+0x70>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	4d0b      	ldr	r5, [pc, #44]	; (800a444 <BSP_LCD_DrawHLine+0x78>)
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	442b      	add	r3, r5
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	2300      	movs	r3, #0
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	2301      	movs	r3, #1
 800a42c:	4622      	mov	r2, r4
 800a42e:	f000 fc29 	bl	800ac84 <FillBuffer>
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bdb0      	pop	{r4, r5, r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20019eec 	.word	0x20019eec
 800a440:	20019dd4 	.word	0x20019dd4
 800a444:	20019ef0 	.word	0x20019ef0

0800a448 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	4603      	mov	r3, r0
 800a450:	80fb      	strh	r3, [r7, #6]
 800a452:	460b      	mov	r3, r1
 800a454:	80bb      	strh	r3, [r7, #4]
 800a456:	4613      	mov	r3, r2
 800a458:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a45e:	4b18      	ldr	r3, [pc, #96]	; (800a4c0 <BSP_LCD_DrawVLine+0x78>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a18      	ldr	r2, [pc, #96]	; (800a4c4 <BSP_LCD_DrawVLine+0x7c>)
 800a464:	2134      	movs	r1, #52	; 0x34
 800a466:	fb01 f303 	mul.w	r3, r1, r3
 800a46a:	4413      	add	r3, r2
 800a46c:	335c      	adds	r3, #92	; 0x5c
 800a46e:	681c      	ldr	r4, [r3, #0]
 800a470:	f7ff fd58 	bl	8009f24 <BSP_LCD_GetXSize>
 800a474:	4602      	mov	r2, r0
 800a476:	88bb      	ldrh	r3, [r7, #4]
 800a478:	fb03 f202 	mul.w	r2, r3, r2
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4423      	add	r3, r4
 800a484:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800a486:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <BSP_LCD_DrawVLine+0x78>)
 800a488:	681c      	ldr	r4, [r3, #0]
 800a48a:	68fd      	ldr	r5, [r7, #12]
 800a48c:	887e      	ldrh	r6, [r7, #2]
 800a48e:	f7ff fd49 	bl	8009f24 <BSP_LCD_GetXSize>
 800a492:	4603      	mov	r3, r0
 800a494:	1e59      	subs	r1, r3, #1
 800a496:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <BSP_LCD_DrawVLine+0x78>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	480b      	ldr	r0, [pc, #44]	; (800a4c8 <BSP_LCD_DrawVLine+0x80>)
 800a49c:	4613      	mov	r3, r2
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4403      	add	r3, r0
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	9100      	str	r1, [sp, #0]
 800a4ac:	4633      	mov	r3, r6
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 fbe6 	bl	800ac84 <FillBuffer>
}
 800a4b8:	bf00      	nop
 800a4ba:	3714      	adds	r7, #20
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c0:	20019eec 	.word	0x20019eec
 800a4c4:	20019dd4 	.word	0x20019dd4
 800a4c8:	20019ef0 	.word	0x20019ef0

0800a4cc <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4623      	mov	r3, r4
 800a4dc:	80fb      	strh	r3, [r7, #6]
 800a4de:	4603      	mov	r3, r0
 800a4e0:	80bb      	strh	r3, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	807b      	strh	r3, [r7, #2]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800a4ea:	887a      	ldrh	r2, [r7, #2]
 800a4ec:	88b9      	ldrh	r1, [r7, #4]
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff ff6b 	bl	800a3cc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800a4f6:	88ba      	ldrh	r2, [r7, #4]
 800a4f8:	883b      	ldrh	r3, [r7, #0]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	b299      	uxth	r1, r3
 800a4fe:	887a      	ldrh	r2, [r7, #2]
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff ff62 	bl	800a3cc <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800a508:	883a      	ldrh	r2, [r7, #0]
 800a50a:	88b9      	ldrh	r1, [r7, #4]
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff ff9a 	bl	800a448 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800a514:	88fa      	ldrh	r2, [r7, #6]
 800a516:	887b      	ldrh	r3, [r7, #2]
 800a518:	4413      	add	r3, r2
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	883a      	ldrh	r2, [r7, #0]
 800a51e:	88b9      	ldrh	r1, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff ff91 	bl	800a448 <BSP_LCD_DrawVLine>
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd90      	pop	{r4, r7, pc}
	...

0800a530 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a530:	b590      	push	{r4, r7, lr}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	80fb      	strh	r3, [r7, #6]
 800a53a:	460b      	mov	r3, r1
 800a53c:	80bb      	strh	r3, [r7, #4]
 800a53e:	4613      	mov	r3, r2
 800a540:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a542:	887b      	ldrh	r3, [r7, #2]
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	f1c3 0303 	rsb	r3, r3, #3
 800a54a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a550:	887b      	ldrh	r3, [r7, #2]
 800a552:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800a554:	e0c7      	b.n	800a6e6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	4413      	add	r3, r2
 800a55e:	b298      	uxth	r0, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	b29b      	uxth	r3, r3
 800a564:	88ba      	ldrh	r2, [r7, #4]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	b299      	uxth	r1, r3
 800a56a:	4b64      	ldr	r3, [pc, #400]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4c64      	ldr	r4, [pc, #400]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4423      	add	r3, r4
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f000 faa1 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	b29b      	uxth	r3, r3
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	b298      	uxth	r0, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	88ba      	ldrh	r2, [r7, #4]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	b299      	uxth	r1, r3
 800a596:	4b59      	ldr	r3, [pc, #356]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4c59      	ldr	r4, [pc, #356]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a59c:	4613      	mov	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4423      	add	r3, r4
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f000 fa8b 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b298      	uxth	r0, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	88ba      	ldrh	r2, [r7, #4]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	b299      	uxth	r1, r3
 800a5c2:	4b4e      	ldr	r3, [pc, #312]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4c4e      	ldr	r4, [pc, #312]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4423      	add	r3, r4
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f000 fa75 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	88fa      	ldrh	r2, [r7, #6]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	b298      	uxth	r0, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	88ba      	ldrh	r2, [r7, #4]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	4b43      	ldr	r3, [pc, #268]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4c43      	ldr	r4, [pc, #268]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4423      	add	r3, r4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	f000 fa5f 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	4413      	add	r3, r2
 800a60e:	b298      	uxth	r0, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	b29a      	uxth	r2, r3
 800a614:	88bb      	ldrh	r3, [r7, #4]
 800a616:	4413      	add	r3, r2
 800a618:	b299      	uxth	r1, r3
 800a61a:	4b38      	ldr	r3, [pc, #224]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4c38      	ldr	r4, [pc, #224]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a620:	4613      	mov	r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4423      	add	r3, r4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	f000 fa49 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	b29b      	uxth	r3, r3
 800a636:	88fa      	ldrh	r2, [r7, #6]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	b298      	uxth	r0, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	b29a      	uxth	r2, r3
 800a640:	88bb      	ldrh	r3, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	b299      	uxth	r1, r3
 800a646:	4b2d      	ldr	r3, [pc, #180]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4c2d      	ldr	r4, [pc, #180]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a64c:	4613      	mov	r3, r2
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4423      	add	r3, r4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	f000 fa33 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	b29a      	uxth	r2, r3
 800a662:	88fb      	ldrh	r3, [r7, #6]
 800a664:	4413      	add	r3, r2
 800a666:	b298      	uxth	r0, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	88bb      	ldrh	r3, [r7, #4]
 800a66e:	4413      	add	r3, r2
 800a670:	b299      	uxth	r1, r3
 800a672:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4c22      	ldr	r4, [pc, #136]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4423      	add	r3, r4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	f000 fa1d 	bl	800aac4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	88fa      	ldrh	r2, [r7, #6]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b298      	uxth	r0, r3
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	b29a      	uxth	r2, r3
 800a698:	88bb      	ldrh	r3, [r7, #4]
 800a69a:	4413      	add	r3, r2
 800a69c:	b299      	uxth	r1, r3
 800a69e:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <BSP_LCD_DrawCircle+0x1cc>)
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4c17      	ldr	r4, [pc, #92]	; (800a700 <BSP_LCD_DrawCircle+0x1d0>)
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4423      	add	r3, r4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f000 fa07 	bl	800aac4 <BSP_LCD_DrawPixel>

    if (d < 0)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da06      	bge.n	800a6ca <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	009a      	lsls	r2, r3, #2
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	3306      	adds	r3, #6
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	e00a      	b.n	800a6e0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	009a      	lsls	r2, r3, #2
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	330a      	adds	r3, #10
 800a6d8:	617b      	str	r3, [r7, #20]
      cury--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	f67f af33 	bls.w	800a556 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20019eec 	.word	0x20019eec
 800a700:	20019ef0 	.word	0x20019ef0

0800a704 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af02      	add	r7, sp, #8
 800a70c:	4604      	mov	r4, r0
 800a70e:	4608      	mov	r0, r1
 800a710:	4611      	mov	r1, r2
 800a712:	461a      	mov	r2, r3
 800a714:	4623      	mov	r3, r4
 800a716:	80fb      	strh	r3, [r7, #6]
 800a718:	4603      	mov	r3, r0
 800a71a:	80bb      	strh	r3, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	807b      	strh	r3, [r7, #2]
 800a720:	4613      	mov	r3, r2
 800a722:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a728:	4b20      	ldr	r3, [pc, #128]	; (800a7ac <BSP_LCD_FillRect+0xa8>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	4920      	ldr	r1, [pc, #128]	; (800a7b0 <BSP_LCD_FillRect+0xac>)
 800a72e:	4613      	mov	r3, r2
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fcd0 	bl	800a0e0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a740:	4b1a      	ldr	r3, [pc, #104]	; (800a7ac <BSP_LCD_FillRect+0xa8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a1b      	ldr	r2, [pc, #108]	; (800a7b4 <BSP_LCD_FillRect+0xb0>)
 800a746:	2134      	movs	r1, #52	; 0x34
 800a748:	fb01 f303 	mul.w	r3, r1, r3
 800a74c:	4413      	add	r3, r2
 800a74e:	335c      	adds	r3, #92	; 0x5c
 800a750:	681c      	ldr	r4, [r3, #0]
 800a752:	f7ff fbe7 	bl	8009f24 <BSP_LCD_GetXSize>
 800a756:	4602      	mov	r2, r0
 800a758:	88bb      	ldrh	r3, [r7, #4]
 800a75a:	fb03 f202 	mul.w	r2, r3, r2
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4423      	add	r3, r4
 800a766:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800a768:	4b10      	ldr	r3, [pc, #64]	; (800a7ac <BSP_LCD_FillRect+0xa8>)
 800a76a:	681c      	ldr	r4, [r3, #0]
 800a76c:	68fd      	ldr	r5, [r7, #12]
 800a76e:	887e      	ldrh	r6, [r7, #2]
 800a770:	f8b7 8000 	ldrh.w	r8, [r7]
 800a774:	f7ff fbd6 	bl	8009f24 <BSP_LCD_GetXSize>
 800a778:	4602      	mov	r2, r0
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	1ad1      	subs	r1, r2, r3
 800a77e:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <BSP_LCD_FillRect+0xa8>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	480b      	ldr	r0, [pc, #44]	; (800a7b0 <BSP_LCD_FillRect+0xac>)
 800a784:	4613      	mov	r3, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4403      	add	r3, r0
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	9100      	str	r1, [sp, #0]
 800a794:	4643      	mov	r3, r8
 800a796:	4632      	mov	r2, r6
 800a798:	4629      	mov	r1, r5
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fa72 	bl	800ac84 <FillBuffer>
}
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20019eec 	.word	0x20019eec
 800a7b0:	20019ef0 	.word	0x20019ef0
 800a7b4:	20019dd4 	.word	0x20019dd4

0800a7b8 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	80fb      	strh	r3, [r7, #6]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	80bb      	strh	r3, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a7ca:	887b      	ldrh	r3, [r7, #2]
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	f1c3 0303 	rsb	r3, r3, #3
 800a7d2:	617b      	str	r3, [r7, #20]

  curx = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a7d8:	887b      	ldrh	r3, [r7, #2]
 800a7da:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a7dc:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <BSP_LCD_FillCircle+0x138>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4944      	ldr	r1, [pc, #272]	; (800a8f4 <BSP_LCD_FillCircle+0x13c>)
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fc76 	bl	800a0e0 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800a7f4:	e061      	b.n	800a8ba <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d021      	beq.n	800a840 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	88fa      	ldrh	r2, [r7, #6]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	b298      	uxth	r0, r3
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	b29a      	uxth	r2, r3
 800a80a:	88bb      	ldrh	r3, [r7, #4]
 800a80c:	4413      	add	r3, r2
 800a80e:	b299      	uxth	r1, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	b29b      	uxth	r3, r3
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b29b      	uxth	r3, r3
 800a818:	461a      	mov	r2, r3
 800a81a:	f7ff fdd7 	bl	800a3cc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	b29b      	uxth	r3, r3
 800a822:	88fa      	ldrh	r2, [r7, #6]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	b298      	uxth	r0, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	88ba      	ldrh	r2, [r7, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	b299      	uxth	r1, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	b29b      	uxth	r3, r3
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	b29b      	uxth	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7ff fdc6 	bl	800a3cc <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d021      	beq.n	800a88a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	88fa      	ldrh	r2, [r7, #6]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	b298      	uxth	r0, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	b29b      	uxth	r3, r3
 800a854:	88ba      	ldrh	r2, [r7, #4]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	b299      	uxth	r1, r3
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	005b      	lsls	r3, r3, #1
 800a860:	b29b      	uxth	r3, r3
 800a862:	461a      	mov	r2, r3
 800a864:	f7ff fdb2 	bl	800a3cc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	b298      	uxth	r0, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	b29a      	uxth	r2, r3
 800a876:	88bb      	ldrh	r3, [r7, #4]
 800a878:	4413      	add	r3, r2
 800a87a:	b299      	uxth	r1, r3
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	b29b      	uxth	r3, r3
 800a884:	461a      	mov	r2, r3
 800a886:	f7ff fda1 	bl	800a3cc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da06      	bge.n	800a89e <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	009a      	lsls	r2, r3, #2
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	4413      	add	r3, r2
 800a898:	3306      	adds	r3, #6
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e00a      	b.n	800a8b4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	009a      	lsls	r2, r3, #2
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	330a      	adds	r3, #10
 800a8ac:	617b      	str	r3, [r7, #20]
      cury--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d999      	bls.n	800a7f6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <BSP_LCD_FillCircle+0x138>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	490b      	ldr	r1, [pc, #44]	; (800a8f4 <BSP_LCD_FillCircle+0x13c>)
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fc03 	bl	800a0e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a8da:	887a      	ldrh	r2, [r7, #2]
 800a8dc:	88b9      	ldrh	r1, [r7, #4]
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fe25 	bl	800a530 <BSP_LCD_DrawCircle>
}
 800a8e6:	bf00      	nop
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20019eec 	.word	0x20019eec
 800a8f4:	20019ef0 	.word	0x20019ef0

0800a8f8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <BSP_LCD_DisplayOn+0x1c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800a906:	4b03      	ldr	r3, [pc, #12]	; (800a914 <BSP_LCD_DisplayOn+0x1c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	4798      	blx	r3
  }
}
 800a90e:	bf00      	nop
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20019f08 	.word	0x20019f08

0800a918 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08e      	sub	sp, #56	; 0x38
 800a91c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a91e:	2300      	movs	r3, #0
 800a920:	623b      	str	r3, [r7, #32]
 800a922:	4b61      	ldr	r3, [pc, #388]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	4a60      	ldr	r2, [pc, #384]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a92c:	6453      	str	r3, [r2, #68]	; 0x44
 800a92e:	4b5e      	ldr	r3, [pc, #376]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a936:	623b      	str	r3, [r7, #32]
 800a938:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800a93a:	2300      	movs	r3, #0
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	4b5a      	ldr	r3, [pc, #360]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	4a59      	ldr	r2, [pc, #356]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a948:	6313      	str	r3, [r2, #48]	; 0x30
 800a94a:	4b57      	ldr	r3, [pc, #348]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a952:	61fb      	str	r3, [r7, #28]
 800a954:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a956:	2300      	movs	r3, #0
 800a958:	61bb      	str	r3, [r7, #24]
 800a95a:	4b53      	ldr	r3, [pc, #332]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95e:	4a52      	ldr	r2, [pc, #328]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a960:	f043 0301 	orr.w	r3, r3, #1
 800a964:	6313      	str	r3, [r2, #48]	; 0x30
 800a966:	4b50      	ldr	r3, [pc, #320]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	61bb      	str	r3, [r7, #24]
 800a970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	4b4c      	ldr	r3, [pc, #304]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	4a4b      	ldr	r2, [pc, #300]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	6313      	str	r3, [r2, #48]	; 0x30
 800a982:	4b49      	ldr	r3, [pc, #292]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	f003 0302 	and.w	r3, r3, #2
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
 800a992:	4b45      	ldr	r3, [pc, #276]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a996:	4a44      	ldr	r2, [pc, #272]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a998:	f043 0304 	orr.w	r3, r3, #4
 800a99c:	6313      	str	r3, [r2, #48]	; 0x30
 800a99e:	4b42      	ldr	r3, [pc, #264]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	4b3e      	ldr	r3, [pc, #248]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	4a3d      	ldr	r2, [pc, #244]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9b4:	f043 0308 	orr.w	r3, r3, #8
 800a9b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9ba:	4b3b      	ldr	r3, [pc, #236]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	f003 0308 	and.w	r3, r3, #8
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	4b37      	ldr	r3, [pc, #220]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ce:	4a36      	ldr	r2, [pc, #216]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9d0:	f043 0320 	orr.w	r3, r3, #32
 800a9d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a9d6:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	60bb      	str	r3, [r7, #8]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	4b30      	ldr	r3, [pc, #192]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ea:	4a2f      	ldr	r2, [pc, #188]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a9f2:	4b2d      	ldr	r3, [pc, #180]	; (800aaa8 <BSP_LCD_MspInit+0x190>)
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fa:	607b      	str	r3, [r7, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800a9fe:	f641 0358 	movw	r3, #6232	; 0x1858
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800aa04:	2302      	movs	r3, #2
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800aa10:	230e      	movs	r3, #14
 800aa12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800aa14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4824      	ldr	r0, [pc, #144]	; (800aaac <BSP_LCD_MspInit+0x194>)
 800aa1c:	f001 f9e0 	bl	800bde0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800aa20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800aa26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4820      	ldr	r0, [pc, #128]	; (800aab0 <BSP_LCD_MspInit+0x198>)
 800aa2e:	f001 f9d7 	bl	800bde0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800aa32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800aa38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	481d      	ldr	r0, [pc, #116]	; (800aab4 <BSP_LCD_MspInit+0x19c>)
 800aa40:	f001 f9ce 	bl	800bde0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800aa44:	2348      	movs	r3, #72	; 0x48
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800aa48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	481a      	ldr	r0, [pc, #104]	; (800aab8 <BSP_LCD_MspInit+0x1a0>)
 800aa50:	f001 f9c6 	bl	800bde0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800aa54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800aa5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4816      	ldr	r0, [pc, #88]	; (800aabc <BSP_LCD_MspInit+0x1a4>)
 800aa62:	f001 f9bd 	bl	800bde0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800aa66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800aa6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa70:	4619      	mov	r1, r3
 800aa72:	4813      	ldr	r0, [pc, #76]	; (800aac0 <BSP_LCD_MspInit+0x1a8>)
 800aa74:	f001 f9b4 	bl	800bde0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800aa7c:	2309      	movs	r3, #9
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800aa80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa84:	4619      	mov	r1, r3
 800aa86:	480a      	ldr	r0, [pc, #40]	; (800aab0 <BSP_LCD_MspInit+0x198>)
 800aa88:	f001 f9aa 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800aa8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800aa92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa96:	4619      	mov	r1, r3
 800aa98:	4809      	ldr	r0, [pc, #36]	; (800aac0 <BSP_LCD_MspInit+0x1a8>)
 800aa9a:	f001 f9a1 	bl	800bde0 <HAL_GPIO_Init>
}
 800aa9e:	bf00      	nop
 800aaa0:	3738      	adds	r7, #56	; 0x38
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	40023800 	.word	0x40023800
 800aaac:	40020000 	.word	0x40020000
 800aab0:	40020400 	.word	0x40020400
 800aab4:	40020800 	.word	0x40020800
 800aab8:	40020c00 	.word	0x40020c00
 800aabc:	40021400 	.word	0x40021400
 800aac0:	40021800 	.word	0x40021800

0800aac4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800aac4:	b5b0      	push	{r4, r5, r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	603a      	str	r2, [r7, #0]
 800aace:	80fb      	strh	r3, [r7, #6]
 800aad0:	460b      	mov	r3, r1
 800aad2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800aad4:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <BSP_LCD_DrawPixel+0x44>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a0c      	ldr	r2, [pc, #48]	; (800ab0c <BSP_LCD_DrawPixel+0x48>)
 800aada:	2134      	movs	r1, #52	; 0x34
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	335c      	adds	r3, #92	; 0x5c
 800aae4:	681c      	ldr	r4, [r3, #0]
 800aae6:	88bd      	ldrh	r5, [r7, #4]
 800aae8:	f7ff fa1c 	bl	8009f24 <BSP_LCD_GetXSize>
 800aaec:	4603      	mov	r3, r0
 800aaee:	fb03 f205 	mul.w	r2, r3, r5
 800aaf2:	88fb      	ldrh	r3, [r7, #6]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4423      	add	r3, r4
 800aafa:	461a      	mov	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	6013      	str	r3, [r2, #0]
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bdb0      	pop	{r4, r5, r7, pc}
 800ab08:	20019eec 	.word	0x20019eec
 800ab0c:	20019dd4 	.word	0x20019dd4

0800ab10 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	603a      	str	r2, [r7, #0]
 800ab1a:	80fb      	strh	r3, [r7, #6]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61fb      	str	r3, [r7, #28]
 800ab24:	2300      	movs	r3, #0
 800ab26:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800ab2c:	4b53      	ldr	r3, [pc, #332]	; (800ac7c <DrawChar+0x16c>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4953      	ldr	r1, [pc, #332]	; (800ac80 <DrawChar+0x170>)
 800ab32:	4613      	mov	r3, r2
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	88db      	ldrh	r3, [r3, #6]
 800ab42:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800ab44:	4b4d      	ldr	r3, [pc, #308]	; (800ac7c <DrawChar+0x16c>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	494d      	ldr	r1, [pc, #308]	; (800ac80 <DrawChar+0x170>)
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	3308      	adds	r3, #8
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	889b      	ldrh	r3, [r3, #4]
 800ab5a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800ab5c:	8a3b      	ldrh	r3, [r7, #16]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da00      	bge.n	800ab66 <DrawChar+0x56>
 800ab64:	3307      	adds	r3, #7
 800ab66:	10db      	asrs	r3, r3, #3
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	8a3b      	ldrh	r3, [r7, #16]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800ab76:	2300      	movs	r3, #0
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	e076      	b.n	800ac6a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800ab7c:	8a3b      	ldrh	r3, [r7, #16]
 800ab7e:	3307      	adds	r3, #7
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da00      	bge.n	800ab86 <DrawChar+0x76>
 800ab84:	3307      	adds	r3, #7
 800ab86:	10db      	asrs	r3, r3, #3
 800ab88:	461a      	mov	r2, r3
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	fb02 f303 	mul.w	r3, r2, r3
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	4413      	add	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800ab96:	8a3b      	ldrh	r3, [r7, #16]
 800ab98:	3307      	adds	r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	da00      	bge.n	800aba0 <DrawChar+0x90>
 800ab9e:	3307      	adds	r3, #7
 800aba0:	10db      	asrs	r3, r3, #3
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d002      	beq.n	800abac <DrawChar+0x9c>
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d004      	beq.n	800abb4 <DrawChar+0xa4>
 800abaa:	e00c      	b.n	800abc6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	617b      	str	r3, [r7, #20]
      break;
 800abb2:	e016      	b.n	800abe2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	3201      	adds	r2, #1
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]
      break;
 800abc4:	e00d      	b.n	800abe2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	041a      	lsls	r2, r3, #16
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	3301      	adds	r3, #1
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	4313      	orrs	r3, r2
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	3202      	adds	r2, #2
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]
      break;
 800abe0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	61bb      	str	r3, [r7, #24]
 800abe6:	e036      	b.n	800ac56 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800abe8:	8a3a      	ldrh	r2, [r7, #16]
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	1ad2      	subs	r2, r2, r3
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	4413      	add	r3, r2
 800abf2:	3b01      	subs	r3, #1
 800abf4:	2201      	movs	r2, #1
 800abf6:	fa02 f303 	lsl.w	r3, r2, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d012      	beq.n	800ac2a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	88fb      	ldrh	r3, [r7, #6]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	b298      	uxth	r0, r3
 800ac0e:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <DrawChar+0x16c>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	491b      	ldr	r1, [pc, #108]	; (800ac80 <DrawChar+0x170>)
 800ac14:	4613      	mov	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	440b      	add	r3, r1
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	88bb      	ldrh	r3, [r7, #4]
 800ac22:	4619      	mov	r1, r3
 800ac24:	f7ff ff4e 	bl	800aac4 <BSP_LCD_DrawPixel>
 800ac28:	e012      	b.n	800ac50 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	4413      	add	r3, r2
 800ac32:	b298      	uxth	r0, r3
 800ac34:	4b11      	ldr	r3, [pc, #68]	; (800ac7c <DrawChar+0x16c>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4911      	ldr	r1, [pc, #68]	; (800ac80 <DrawChar+0x170>)
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	3304      	adds	r3, #4
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	88bb      	ldrh	r3, [r7, #4]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	f7ff ff3a 	bl	800aac4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	3301      	adds	r3, #1
 800ac54:	61bb      	str	r3, [r7, #24]
 800ac56:	8a3b      	ldrh	r3, [r7, #16]
 800ac58:	69ba      	ldr	r2, [r7, #24]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d3c4      	bcc.n	800abe8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800ac5e:	88bb      	ldrh	r3, [r7, #4]
 800ac60:	3301      	adds	r3, #1
 800ac62:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	3301      	adds	r3, #1
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	8a7b      	ldrh	r3, [r7, #18]
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d384      	bcc.n	800ab7c <DrawChar+0x6c>
  }
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20019eec 	.word	0x20019eec
 800ac80:	20019ef0 	.word	0x20019ef0

0800ac84 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af02      	add	r7, sp, #8
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800ac92:	4b16      	ldr	r3, [pc, #88]	; (800acec <FillBuffer+0x68>)
 800ac94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ac98:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800ac9a:	4b14      	ldr	r3, [pc, #80]	; (800acec <FillBuffer+0x68>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800aca0:	4a12      	ldr	r2, [pc, #72]	; (800acec <FillBuffer+0x68>)
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <FillBuffer+0x68>)
 800aca8:	4a11      	ldr	r2, [pc, #68]	; (800acf0 <FillBuffer+0x6c>)
 800acaa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800acac:	480f      	ldr	r0, [pc, #60]	; (800acec <FillBuffer+0x68>)
 800acae:	f000 fe0b 	bl	800b8c8 <HAL_DMA2D_Init>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d115      	bne.n	800ace4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	480c      	ldr	r0, [pc, #48]	; (800acec <FillBuffer+0x68>)
 800acbc:	f000 ff62 	bl	800bb84 <HAL_DMA2D_ConfigLayer>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10e      	bne.n	800ace4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69f9      	ldr	r1, [r7, #28]
 800acd0:	4806      	ldr	r0, [pc, #24]	; (800acec <FillBuffer+0x68>)
 800acd2:	f000 fe42 	bl	800b95a <HAL_DMA2D_Start>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d103      	bne.n	800ace4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800acdc:	210a      	movs	r1, #10
 800acde:	4803      	ldr	r0, [pc, #12]	; (800acec <FillBuffer+0x68>)
 800ace0:	f000 fe66 	bl	800b9b0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800ace4:	bf00      	nop
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20019e7c 	.word	0x20019e7c
 800acf0:	4002b000 	.word	0x4002b000

0800acf4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800acf8:	4b29      	ldr	r3, [pc, #164]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800acfa:	4a2a      	ldr	r2, [pc, #168]	; (800ada4 <BSP_SDRAM_Init+0xb0>)
 800acfc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800acfe:	4b2a      	ldr	r3, [pc, #168]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad00:	2202      	movs	r2, #2
 800ad02:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800ad04:	4b28      	ldr	r3, [pc, #160]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad06:	2207      	movs	r2, #7
 800ad08:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800ad0a:	4b27      	ldr	r3, [pc, #156]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad12:	2207      	movs	r2, #7
 800ad14:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800ad16:	4b24      	ldr	r3, [pc, #144]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad18:	2202      	movs	r2, #2
 800ad1a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800ad1c:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad1e:	2202      	movs	r2, #2
 800ad20:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800ad22:	4b21      	ldr	r3, [pc, #132]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad24:	2202      	movs	r2, #2
 800ad26:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800ad28:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800ad2e:	4b1c      	ldr	r3, [pc, #112]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800ad34:	4b1a      	ldr	r3, [pc, #104]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad36:	2204      	movs	r2, #4
 800ad38:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800ad3a:	4b19      	ldr	r3, [pc, #100]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad3c:	2210      	movs	r2, #16
 800ad3e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ad40:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad42:	2240      	movs	r2, #64	; 0x40
 800ad44:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800ad46:	4b16      	ldr	r3, [pc, #88]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad48:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ad4c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ad4e:	4b14      	ldr	r3, [pc, #80]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800ad54:	4b12      	ldr	r3, [pc, #72]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad5a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800ad5c:	4b10      	ldr	r3, [pc, #64]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800ad62:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad68:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	480c      	ldr	r0, [pc, #48]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad6e:	f000 f87f 	bl	800ae70 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800ad72:	490d      	ldr	r1, [pc, #52]	; (800ada8 <BSP_SDRAM_Init+0xb4>)
 800ad74:	480a      	ldr	r0, [pc, #40]	; (800ada0 <BSP_SDRAM_Init+0xac>)
 800ad76:	f003 fd6d 	bl	800e854 <HAL_SDRAM_Init>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800ad80:	4b0a      	ldr	r3, [pc, #40]	; (800adac <BSP_SDRAM_Init+0xb8>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800ad88:	4b08      	ldr	r3, [pc, #32]	; (800adac <BSP_SDRAM_Init+0xb8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800ad8e:	f240 506a 	movw	r0, #1386	; 0x56a
 800ad92:	f000 f80d 	bl	800adb0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <BSP_SDRAM_Init+0xb8>)
 800ad98:	781b      	ldrb	r3, [r3, #0]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20019f0c 	.word	0x20019f0c
 800ada4:	a0000140 	.word	0xa0000140
 800ada8:	20019f40 	.word	0x20019f40
 800adac:	200008b8 	.word	0x200008b8

0800adb0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800adbc:	4b2a      	ldr	r3, [pc, #168]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800adc2:	4b29      	ldr	r3, [pc, #164]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adc4:	2208      	movs	r2, #8
 800adc6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800adc8:	4b27      	ldr	r3, [pc, #156]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adca:	2201      	movs	r2, #1
 800adcc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800adce:	4b26      	ldr	r3, [pc, #152]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800add0:	2200      	movs	r2, #0
 800add2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800add4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800add8:	4923      	ldr	r1, [pc, #140]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adda:	4824      	ldr	r0, [pc, #144]	; (800ae6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800addc:	f003 fd6e 	bl	800e8bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800ade0:	2001      	movs	r0, #1
 800ade2:	f000 fa91 	bl	800b308 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800ade6:	4b20      	ldr	r3, [pc, #128]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ade8:	2202      	movs	r2, #2
 800adea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adee:	2208      	movs	r2, #8
 800adf0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800adf2:	4b1d      	ldr	r3, [pc, #116]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800adf8:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800adfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae02:	4919      	ldr	r1, [pc, #100]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae04:	4819      	ldr	r0, [pc, #100]	; (800ae6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae06:	f003 fd59 	bl	800e8bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ae0a:	4b17      	ldr	r3, [pc, #92]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ae10:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae12:	2208      	movs	r2, #8
 800ae14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800ae16:	4b14      	ldr	r3, [pc, #80]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae18:	2204      	movs	r2, #4
 800ae1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800ae1c:	4b12      	ldr	r3, [pc, #72]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ae22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae26:	4910      	ldr	r1, [pc, #64]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae28:	4810      	ldr	r0, [pc, #64]	; (800ae6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae2a:	f003 fd47 	bl	800e8bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800ae2e:	f44f 730c 	mov.w	r3, #560	; 0x230
 800ae32:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800ae34:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae36:	2204      	movs	r2, #4
 800ae38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ae3a:	4b0b      	ldr	r3, [pc, #44]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ae40:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae42:	2201      	movs	r2, #1
 800ae44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4a07      	ldr	r2, [pc, #28]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae4a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ae4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae50:	4905      	ldr	r1, [pc, #20]	; (800ae68 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae52:	4806      	ldr	r0, [pc, #24]	; (800ae6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae54:	f003 fd32 	bl	800e8bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4804      	ldr	r0, [pc, #16]	; (800ae6c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae5c:	f003 fd63 	bl	800e926 <HAL_SDRAM_ProgramRefreshRate>
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20019f5c 	.word	0x20019f5c
 800ae6c:	20019f0c 	.word	0x20019f0c

0800ae70 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b090      	sub	sp, #64	; 0x40
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 80ec 	beq.w	800b05a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ae82:	2300      	movs	r3, #0
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae86:	4b77      	ldr	r3, [pc, #476]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	4a76      	ldr	r2, [pc, #472]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800ae8c:	f043 0301 	orr.w	r3, r3, #1
 800ae90:	6393      	str	r3, [r2, #56]	; 0x38
 800ae92:	4b74      	ldr	r3, [pc, #464]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800ae9e:	2300      	movs	r3, #0
 800aea0:	627b      	str	r3, [r7, #36]	; 0x24
 800aea2:	4b70      	ldr	r3, [pc, #448]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea6:	4a6f      	ldr	r2, [pc, #444]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aeac:	6313      	str	r3, [r2, #48]	; 0x30
 800aeae:	4b6d      	ldr	r3, [pc, #436]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aeba:	2300      	movs	r3, #0
 800aebc:	623b      	str	r3, [r7, #32]
 800aebe:	4b69      	ldr	r3, [pc, #420]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec2:	4a68      	ldr	r2, [pc, #416]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aec4:	f043 0302 	orr.w	r3, r3, #2
 800aec8:	6313      	str	r3, [r2, #48]	; 0x30
 800aeca:	4b66      	ldr	r3, [pc, #408]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	623b      	str	r3, [r7, #32]
 800aed4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	4b62      	ldr	r3, [pc, #392]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aede:	4a61      	ldr	r2, [pc, #388]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aee0:	f043 0304 	orr.w	r3, r3, #4
 800aee4:	6313      	str	r3, [r2, #48]	; 0x30
 800aee6:	4b5f      	ldr	r3, [pc, #380]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aef2:	2300      	movs	r3, #0
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	4b5b      	ldr	r3, [pc, #364]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	4a5a      	ldr	r2, [pc, #360]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800aefc:	f043 0308 	orr.w	r3, r3, #8
 800af00:	6313      	str	r3, [r2, #48]	; 0x30
 800af02:	4b58      	ldr	r3, [pc, #352]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	f003 0308 	and.w	r3, r3, #8
 800af0a:	61bb      	str	r3, [r7, #24]
 800af0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800af0e:	2300      	movs	r3, #0
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	4b54      	ldr	r3, [pc, #336]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af16:	4a53      	ldr	r2, [pc, #332]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af18:	f043 0310 	orr.w	r3, r3, #16
 800af1c:	6313      	str	r3, [r2, #48]	; 0x30
 800af1e:	4b51      	ldr	r3, [pc, #324]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af22:	f003 0310 	and.w	r3, r3, #16
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800af2a:	2300      	movs	r3, #0
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	4b4d      	ldr	r3, [pc, #308]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	4a4c      	ldr	r2, [pc, #304]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af34:	f043 0320 	orr.w	r3, r3, #32
 800af38:	6313      	str	r3, [r2, #48]	; 0x30
 800af3a:	4b4a      	ldr	r3, [pc, #296]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800af46:	2300      	movs	r3, #0
 800af48:	60fb      	str	r3, [r7, #12]
 800af4a:	4b46      	ldr	r3, [pc, #280]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4e:	4a45      	ldr	r2, [pc, #276]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af54:	6313      	str	r3, [r2, #48]	; 0x30
 800af56:	4b43      	ldr	r3, [pc, #268]	; (800b064 <BSP_SDRAM_MspInit+0x1f4>)
 800af58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800af62:	2302      	movs	r3, #2
 800af64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800af66:	2302      	movs	r3, #2
 800af68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800af6e:	230c      	movs	r3, #12
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800af72:	2360      	movs	r3, #96	; 0x60
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800af76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af7a:	4619      	mov	r1, r3
 800af7c:	483a      	ldr	r0, [pc, #232]	; (800b068 <BSP_SDRAM_MspInit+0x1f8>)
 800af7e:	f000 ff2f 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800af82:	2301      	movs	r3, #1
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800af86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af8a:	4619      	mov	r1, r3
 800af8c:	4837      	ldr	r0, [pc, #220]	; (800b06c <BSP_SDRAM_MspInit+0x1fc>)
 800af8e:	f000 ff27 	bl	800bde0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800af92:	f24c 7303 	movw	r3, #50947	; 0xc703
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800af98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af9c:	4619      	mov	r1, r3
 800af9e:	4834      	ldr	r0, [pc, #208]	; (800b070 <BSP_SDRAM_MspInit+0x200>)
 800afa0:	f000 ff1e 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800afa4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800afaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afae:	4619      	mov	r1, r3
 800afb0:	4830      	ldr	r0, [pc, #192]	; (800b074 <BSP_SDRAM_MspInit+0x204>)
 800afb2:	f000 ff15 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800afb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800afbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afc0:	4619      	mov	r1, r3
 800afc2:	482d      	ldr	r0, [pc, #180]	; (800b078 <BSP_SDRAM_MspInit+0x208>)
 800afc4:	f000 ff0c 	bl	800bde0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800afc8:	f248 1333 	movw	r3, #33075	; 0x8133
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800afce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afd2:	4619      	mov	r1, r3
 800afd4:	4829      	ldr	r0, [pc, #164]	; (800b07c <BSP_SDRAM_MspInit+0x20c>)
 800afd6:	f000 ff03 	bl	800bde0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800afda:	4b29      	ldr	r3, [pc, #164]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800afe0:	4b27      	ldr	r3, [pc, #156]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800afe2:	2280      	movs	r2, #128	; 0x80
 800afe4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800afe6:	4b26      	ldr	r3, [pc, #152]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800afe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afec:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800aff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aff4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aff6:	4b22      	ldr	r3, [pc, #136]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800aff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800affc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800affe:	4b20      	ldr	r3, [pc, #128]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b004:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800b006:	4b1e      	ldr	r3, [pc, #120]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b008:	2200      	movs	r2, #0
 800b00a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800b00c:	4b1c      	ldr	r3, [pc, #112]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b00e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b012:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800b014:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b016:	2200      	movs	r2, #0
 800b018:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b01a:	4b19      	ldr	r3, [pc, #100]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b01c:	2203      	movs	r2, #3
 800b01e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800b020:	4b17      	ldr	r3, [pc, #92]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b022:	2200      	movs	r2, #0
 800b024:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800b026:	4b16      	ldr	r3, [pc, #88]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b028:	2200      	movs	r2, #0
 800b02a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800b02c:	4b14      	ldr	r3, [pc, #80]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b02e:	4a15      	ldr	r2, [pc, #84]	; (800b084 <BSP_SDRAM_MspInit+0x214>)
 800b030:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a12      	ldr	r2, [pc, #72]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b036:	631a      	str	r2, [r3, #48]	; 0x30
 800b038:	4a11      	ldr	r2, [pc, #68]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800b03e:	4810      	ldr	r0, [pc, #64]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b040:	f000 fb32 	bl	800b6a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800b044:	480e      	ldr	r0, [pc, #56]	; (800b080 <BSP_SDRAM_MspInit+0x210>)
 800b046:	f000 fa81 	bl	800b54c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800b04a:	2200      	movs	r2, #0
 800b04c:	210f      	movs	r1, #15
 800b04e:	2038      	movs	r0, #56	; 0x38
 800b050:	f000 fa36 	bl	800b4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800b054:	2038      	movs	r0, #56	; 0x38
 800b056:	f000 fa4f 	bl	800b4f8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800b05a:	bf00      	nop
 800b05c:	3740      	adds	r7, #64	; 0x40
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	40023800 	.word	0x40023800
 800b068:	40020400 	.word	0x40020400
 800b06c:	40020800 	.word	0x40020800
 800b070:	40020c00 	.word	0x40020c00
 800b074:	40021000 	.word	0x40021000
 800b078:	40021400 	.word	0x40021400
 800b07c:	40021800 	.word	0x40021800
 800b080:	20019f6c 	.word	0x20019f6c
 800b084:	40026410 	.word	0x40026410

0800b088 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	460a      	mov	r2, r1
 800b092:	80fb      	strh	r3, [r7, #6]
 800b094:	4613      	mov	r3, r2
 800b096:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800b09c:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <BSP_TS_Init+0x64>)
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800b0a2:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <BSP_TS_Init+0x68>)
 800b0a4:	88bb      	ldrh	r3, [r7, #4]
 800b0a6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800b0a8:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <BSP_TS_Init+0x6c>)
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2082      	movs	r0, #130	; 0x82
 800b0ae:	4798      	blx	r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f640 0311 	movw	r3, #2065	; 0x811
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d104      	bne.n	800b0c6 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800b0bc:	4b0e      	ldr	r3, [pc, #56]	; (800b0f8 <BSP_TS_Init+0x70>)
 800b0be:	4a0d      	ldr	r2, [pc, #52]	; (800b0f4 <BSP_TS_Init+0x6c>)
 800b0c0:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d109      	bne.n	800b0e0 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <BSP_TS_Init+0x70>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2082      	movs	r0, #130	; 0x82
 800b0d4:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800b0d6:	4b08      	ldr	r3, [pc, #32]	; (800b0f8 <BSP_TS_Init+0x70>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2082      	movs	r0, #130	; 0x82
 800b0de:	4798      	blx	r3
  }

  return ret;
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20019fd0 	.word	0x20019fd0
 800b0f0:	20019fd2 	.word	0x20019fd2
 800b0f4:	2000086c 	.word	0x2000086c
 800b0f8:	20019fcc 	.word	0x20019fcc

0800b0fc <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800b104:	4b4f      	ldr	r3, [pc, #316]	; (800b244 <BSP_TS_GetState+0x148>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	2082      	movs	r0, #130	; 0x82
 800b10c:	4798      	blx	r3
 800b10e:	4603      	mov	r3, r0
 800b110:	b29a      	uxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 808d 	beq.w	800b23a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800b120:	4b48      	ldr	r3, [pc, #288]	; (800b244 <BSP_TS_GetState+0x148>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	f107 020c 	add.w	r2, r7, #12
 800b12a:	f107 010e 	add.w	r1, r7, #14
 800b12e:	2082      	movs	r0, #130	; 0x82
 800b130:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800b132:	89bb      	ldrh	r3, [r7, #12]
 800b134:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800b138:	b29b      	uxth	r3, r3
 800b13a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800b13c:	89bb      	ldrh	r3, [r7, #12]
 800b13e:	4a42      	ldr	r2, [pc, #264]	; (800b248 <BSP_TS_GetState+0x14c>)
 800b140:	fba2 2303 	umull	r2, r3, r2, r3
 800b144:	08db      	lsrs	r3, r3, #3
 800b146:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800b148:	8abb      	ldrh	r3, [r7, #20]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	82bb      	strh	r3, [r7, #20]
 800b152:	e008      	b.n	800b166 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800b154:	4b3d      	ldr	r3, [pc, #244]	; (800b24c <BSP_TS_GetState+0x150>)
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	8aba      	ldrh	r2, [r7, #20]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d903      	bls.n	800b166 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800b15e:	4b3b      	ldr	r3, [pc, #236]	; (800b24c <BSP_TS_GetState+0x150>)
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	3b01      	subs	r3, #1
 800b164:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800b166:	8abb      	ldrh	r3, [r7, #20]
 800b168:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800b16a:	89fb      	ldrh	r3, [r7, #14]
 800b16c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b170:	4293      	cmp	r3, r2
 800b172:	d806      	bhi.n	800b182 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800b174:	89fb      	ldrh	r3, [r7, #14]
 800b176:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800b17a:	330e      	adds	r3, #14
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	81fb      	strh	r3, [r7, #14]
 800b180:	e005      	b.n	800b18e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800b188:	3308      	adds	r3, #8
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800b18e:	89fb      	ldrh	r3, [r7, #14]
 800b190:	4a2f      	ldr	r2, [pc, #188]	; (800b250 <BSP_TS_GetState+0x154>)
 800b192:	fba2 2303 	umull	r2, r3, r2, r3
 800b196:	08db      	lsrs	r3, r3, #3
 800b198:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800b19a:	8afb      	ldrh	r3, [r7, #22]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	82fb      	strh	r3, [r7, #22]
 800b1a4:	e008      	b.n	800b1b8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800b1a6:	4b2b      	ldr	r3, [pc, #172]	; (800b254 <BSP_TS_GetState+0x158>)
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	8afa      	ldrh	r2, [r7, #22]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d903      	bls.n	800b1b8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800b1b0:	4b28      	ldr	r3, [pc, #160]	; (800b254 <BSP_TS_GetState+0x158>)
 800b1b2:	881b      	ldrh	r3, [r3, #0]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800b1b8:	8afb      	ldrh	r3, [r7, #22]
 800b1ba:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4b25      	ldr	r3, [pc, #148]	; (800b258 <BSP_TS_GetState+0x15c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d906      	bls.n	800b1d6 <BSP_TS_GetState+0xda>
 800b1c8:	89fa      	ldrh	r2, [r7, #14]
 800b1ca:	4b23      	ldr	r3, [pc, #140]	; (800b258 <BSP_TS_GetState+0x15c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	e005      	b.n	800b1e2 <BSP_TS_GetState+0xe6>
 800b1d6:	4b20      	ldr	r3, [pc, #128]	; (800b258 <BSP_TS_GetState+0x15c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	89fb      	ldrh	r3, [r7, #14]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800b1e4:	89bb      	ldrh	r3, [r7, #12]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4b1c      	ldr	r3, [pc, #112]	; (800b25c <BSP_TS_GetState+0x160>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d906      	bls.n	800b1fe <BSP_TS_GetState+0x102>
 800b1f0:	89ba      	ldrh	r2, [r7, #12]
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	; (800b25c <BSP_TS_GetState+0x160>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	e005      	b.n	800b20a <BSP_TS_GetState+0x10e>
 800b1fe:	4b17      	ldr	r3, [pc, #92]	; (800b25c <BSP_TS_GetState+0x160>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	b29a      	uxth	r2, r3
 800b204:	89bb      	ldrh	r3, [r7, #12]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	b29b      	uxth	r3, r3
 800b20a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800b20c:	8a7a      	ldrh	r2, [r7, #18]
 800b20e:	8a3b      	ldrh	r3, [r7, #16]
 800b210:	4413      	add	r3, r2
 800b212:	2b05      	cmp	r3, #5
 800b214:	dd07      	ble.n	800b226 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800b216:	89fb      	ldrh	r3, [r7, #14]
 800b218:	461a      	mov	r2, r3
 800b21a:	4b0f      	ldr	r3, [pc, #60]	; (800b258 <BSP_TS_GetState+0x15c>)
 800b21c:	601a      	str	r2, [r3, #0]
      _y = y; 
 800b21e:	89bb      	ldrh	r3, [r7, #12]
 800b220:	461a      	mov	r2, r3
 800b222:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <BSP_TS_GetState+0x160>)
 800b224:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <BSP_TS_GetState+0x15c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <BSP_TS_GetState+0x160>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	809a      	strh	r2, [r3, #4]
  }
}
 800b23a:	bf00      	nop
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20019fcc 	.word	0x20019fcc
 800b248:	ba2e8ba3 	.word	0xba2e8ba3
 800b24c:	20019fd2 	.word	0x20019fd2
 800b250:	88888889 	.word	0x88888889
 800b254:	20019fd0 	.word	0x20019fd0
 800b258:	20019fd4 	.word	0x20019fd4
 800b25c:	20019fd8 	.word	0x20019fd8

0800b260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <SystemInit+0x20>)
 800b266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b26a:	4a05      	ldr	r2, [pc, #20]	; (800b280 <SystemInit+0x20>)
 800b26c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000ed00 	.word	0xe000ed00

0800b284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b288:	4b0e      	ldr	r3, [pc, #56]	; (800b2c4 <HAL_Init+0x40>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a0d      	ldr	r2, [pc, #52]	; (800b2c4 <HAL_Init+0x40>)
 800b28e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b294:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <HAL_Init+0x40>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a0a      	ldr	r2, [pc, #40]	; (800b2c4 <HAL_Init+0x40>)
 800b29a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b29e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b2a0:	4b08      	ldr	r3, [pc, #32]	; (800b2c4 <HAL_Init+0x40>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a07      	ldr	r2, [pc, #28]	; (800b2c4 <HAL_Init+0x40>)
 800b2a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b2ac:	2003      	movs	r0, #3
 800b2ae:	f000 f8fc 	bl	800b4aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b2b2:	200f      	movs	r0, #15
 800b2b4:	f7fd fb86 	bl	80089c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b2b8:	f7fd fb5c 	bl	8008974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	40023c00 	.word	0x40023c00

0800b2c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <HAL_IncTick+0x20>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <HAL_IncTick+0x24>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	4a04      	ldr	r2, [pc, #16]	; (800b2ec <HAL_IncTick+0x24>)
 800b2da:	6013      	str	r3, [r2, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	200008c4 	.word	0x200008c4
 800b2ec:	20019fdc 	.word	0x20019fdc

0800b2f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	af00      	add	r7, sp, #0
  return uwTick;
 800b2f4:	4b03      	ldr	r3, [pc, #12]	; (800b304 <HAL_GetTick+0x14>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20019fdc 	.word	0x20019fdc

0800b308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b310:	f7ff ffee 	bl	800b2f0 <HAL_GetTick>
 800b314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d005      	beq.n	800b32e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <HAL_Delay+0x44>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b32e:	bf00      	nop
 800b330:	f7ff ffde 	bl	800b2f0 <HAL_GetTick>
 800b334:	4602      	mov	r2, r0
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	1ad3      	subs	r3, r2, r3
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d8f7      	bhi.n	800b330 <HAL_Delay+0x28>
  {
  }
}
 800b340:	bf00      	nop
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200008c4 	.word	0x200008c4

0800b350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f003 0307 	and.w	r3, r3, #7
 800b35e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b360:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <__NVIC_SetPriorityGrouping+0x44>)
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b36c:	4013      	ands	r3, r2
 800b36e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b37c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b382:	4a04      	ldr	r2, [pc, #16]	; (800b394 <__NVIC_SetPriorityGrouping+0x44>)
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	60d3      	str	r3, [r2, #12]
}
 800b388:	bf00      	nop
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	e000ed00 	.word	0xe000ed00

0800b398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b39c:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <__NVIC_GetPriorityGrouping+0x18>)
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	f003 0307 	and.w	r3, r3, #7
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	e000ed00 	.word	0xe000ed00

0800b3b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db0b      	blt.n	800b3de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	f003 021f 	and.w	r2, r3, #31
 800b3cc:	4907      	ldr	r1, [pc, #28]	; (800b3ec <__NVIC_EnableIRQ+0x38>)
 800b3ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d2:	095b      	lsrs	r3, r3, #5
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	fa00 f202 	lsl.w	r2, r0, r2
 800b3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b3de:	bf00      	nop
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	e000e100 	.word	0xe000e100

0800b3f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b400:	2b00      	cmp	r3, #0
 800b402:	db0a      	blt.n	800b41a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	b2da      	uxtb	r2, r3
 800b408:	490c      	ldr	r1, [pc, #48]	; (800b43c <__NVIC_SetPriority+0x4c>)
 800b40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b40e:	0112      	lsls	r2, r2, #4
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	440b      	add	r3, r1
 800b414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b418:	e00a      	b.n	800b430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	4908      	ldr	r1, [pc, #32]	; (800b440 <__NVIC_SetPriority+0x50>)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	f003 030f 	and.w	r3, r3, #15
 800b426:	3b04      	subs	r3, #4
 800b428:	0112      	lsls	r2, r2, #4
 800b42a:	b2d2      	uxtb	r2, r2
 800b42c:	440b      	add	r3, r1
 800b42e:	761a      	strb	r2, [r3, #24]
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	e000e100 	.word	0xe000e100
 800b440:	e000ed00 	.word	0xe000ed00

0800b444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b444:	b480      	push	{r7}
 800b446:	b089      	sub	sp, #36	; 0x24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	f1c3 0307 	rsb	r3, r3, #7
 800b45e:	2b04      	cmp	r3, #4
 800b460:	bf28      	it	cs
 800b462:	2304      	movcs	r3, #4
 800b464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	3304      	adds	r3, #4
 800b46a:	2b06      	cmp	r3, #6
 800b46c:	d902      	bls.n	800b474 <NVIC_EncodePriority+0x30>
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	3b03      	subs	r3, #3
 800b472:	e000      	b.n	800b476 <NVIC_EncodePriority+0x32>
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b478:	f04f 32ff 	mov.w	r2, #4294967295
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	fa02 f303 	lsl.w	r3, r2, r3
 800b482:	43da      	mvns	r2, r3
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	401a      	ands	r2, r3
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b48c:	f04f 31ff 	mov.w	r1, #4294967295
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	fa01 f303 	lsl.w	r3, r1, r3
 800b496:	43d9      	mvns	r1, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b49c:	4313      	orrs	r3, r2
         );
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3724      	adds	r7, #36	; 0x24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff ff4c 	bl	800b350 <__NVIC_SetPriorityGrouping>
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b4d2:	f7ff ff61 	bl	800b398 <__NVIC_GetPriorityGrouping>
 800b4d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	6978      	ldr	r0, [r7, #20]
 800b4de:	f7ff ffb1 	bl	800b444 <NVIC_EncodePriority>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ff80 	bl	800b3f0 <__NVIC_SetPriority>
}
 800b4f0:	bf00      	nop
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff ff54 	bl	800b3b4 <__NVIC_EnableIRQ>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e00e      	b.n	800b544 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	795b      	ldrb	r3, [r3, #5]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d105      	bne.n	800b53c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7fb feca 	bl	80072d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b554:	2300      	movs	r3, #0
 800b556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b558:	f7ff feca 	bl	800b2f0 <HAL_GetTick>
 800b55c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e099      	b.n	800b69c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0201 	bic.w	r2, r2, #1
 800b586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b588:	e00f      	b.n	800b5aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b58a:	f7ff feb1 	bl	800b2f0 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b05      	cmp	r3, #5
 800b596:	d908      	bls.n	800b5aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2203      	movs	r2, #3
 800b5a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e078      	b.n	800b69c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e8      	bne.n	800b58a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4b38      	ldr	r3, [pc, #224]	; (800b6a4 <HAL_DMA_Init+0x158>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	2b04      	cmp	r3, #4
 800b602:	d107      	bne.n	800b614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60c:	4313      	orrs	r3, r2
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d117      	bne.n	800b66e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4313      	orrs	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f8bd 	bl	800b7d0 <DMA_CheckFifoParam>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2240      	movs	r2, #64	; 0x40
 800b660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b66a:	2301      	movs	r3, #1
 800b66c:	e016      	b.n	800b69c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f874 	bl	800b764 <DMA_CalcBaseAndBitshift>
 800b67c:	4603      	mov	r3, r0
 800b67e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b684:	223f      	movs	r2, #63	; 0x3f
 800b686:	409a      	lsls	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	f010803f 	.word	0xf010803f

0800b6a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e050      	b.n	800b75c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d101      	bne.n	800b6ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	e048      	b.n	800b75c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 0201 	bic.w	r2, r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2200      	movs	r2, #0
 800b700:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2221      	movs	r2, #33	; 0x21
 800b708:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f82a 	bl	800b764 <DMA_CalcBaseAndBitshift>
 800b710:	4603      	mov	r3, r0
 800b712:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73c:	223f      	movs	r2, #63	; 0x3f
 800b73e:	409a      	lsls	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	b2db      	uxtb	r3, r3
 800b772:	3b10      	subs	r3, #16
 800b774:	4a14      	ldr	r2, [pc, #80]	; (800b7c8 <DMA_CalcBaseAndBitshift+0x64>)
 800b776:	fba2 2303 	umull	r2, r3, r2, r3
 800b77a:	091b      	lsrs	r3, r3, #4
 800b77c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b77e:	4a13      	ldr	r2, [pc, #76]	; (800b7cc <DMA_CalcBaseAndBitshift+0x68>)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4413      	add	r3, r2
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d909      	bls.n	800b7a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	1d1a      	adds	r2, r3, #4
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	659a      	str	r2, [r3, #88]	; 0x58
 800b7a4:	e007      	b.n	800b7b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	aaaaaaab 	.word	0xaaaaaaab
 800b7cc:	0814f5ec 	.word	0x0814f5ec

0800b7d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d11f      	bne.n	800b82a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d856      	bhi.n	800b89e <DMA_CheckFifoParam+0xce>
 800b7f0:	a201      	add	r2, pc, #4	; (adr r2, 800b7f8 <DMA_CheckFifoParam+0x28>)
 800b7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f6:	bf00      	nop
 800b7f8:	0800b809 	.word	0x0800b809
 800b7fc:	0800b81b 	.word	0x0800b81b
 800b800:	0800b809 	.word	0x0800b809
 800b804:	0800b89f 	.word	0x0800b89f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d046      	beq.n	800b8a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b818:	e043      	b.n	800b8a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b822:	d140      	bne.n	800b8a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b828:	e03d      	b.n	800b8a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b832:	d121      	bne.n	800b878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b03      	cmp	r3, #3
 800b838:	d837      	bhi.n	800b8aa <DMA_CheckFifoParam+0xda>
 800b83a:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <DMA_CheckFifoParam+0x70>)
 800b83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b840:	0800b851 	.word	0x0800b851
 800b844:	0800b857 	.word	0x0800b857
 800b848:	0800b851 	.word	0x0800b851
 800b84c:	0800b869 	.word	0x0800b869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
      break;
 800b854:	e030      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d025      	beq.n	800b8ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b866:	e022      	b.n	800b8ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b870:	d11f      	bne.n	800b8b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b876:	e01c      	b.n	800b8b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d903      	bls.n	800b886 <DMA_CheckFifoParam+0xb6>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d003      	beq.n	800b88c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b884:	e018      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	73fb      	strb	r3, [r7, #15]
      break;
 800b88a:	e015      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00e      	beq.n	800b8b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	73fb      	strb	r3, [r7, #15]
      break;
 800b89c:	e00b      	b.n	800b8b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b89e:	bf00      	nop
 800b8a0:	e00a      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;
 800b8a2:	bf00      	nop
 800b8a4:	e008      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;
 800b8a6:	bf00      	nop
 800b8a8:	e006      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;
 800b8aa:	bf00      	nop
 800b8ac:	e004      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;
 800b8ae:	bf00      	nop
 800b8b0:	e002      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;   
 800b8b2:	bf00      	nop
 800b8b4:	e000      	b.n	800b8b8 <DMA_CheckFifoParam+0xe8>
      break;
 800b8b6:	bf00      	nop
    }
  } 
  
  return status; 
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop

0800b8c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e03b      	b.n	800b952 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d106      	bne.n	800b8f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7fb fd42 	bl	8007378 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b918:	f023 0107 	bic.w	r1, r3, #7
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689a      	ldr	r2, [r3, #8]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b932:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68d1      	ldr	r1, [r2, #12]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	6812      	ldr	r2, [r2, #0]
 800b93e:	430b      	orrs	r3, r1
 800b940:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b086      	sub	sp, #24
 800b95e:	af02      	add	r7, sp, #8
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	60b9      	str	r1, [r7, #8]
 800b964:	607a      	str	r2, [r7, #4]
 800b966:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <HAL_DMA2D_Start+0x1c>
 800b972:	2302      	movs	r3, #2
 800b974:	e018      	b.n	800b9a8 <HAL_DMA2D_Start+0x4e>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2202      	movs	r2, #2
 800b982:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 f989 	bl	800bca8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f042 0201 	orr.w	r2, r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d056      	beq.n	800ba7a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9cc:	f7ff fc90 	bl	800b2f0 <HAL_GetTick>
 800b9d0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b9d2:	e04b      	b.n	800ba6c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d023      	beq.n	800ba2e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f003 0320 	and.w	r3, r3, #32
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f4:	f043 0202 	orr.w	r2, r3, #2
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0a:	f043 0201 	orr.w	r2, r3, #1
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2221      	movs	r2, #33	; 0x21
 800ba18:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2204      	movs	r2, #4
 800ba1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e0a5      	b.n	800bb7a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d01a      	beq.n	800ba6c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ba36:	f7ff fc5b 	bl	800b2f0 <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d302      	bcc.n	800ba4c <HAL_DMA2D_PollForTransfer+0x9c>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10f      	bne.n	800ba6c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba50:	f043 0220 	orr.w	r2, r3, #32
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800ba68:	2303      	movs	r3, #3
 800ba6a:	e086      	b.n	800bb7a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0ac      	beq.n	800b9d4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	69db      	ldr	r3, [r3, #28]
 800ba80:	f003 0320 	and.w	r3, r3, #32
 800ba84:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d061      	beq.n	800bb60 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba9c:	f7ff fc28 	bl	800b2f0 <HAL_GetTick>
 800baa0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800baa2:	e056      	b.n	800bb52 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d02e      	beq.n	800bb14 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f003 0308 	and.w	r3, r3, #8
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac4:	f043 0204 	orr.w	r2, r3, #4
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f003 0320 	and.w	r3, r3, #32
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d005      	beq.n	800bae2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bada:	f043 0202 	orr.w	r2, r3, #2
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf0:	f043 0201 	orr.w	r2, r3, #1
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2229      	movs	r2, #41	; 0x29
 800bafe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2204      	movs	r2, #4
 800bb04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e032      	b.n	800bb7a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1a:	d01a      	beq.n	800bb52 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb1c:	f7ff fbe8 	bl	800b2f0 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d302      	bcc.n	800bb32 <HAL_DMA2D_PollForTransfer+0x182>
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10f      	bne.n	800bb52 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	f043 0220 	orr.w	r2, r3, #32
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2203      	movs	r2, #3
 800bb42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e013      	b.n	800bb7a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0a1      	beq.n	800baa4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2212      	movs	r2, #18
 800bb66:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d101      	bne.n	800bba4 <HAL_DMA2D_ConfigLayer+0x20>
 800bba0:	2302      	movs	r3, #2
 800bba2:	e079      	b.n	800bc98 <HAL_DMA2D_ConfigLayer+0x114>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	011b      	lsls	r3, r3, #4
 800bbb8:	3318      	adds	r3, #24
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800bbce:	4b35      	ldr	r3, [pc, #212]	; (800bca4 <HAL_DMA2D_ConfigLayer+0x120>)
 800bbd0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	2b0a      	cmp	r3, #10
 800bbd8:	d003      	beq.n	800bbe2 <HAL_DMA2D_ConfigLayer+0x5e>
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	2b09      	cmp	r3, #9
 800bbe0:	d107      	bne.n	800bbf2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	617b      	str	r3, [r7, #20]
 800bbf0:	e005      	b.n	800bbfe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	061b      	lsls	r3, r3, #24
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d120      	bne.n	800bc46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	ea02 0103 	and.w	r1, r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	6812      	ldr	r2, [r2, #0]
 800bc24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	2b0a      	cmp	r3, #10
 800bc2c:	d003      	beq.n	800bc36 <HAL_DMA2D_ConfigLayer+0xb2>
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d127      	bne.n	800bc86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bc42:	629a      	str	r2, [r3, #40]	; 0x28
 800bc44:	e01f      	b.n	800bc86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69da      	ldr	r2, [r3, #28]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	43db      	mvns	r3, r3
 800bc50:	ea02 0103 	and.w	r1, r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	430a      	orrs	r2, r1
 800bc5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	6812      	ldr	r2, [r2, #0]
 800bc66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b0a      	cmp	r3, #10
 800bc6e:	d003      	beq.n	800bc78 <HAL_DMA2D_ConfigLayer+0xf4>
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d106      	bne.n	800bc86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	68da      	ldr	r2, [r3, #12]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bc84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	ff03000f 	.word	0xff03000f

0800bca8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b08b      	sub	sp, #44	; 0x2c
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcbc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	041a      	lsls	r2, r3, #16
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bce0:	d174      	bne.n	800bdcc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bce8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcf0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bcf8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d108      	bne.n	800bd1a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
 800bd18:	e053      	b.n	800bdc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d106      	bne.n	800bd30 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd2e:	e048      	b.n	800bdc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d111      	bne.n	800bd5c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	0cdb      	lsrs	r3, r3, #19
 800bd3c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	0a9b      	lsrs	r3, r3, #10
 800bd42:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	08db      	lsrs	r3, r3, #3
 800bd48:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	015a      	lsls	r2, r3, #5
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	02db      	lsls	r3, r3, #11
 800bd52:	4313      	orrs	r3, r2
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	627b      	str	r3, [r7, #36]	; 0x24
 800bd5a:	e032      	b.n	800bdc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d117      	bne.n	800bd94 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	0fdb      	lsrs	r3, r3, #31
 800bd68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	0cdb      	lsrs	r3, r3, #19
 800bd6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	0adb      	lsrs	r3, r3, #11
 800bd74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	08db      	lsrs	r3, r3, #3
 800bd7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	029b      	lsls	r3, r3, #10
 800bd84:	431a      	orrs	r2, r3
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	03db      	lsls	r3, r3, #15
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	627b      	str	r3, [r7, #36]	; 0x24
 800bd92:	e016      	b.n	800bdc2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	0f1b      	lsrs	r3, r3, #28
 800bd98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	0d1b      	lsrs	r3, r3, #20
 800bd9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	0b1b      	lsrs	r3, r3, #12
 800bda4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	091b      	lsrs	r3, r3, #4
 800bdaa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	011a      	lsls	r2, r3, #4
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	021b      	lsls	r3, r3, #8
 800bdb4:	431a      	orrs	r2, r3
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	031b      	lsls	r3, r3, #12
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	697a      	ldr	r2, [r7, #20]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800bdca:	e003      	b.n	800bdd4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	60da      	str	r2, [r3, #12]
}
 800bdd4:	bf00      	nop
 800bdd6:	372c      	adds	r7, #44	; 0x2c
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b089      	sub	sp, #36	; 0x24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
 800bdfa:	e177      	b.n	800c0ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	4013      	ands	r3, r2
 800be0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	429a      	cmp	r2, r3
 800be16:	f040 8166 	bne.w	800c0e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b01      	cmp	r3, #1
 800be24:	d005      	beq.n	800be32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d130      	bne.n	800be94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	2203      	movs	r2, #3
 800be3e:	fa02 f303 	lsl.w	r3, r2, r3
 800be42:	43db      	mvns	r3, r3
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	4013      	ands	r3, r2
 800be48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	fa02 f303 	lsl.w	r3, r2, r3
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	4313      	orrs	r3, r2
 800be5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be68:	2201      	movs	r2, #1
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	fa02 f303 	lsl.w	r3, r2, r3
 800be70:	43db      	mvns	r3, r3
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	4013      	ands	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	091b      	lsrs	r3, r3, #4
 800be7e:	f003 0201 	and.w	r2, r3, #1
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	fa02 f303 	lsl.w	r3, r2, r3
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f003 0303 	and.w	r3, r3, #3
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d017      	beq.n	800bed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	2203      	movs	r2, #3
 800beac:	fa02 f303 	lsl.w	r3, r2, r3
 800beb0:	43db      	mvns	r3, r3
 800beb2:	69ba      	ldr	r2, [r7, #24]
 800beb4:	4013      	ands	r3, r2
 800beb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	fa02 f303 	lsl.w	r3, r2, r3
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f003 0303 	and.w	r3, r3, #3
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d123      	bne.n	800bf24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	08da      	lsrs	r2, r3, #3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3208      	adds	r2, #8
 800bee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	f003 0307 	and.w	r3, r3, #7
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	220f      	movs	r2, #15
 800bef4:	fa02 f303 	lsl.w	r3, r2, r3
 800bef8:	43db      	mvns	r3, r3
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	4013      	ands	r3, r2
 800befe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	691a      	ldr	r2, [r3, #16]
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	08da      	lsrs	r2, r3, #3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3208      	adds	r2, #8
 800bf1e:	69b9      	ldr	r1, [r7, #24]
 800bf20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	2203      	movs	r2, #3
 800bf30:	fa02 f303 	lsl.w	r3, r2, r3
 800bf34:	43db      	mvns	r3, r3
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	f003 0203 	and.w	r2, r3, #3
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 80c0 	beq.w	800c0e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf66:	2300      	movs	r3, #0
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	4b66      	ldr	r3, [pc, #408]	; (800c104 <HAL_GPIO_Init+0x324>)
 800bf6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6e:	4a65      	ldr	r2, [pc, #404]	; (800c104 <HAL_GPIO_Init+0x324>)
 800bf70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf74:	6453      	str	r3, [r2, #68]	; 0x44
 800bf76:	4b63      	ldr	r3, [pc, #396]	; (800c104 <HAL_GPIO_Init+0x324>)
 800bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bf82:	4a61      	ldr	r2, [pc, #388]	; (800c108 <HAL_GPIO_Init+0x328>)
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	089b      	lsrs	r3, r3, #2
 800bf88:	3302      	adds	r3, #2
 800bf8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	220f      	movs	r2, #15
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	43db      	mvns	r3, r3
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a58      	ldr	r2, [pc, #352]	; (800c10c <HAL_GPIO_Init+0x32c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d037      	beq.n	800c01e <HAL_GPIO_Init+0x23e>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a57      	ldr	r2, [pc, #348]	; (800c110 <HAL_GPIO_Init+0x330>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d031      	beq.n	800c01a <HAL_GPIO_Init+0x23a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a56      	ldr	r2, [pc, #344]	; (800c114 <HAL_GPIO_Init+0x334>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d02b      	beq.n	800c016 <HAL_GPIO_Init+0x236>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a55      	ldr	r2, [pc, #340]	; (800c118 <HAL_GPIO_Init+0x338>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d025      	beq.n	800c012 <HAL_GPIO_Init+0x232>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a54      	ldr	r2, [pc, #336]	; (800c11c <HAL_GPIO_Init+0x33c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d01f      	beq.n	800c00e <HAL_GPIO_Init+0x22e>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a53      	ldr	r2, [pc, #332]	; (800c120 <HAL_GPIO_Init+0x340>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d019      	beq.n	800c00a <HAL_GPIO_Init+0x22a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a52      	ldr	r2, [pc, #328]	; (800c124 <HAL_GPIO_Init+0x344>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d013      	beq.n	800c006 <HAL_GPIO_Init+0x226>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a51      	ldr	r2, [pc, #324]	; (800c128 <HAL_GPIO_Init+0x348>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d00d      	beq.n	800c002 <HAL_GPIO_Init+0x222>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a50      	ldr	r2, [pc, #320]	; (800c12c <HAL_GPIO_Init+0x34c>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d007      	beq.n	800bffe <HAL_GPIO_Init+0x21e>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a4f      	ldr	r2, [pc, #316]	; (800c130 <HAL_GPIO_Init+0x350>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d101      	bne.n	800bffa <HAL_GPIO_Init+0x21a>
 800bff6:	2309      	movs	r3, #9
 800bff8:	e012      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800bffa:	230a      	movs	r3, #10
 800bffc:	e010      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800bffe:	2308      	movs	r3, #8
 800c000:	e00e      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c002:	2307      	movs	r3, #7
 800c004:	e00c      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c006:	2306      	movs	r3, #6
 800c008:	e00a      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c00a:	2305      	movs	r3, #5
 800c00c:	e008      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c00e:	2304      	movs	r3, #4
 800c010:	e006      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c012:	2303      	movs	r3, #3
 800c014:	e004      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c016:	2302      	movs	r3, #2
 800c018:	e002      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c01a:	2301      	movs	r3, #1
 800c01c:	e000      	b.n	800c020 <HAL_GPIO_Init+0x240>
 800c01e:	2300      	movs	r3, #0
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	f002 0203 	and.w	r2, r2, #3
 800c026:	0092      	lsls	r2, r2, #2
 800c028:	4093      	lsls	r3, r2
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c030:	4935      	ldr	r1, [pc, #212]	; (800c108 <HAL_GPIO_Init+0x328>)
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	089b      	lsrs	r3, r3, #2
 800c036:	3302      	adds	r3, #2
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c03e:	4b3d      	ldr	r3, [pc, #244]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	43db      	mvns	r3, r3
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	4013      	ands	r3, r2
 800c04c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	4313      	orrs	r3, r2
 800c060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c062:	4a34      	ldr	r2, [pc, #208]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c068:	4b32      	ldr	r3, [pc, #200]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	43db      	mvns	r3, r3
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	4013      	ands	r3, r2
 800c076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d003      	beq.n	800c08c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	4313      	orrs	r3, r2
 800c08a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c08c:	4a29      	ldr	r2, [pc, #164]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c092:	4b28      	ldr	r3, [pc, #160]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	43db      	mvns	r3, r3
 800c09c:	69ba      	ldr	r2, [r7, #24]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c0b6:	4a1f      	ldr	r2, [pc, #124]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c0bc:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	43db      	mvns	r3, r3
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c0e0:	4a14      	ldr	r2, [pc, #80]	; (800c134 <HAL_GPIO_Init+0x354>)
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	61fb      	str	r3, [r7, #28]
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	2b0f      	cmp	r3, #15
 800c0f0:	f67f ae84 	bls.w	800bdfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	3724      	adds	r7, #36	; 0x24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	40023800 	.word	0x40023800
 800c108:	40013800 	.word	0x40013800
 800c10c:	40020000 	.word	0x40020000
 800c110:	40020400 	.word	0x40020400
 800c114:	40020800 	.word	0x40020800
 800c118:	40020c00 	.word	0x40020c00
 800c11c:	40021000 	.word	0x40021000
 800c120:	40021400 	.word	0x40021400
 800c124:	40021800 	.word	0x40021800
 800c128:	40021c00 	.word	0x40021c00
 800c12c:	40022000 	.word	0x40022000
 800c130:	40022400 	.word	0x40022400
 800c134:	40013c00 	.word	0x40013c00

0800c138 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c142:	2300      	movs	r3, #0
 800c144:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]
 800c152:	e0d9      	b.n	800c308 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c154:	2201      	movs	r2, #1
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	fa02 f303 	lsl.w	r3, r2, r3
 800c15c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	4013      	ands	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	f040 80c9 	bne.w	800c302 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c170:	4a6b      	ldr	r2, [pc, #428]	; (800c320 <HAL_GPIO_DeInit+0x1e8>)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	089b      	lsrs	r3, r3, #2
 800c176:	3302      	adds	r3, #2
 800c178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c17c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	220f      	movs	r2, #15
 800c188:	fa02 f303 	lsl.w	r3, r2, r3
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	4013      	ands	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a63      	ldr	r2, [pc, #396]	; (800c324 <HAL_GPIO_DeInit+0x1ec>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d037      	beq.n	800c20a <HAL_GPIO_DeInit+0xd2>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a62      	ldr	r2, [pc, #392]	; (800c328 <HAL_GPIO_DeInit+0x1f0>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d031      	beq.n	800c206 <HAL_GPIO_DeInit+0xce>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a61      	ldr	r2, [pc, #388]	; (800c32c <HAL_GPIO_DeInit+0x1f4>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d02b      	beq.n	800c202 <HAL_GPIO_DeInit+0xca>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a60      	ldr	r2, [pc, #384]	; (800c330 <HAL_GPIO_DeInit+0x1f8>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d025      	beq.n	800c1fe <HAL_GPIO_DeInit+0xc6>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a5f      	ldr	r2, [pc, #380]	; (800c334 <HAL_GPIO_DeInit+0x1fc>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d01f      	beq.n	800c1fa <HAL_GPIO_DeInit+0xc2>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a5e      	ldr	r2, [pc, #376]	; (800c338 <HAL_GPIO_DeInit+0x200>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d019      	beq.n	800c1f6 <HAL_GPIO_DeInit+0xbe>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a5d      	ldr	r2, [pc, #372]	; (800c33c <HAL_GPIO_DeInit+0x204>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d013      	beq.n	800c1f2 <HAL_GPIO_DeInit+0xba>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a5c      	ldr	r2, [pc, #368]	; (800c340 <HAL_GPIO_DeInit+0x208>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d00d      	beq.n	800c1ee <HAL_GPIO_DeInit+0xb6>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a5b      	ldr	r2, [pc, #364]	; (800c344 <HAL_GPIO_DeInit+0x20c>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d007      	beq.n	800c1ea <HAL_GPIO_DeInit+0xb2>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a5a      	ldr	r2, [pc, #360]	; (800c348 <HAL_GPIO_DeInit+0x210>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d101      	bne.n	800c1e6 <HAL_GPIO_DeInit+0xae>
 800c1e2:	2309      	movs	r3, #9
 800c1e4:	e012      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1e6:	230a      	movs	r3, #10
 800c1e8:	e010      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1ea:	2308      	movs	r3, #8
 800c1ec:	e00e      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1ee:	2307      	movs	r3, #7
 800c1f0:	e00c      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1f2:	2306      	movs	r3, #6
 800c1f4:	e00a      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1f6:	2305      	movs	r3, #5
 800c1f8:	e008      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1fa:	2304      	movs	r3, #4
 800c1fc:	e006      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c1fe:	2303      	movs	r3, #3
 800c200:	e004      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c202:	2302      	movs	r3, #2
 800c204:	e002      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c206:	2301      	movs	r3, #1
 800c208:	e000      	b.n	800c20c <HAL_GPIO_DeInit+0xd4>
 800c20a:	2300      	movs	r3, #0
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	f002 0203 	and.w	r2, r2, #3
 800c212:	0092      	lsls	r2, r2, #2
 800c214:	4093      	lsls	r3, r2
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d132      	bne.n	800c282 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c21c:	4b4b      	ldr	r3, [pc, #300]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	43db      	mvns	r3, r3
 800c224:	4949      	ldr	r1, [pc, #292]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c226:	4013      	ands	r3, r2
 800c228:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c22a:	4b48      	ldr	r3, [pc, #288]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	43db      	mvns	r3, r3
 800c232:	4946      	ldr	r1, [pc, #280]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c234:	4013      	ands	r3, r2
 800c236:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c238:	4b44      	ldr	r3, [pc, #272]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c23a:	68da      	ldr	r2, [r3, #12]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	43db      	mvns	r3, r3
 800c240:	4942      	ldr	r1, [pc, #264]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c242:	4013      	ands	r3, r2
 800c244:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c246:	4b41      	ldr	r3, [pc, #260]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c248:	689a      	ldr	r2, [r3, #8]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	43db      	mvns	r3, r3
 800c24e:	493f      	ldr	r1, [pc, #252]	; (800c34c <HAL_GPIO_DeInit+0x214>)
 800c250:	4013      	ands	r3, r2
 800c252:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f003 0303 	and.w	r3, r3, #3
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	220f      	movs	r2, #15
 800c25e:	fa02 f303 	lsl.w	r3, r2, r3
 800c262:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c264:	4a2e      	ldr	r2, [pc, #184]	; (800c320 <HAL_GPIO_DeInit+0x1e8>)
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	089b      	lsrs	r3, r3, #2
 800c26a:	3302      	adds	r3, #2
 800c26c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	43da      	mvns	r2, r3
 800c274:	482a      	ldr	r0, [pc, #168]	; (800c320 <HAL_GPIO_DeInit+0x1e8>)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	089b      	lsrs	r3, r3, #2
 800c27a:	400a      	ands	r2, r1
 800c27c:	3302      	adds	r3, #2
 800c27e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	005b      	lsls	r3, r3, #1
 800c28a:	2103      	movs	r1, #3
 800c28c:	fa01 f303 	lsl.w	r3, r1, r3
 800c290:	43db      	mvns	r3, r3
 800c292:	401a      	ands	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	08da      	lsrs	r2, r3, #3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3208      	adds	r2, #8
 800c2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	220f      	movs	r2, #15
 800c2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b2:	43db      	mvns	r3, r3
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	08d2      	lsrs	r2, r2, #3
 800c2b8:	4019      	ands	r1, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3208      	adds	r2, #8
 800c2be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	2103      	movs	r1, #3
 800c2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2d0:	43db      	mvns	r3, r3
 800c2d2:	401a      	ands	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	2101      	movs	r1, #1
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2e4:	43db      	mvns	r3, r3
 800c2e6:	401a      	ands	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	2103      	movs	r1, #3
 800c2f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2fa:	43db      	mvns	r3, r3
 800c2fc:	401a      	ands	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	3301      	adds	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2b0f      	cmp	r3, #15
 800c30c:	f67f af22 	bls.w	800c154 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	40013800 	.word	0x40013800
 800c324:	40020000 	.word	0x40020000
 800c328:	40020400 	.word	0x40020400
 800c32c:	40020800 	.word	0x40020800
 800c330:	40020c00 	.word	0x40020c00
 800c334:	40021000 	.word	0x40021000
 800c338:	40021400 	.word	0x40021400
 800c33c:	40021800 	.word	0x40021800
 800c340:	40021c00 	.word	0x40021c00
 800c344:	40022000 	.word	0x40022000
 800c348:	40022400 	.word	0x40022400
 800c34c:	40013c00 	.word	0x40013c00

0800c350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	691a      	ldr	r2, [r3, #16]
 800c360:	887b      	ldrh	r3, [r7, #2]
 800c362:	4013      	ands	r3, r2
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c368:	2301      	movs	r3, #1
 800c36a:	73fb      	strb	r3, [r7, #15]
 800c36c:	e001      	b.n	800c372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c372:	7bfb      	ldrb	r3, [r7, #15]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	807b      	strh	r3, [r7, #2]
 800c38c:	4613      	mov	r3, r2
 800c38e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c390:	787b      	ldrb	r3, [r7, #1]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c396:	887a      	ldrh	r2, [r7, #2]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c39c:	e003      	b.n	800c3a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c39e:	887b      	ldrh	r3, [r7, #2]
 800c3a0:	041a      	lsls	r2, r3, #16
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	619a      	str	r2, [r3, #24]
}
 800c3a6:	bf00      	nop
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e12b      	b.n	800c61e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f7fb fa48 	bl	8007870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2224      	movs	r2, #36	; 0x24
 800c3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f022 0201 	bic.w	r2, r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c418:	f002 f802 	bl	800e420 <HAL_RCC_GetPCLK1Freq>
 800c41c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4a81      	ldr	r2, [pc, #516]	; (800c628 <HAL_I2C_Init+0x274>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d807      	bhi.n	800c438 <HAL_I2C_Init+0x84>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4a80      	ldr	r2, [pc, #512]	; (800c62c <HAL_I2C_Init+0x278>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	bf94      	ite	ls
 800c430:	2301      	movls	r3, #1
 800c432:	2300      	movhi	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	e006      	b.n	800c446 <HAL_I2C_Init+0x92>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4a7d      	ldr	r2, [pc, #500]	; (800c630 <HAL_I2C_Init+0x27c>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	bf94      	ite	ls
 800c440:	2301      	movls	r3, #1
 800c442:	2300      	movhi	r3, #0
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e0e7      	b.n	800c61e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4a78      	ldr	r2, [pc, #480]	; (800c634 <HAL_I2C_Init+0x280>)
 800c452:	fba2 2303 	umull	r2, r3, r2, r3
 800c456:	0c9b      	lsrs	r3, r3, #18
 800c458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6a1b      	ldr	r3, [r3, #32]
 800c474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	4a6a      	ldr	r2, [pc, #424]	; (800c628 <HAL_I2C_Init+0x274>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d802      	bhi.n	800c488 <HAL_I2C_Init+0xd4>
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	3301      	adds	r3, #1
 800c486:	e009      	b.n	800c49c <HAL_I2C_Init+0xe8>
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c48e:	fb02 f303 	mul.w	r3, r2, r3
 800c492:	4a69      	ldr	r2, [pc, #420]	; (800c638 <HAL_I2C_Init+0x284>)
 800c494:	fba2 2303 	umull	r2, r3, r2, r3
 800c498:	099b      	lsrs	r3, r3, #6
 800c49a:	3301      	adds	r3, #1
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	430b      	orrs	r3, r1
 800c4a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c4ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	495c      	ldr	r1, [pc, #368]	; (800c628 <HAL_I2C_Init+0x274>)
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	d819      	bhi.n	800c4f0 <HAL_I2C_Init+0x13c>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	1e59      	subs	r1, r3, #1
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4ca:	1c59      	adds	r1, r3, #1
 800c4cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c4d0:	400b      	ands	r3, r1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <HAL_I2C_Init+0x138>
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1e59      	subs	r1, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4ea:	e051      	b.n	800c590 <HAL_I2C_Init+0x1dc>
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	e04f      	b.n	800c590 <HAL_I2C_Init+0x1dc>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d111      	bne.n	800c51c <HAL_I2C_Init+0x168>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	1e58      	subs	r0, r3, #1
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6859      	ldr	r1, [r3, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	440b      	add	r3, r1
 800c506:	fbb0 f3f3 	udiv	r3, r0, r3
 800c50a:	3301      	adds	r3, #1
 800c50c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c510:	2b00      	cmp	r3, #0
 800c512:	bf0c      	ite	eq
 800c514:	2301      	moveq	r3, #1
 800c516:	2300      	movne	r3, #0
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	e012      	b.n	800c542 <HAL_I2C_Init+0x18e>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	1e58      	subs	r0, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6859      	ldr	r1, [r3, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	440b      	add	r3, r1
 800c52a:	0099      	lsls	r1, r3, #2
 800c52c:	440b      	add	r3, r1
 800c52e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c532:	3301      	adds	r3, #1
 800c534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c538:	2b00      	cmp	r3, #0
 800c53a:	bf0c      	ite	eq
 800c53c:	2301      	moveq	r3, #1
 800c53e:	2300      	movne	r3, #0
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <HAL_I2C_Init+0x196>
 800c546:	2301      	movs	r3, #1
 800c548:	e022      	b.n	800c590 <HAL_I2C_Init+0x1dc>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10e      	bne.n	800c570 <HAL_I2C_Init+0x1bc>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1e58      	subs	r0, r3, #1
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6859      	ldr	r1, [r3, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	440b      	add	r3, r1
 800c560:	fbb0 f3f3 	udiv	r3, r0, r3
 800c564:	3301      	adds	r3, #1
 800c566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c56e:	e00f      	b.n	800c590 <HAL_I2C_Init+0x1dc>
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	1e58      	subs	r0, r3, #1
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6859      	ldr	r1, [r3, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	440b      	add	r3, r1
 800c57e:	0099      	lsls	r1, r3, #2
 800c580:	440b      	add	r3, r1
 800c582:	fbb0 f3f3 	udiv	r3, r0, r3
 800c586:	3301      	adds	r3, #1
 800c588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c58c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	6809      	ldr	r1, [r1, #0]
 800c594:	4313      	orrs	r3, r2
 800c596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	69da      	ldr	r2, [r3, #28]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c5be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	6911      	ldr	r1, [r2, #16]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	68d2      	ldr	r2, [r2, #12]
 800c5ca:	4311      	orrs	r1, r2
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	6812      	ldr	r2, [r2, #0]
 800c5d0:	430b      	orrs	r3, r1
 800c5d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	695a      	ldr	r2, [r3, #20]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f042 0201 	orr.w	r2, r2, #1
 800c5fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2220      	movs	r2, #32
 800c60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	000186a0 	.word	0x000186a0
 800c62c:	001e847f 	.word	0x001e847f
 800c630:	003d08ff 	.word	0x003d08ff
 800c634:	431bde83 	.word	0x431bde83
 800c638:	10624dd3 	.word	0x10624dd3

0800c63c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e021      	b.n	800c692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2224      	movs	r2, #36	; 0x24
 800c652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0201 	bic.w	r2, r2, #1
 800c664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7fb f96c 	bl	8007944 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	4611      	mov	r1, r2
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	817b      	strh	r3, [r7, #10]
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	813b      	strh	r3, [r7, #8]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c6b6:	f7fe fe1b 	bl	800b2f0 <HAL_GetTick>
 800c6ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b20      	cmp	r3, #32
 800c6c6:	f040 80d9 	bne.w	800c87c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	2319      	movs	r3, #25
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	496d      	ldr	r1, [pc, #436]	; (800c888 <HAL_I2C_Mem_Write+0x1ec>)
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 fc8d 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	e0cc      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d101      	bne.n	800c6f2 <HAL_I2C_Mem_Write+0x56>
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	e0c5      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b01      	cmp	r3, #1
 800c706:	d007      	beq.n	800c718 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0201 	orr.w	r2, r2, #1
 800c716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2221      	movs	r2, #33	; 0x21
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2240      	movs	r2, #64	; 0x40
 800c734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6a3a      	ldr	r2, [r7, #32]
 800c742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c74e:	b29a      	uxth	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	4a4d      	ldr	r2, [pc, #308]	; (800c88c <HAL_I2C_Mem_Write+0x1f0>)
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c75a:	88f8      	ldrh	r0, [r7, #6]
 800c75c:	893a      	ldrh	r2, [r7, #8]
 800c75e:	8979      	ldrh	r1, [r7, #10]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	9301      	str	r3, [sp, #4]
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	4603      	mov	r3, r0
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f000 fac4 	bl	800ccf8 <I2C_RequestMemoryWrite>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d052      	beq.n	800c81c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e081      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f000 fd0e 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00d      	beq.n	800c7a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d107      	bne.n	800c7a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e06b      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b6:	1c5a      	adds	r2, r3, #1
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	f003 0304 	and.w	r3, r3, #4
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d11b      	bne.n	800c81c <HAL_I2C_Mem_Write+0x180>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d017      	beq.n	800c81c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	781a      	ldrb	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	1c5a      	adds	r2, r3, #1
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c806:	3b01      	subs	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c812:	b29b      	uxth	r3, r3
 800c814:	3b01      	subs	r3, #1
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1aa      	bne.n	800c77a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f000 fcfa 	bl	800d222 <I2C_WaitOnBTFFlagUntilTimeout>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00d      	beq.n	800c850 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c838:	2b04      	cmp	r3, #4
 800c83a:	d107      	bne.n	800c84c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c84a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	e016      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c85e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2220      	movs	r2, #32
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	e000      	b.n	800c87e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c87c:	2302      	movs	r3, #2
  }
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	00100002 	.word	0x00100002
 800c88c:	ffff0000 	.word	0xffff0000

0800c890 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08c      	sub	sp, #48	; 0x30
 800c894:	af02      	add	r7, sp, #8
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	4608      	mov	r0, r1
 800c89a:	4611      	mov	r1, r2
 800c89c:	461a      	mov	r2, r3
 800c89e:	4603      	mov	r3, r0
 800c8a0:	817b      	strh	r3, [r7, #10]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	813b      	strh	r3, [r7, #8]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c8aa:	f7fe fd21 	bl	800b2f0 <HAL_GetTick>
 800c8ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b20      	cmp	r3, #32
 800c8ba:	f040 8208 	bne.w	800ccce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	2319      	movs	r3, #25
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	497b      	ldr	r1, [pc, #492]	; (800cab4 <HAL_I2C_Mem_Read+0x224>)
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 fb93 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e1fb      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d101      	bne.n	800c8e6 <HAL_I2C_Mem_Read+0x56>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e1f4      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d007      	beq.n	800c90c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f042 0201 	orr.w	r2, r2, #1
 800c90a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c91a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2222      	movs	r2, #34	; 0x22
 800c920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2240      	movs	r2, #64	; 0x40
 800c928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c93c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c942:	b29a      	uxth	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4a5b      	ldr	r2, [pc, #364]	; (800cab8 <HAL_I2C_Mem_Read+0x228>)
 800c94c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c94e:	88f8      	ldrh	r0, [r7, #6]
 800c950:	893a      	ldrh	r2, [r7, #8]
 800c952:	8979      	ldrh	r1, [r7, #10]
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	4603      	mov	r3, r0
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f000 fa60 	bl	800ce24 <I2C_RequestMemoryRead>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e1b0      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c972:	2b00      	cmp	r3, #0
 800c974:	d113      	bne.n	800c99e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c976:	2300      	movs	r3, #0
 800c978:	623b      	str	r3, [r7, #32]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	623b      	str	r3, [r7, #32]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	623b      	str	r3, [r7, #32]
 800c98a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	e184      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d11b      	bne.n	800c9de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61fb      	str	r3, [r7, #28]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	61fb      	str	r3, [r7, #28]
 800c9ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	e164      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d11b      	bne.n	800ca1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca06:	2300      	movs	r3, #0
 800ca08:	61bb      	str	r3, [r7, #24]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	61bb      	str	r3, [r7, #24]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	61bb      	str	r3, [r7, #24]
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	e144      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	695b      	ldr	r3, [r3, #20]
 800ca28:	617b      	str	r3, [r7, #20]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	617b      	str	r3, [r7, #20]
 800ca32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ca34:	e138      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	f200 80f1 	bhi.w	800cc22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d123      	bne.n	800ca90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 fc29 	bl	800d2a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e139      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	691a      	ldr	r2, [r3, #16]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca66:	b2d2      	uxtb	r2, r2
 800ca68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca8e:	e10b      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d14e      	bne.n	800cb36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4906      	ldr	r1, [pc, #24]	; (800cabc <HAL_I2C_Mem_Read+0x22c>)
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 faa6 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d008      	beq.n	800cac0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e10e      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
 800cab2:	bf00      	nop
 800cab4:	00100002 	.word	0x00100002
 800cab8:	ffff0000 	.word	0xffff0000
 800cabc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cada:	b2d2      	uxtb	r2, r2
 800cadc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caec:	3b01      	subs	r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	691a      	ldr	r2, [r3, #16]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	b2d2      	uxtb	r2, r2
 800cb0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb34:	e0b8      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4966      	ldr	r1, [pc, #408]	; (800ccd8 <HAL_I2C_Mem_Read+0x448>)
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f000 fa57 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e0bf      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	691a      	ldr	r2, [r3, #16]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	b2d2      	uxtb	r2, r2
 800cb6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	2200      	movs	r2, #0
 800cb9a:	494f      	ldr	r1, [pc, #316]	; (800ccd8 <HAL_I2C_Mem_Read+0x448>)
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f000 fa29 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e091      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	691a      	ldr	r2, [r3, #16]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	691a      	ldr	r2, [r3, #16]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	b2d2      	uxtb	r2, r2
 800cbfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc20:	e042      	b.n	800cca8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f000 fb3c 	bl	800d2a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e04c      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	691a      	ldr	r2, [r3, #16]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	b2d2      	uxtb	r2, r2
 800cc42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc52:	3b01      	subs	r3, #1
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	3b01      	subs	r3, #1
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	f003 0304 	and.w	r3, r3, #4
 800cc72:	2b04      	cmp	r3, #4
 800cc74:	d118      	bne.n	800cca8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc88:	1c5a      	adds	r2, r3, #1
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	3b01      	subs	r3, #1
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f47f aec2 	bne.w	800ca36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e000      	b.n	800ccd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ccce:	2302      	movs	r3, #2
  }
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3728      	adds	r7, #40	; 0x28
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	00010004 	.word	0x00010004

0800ccdc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccea:	b2db      	uxtb	r3, r3
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	4608      	mov	r0, r1
 800cd02:	4611      	mov	r1, r2
 800cd04:	461a      	mov	r2, r3
 800cd06:	4603      	mov	r3, r0
 800cd08:	817b      	strh	r3, [r7, #10]
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	813b      	strh	r3, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 f960 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00d      	beq.n	800cd56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd48:	d103      	bne.n	800cd52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cd52:	2303      	movs	r3, #3
 800cd54:	e05f      	b.n	800ce16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cd56:	897b      	ldrh	r3, [r7, #10]
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cd64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	6a3a      	ldr	r2, [r7, #32]
 800cd6a:	492d      	ldr	r1, [pc, #180]	; (800ce20 <I2C_RequestMemoryWrite+0x128>)
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 f998 	bl	800d0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e04c      	b.n	800ce16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	617b      	str	r3, [r7, #20]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd94:	6a39      	ldr	r1, [r7, #32]
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 fa02 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00d      	beq.n	800cdbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d107      	bne.n	800cdba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e02b      	b.n	800ce16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cdbe:	88fb      	ldrh	r3, [r7, #6]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d105      	bne.n	800cdd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cdc4:	893b      	ldrh	r3, [r7, #8]
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	611a      	str	r2, [r3, #16]
 800cdce:	e021      	b.n	800ce14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cdd0:	893b      	ldrh	r3, [r7, #8]
 800cdd2:	0a1b      	lsrs	r3, r3, #8
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cdde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde0:	6a39      	ldr	r1, [r7, #32]
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 f9dc 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d107      	bne.n	800ce06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e005      	b.n	800ce16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ce0a:	893b      	ldrh	r3, [r7, #8]
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	00010002 	.word	0x00010002

0800ce24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b088      	sub	sp, #32
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	4611      	mov	r1, r2
 800ce30:	461a      	mov	r2, r3
 800ce32:	4603      	mov	r3, r0
 800ce34:	817b      	strh	r3, [r7, #10]
 800ce36:	460b      	mov	r3, r1
 800ce38:	813b      	strh	r3, [r7, #8]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 f8c2 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00d      	beq.n	800ce92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce84:	d103      	bne.n	800ce8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	e0aa      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ce92:	897b      	ldrh	r3, [r7, #10]
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	6a3a      	ldr	r2, [r7, #32]
 800cea6:	4952      	ldr	r1, [pc, #328]	; (800cff0 <I2C_RequestMemoryRead+0x1cc>)
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 f8fa 	bl	800d0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e097      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ceb8:	2300      	movs	r3, #0
 800ceba:	617b      	str	r3, [r7, #20]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced0:	6a39      	ldr	r1, [r7, #32]
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f000 f964 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00d      	beq.n	800cefa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d107      	bne.n	800cef6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	e076      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cefa:	88fb      	ldrh	r3, [r7, #6]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d105      	bne.n	800cf0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf00:	893b      	ldrh	r3, [r7, #8]
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	611a      	str	r2, [r3, #16]
 800cf0a:	e021      	b.n	800cf50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cf0c:	893b      	ldrh	r3, [r7, #8]
 800cf0e:	0a1b      	lsrs	r3, r3, #8
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf1c:	6a39      	ldr	r1, [r7, #32]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 f93e 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00d      	beq.n	800cf46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2e:	2b04      	cmp	r3, #4
 800cf30:	d107      	bne.n	800cf42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	e050      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf46:	893b      	ldrh	r3, [r7, #8]
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf52:	6a39      	ldr	r1, [r7, #32]
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f923 	bl	800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00d      	beq.n	800cf7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d107      	bne.n	800cf78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e035      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 f82b 	bl	800cff4 <I2C_WaitOnFlagUntilTimeout>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00d      	beq.n	800cfc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb2:	d103      	bne.n	800cfbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cfbc:	2303      	movs	r3, #3
 800cfbe:	e013      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cfc0:	897b      	ldrh	r3, [r7, #10]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	f043 0301 	orr.w	r3, r3, #1
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd2:	6a3a      	ldr	r2, [r7, #32]
 800cfd4:	4906      	ldr	r1, [pc, #24]	; (800cff0 <I2C_RequestMemoryRead+0x1cc>)
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 f863 	bl	800d0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3718      	adds	r7, #24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	00010002 	.word	0x00010002

0800cff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	4613      	mov	r3, r2
 800d002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d004:	e025      	b.n	800d052 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00c:	d021      	beq.n	800d052 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d00e:	f7fe f96f 	bl	800b2f0 <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d302      	bcc.n	800d024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d116      	bne.n	800d052 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2220      	movs	r2, #32
 800d02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03e:	f043 0220 	orr.w	r2, r3, #32
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	e023      	b.n	800d09a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	0c1b      	lsrs	r3, r3, #16
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d10d      	bne.n	800d078 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	695b      	ldr	r3, [r3, #20]
 800d062:	43da      	mvns	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	4013      	ands	r3, r2
 800d068:	b29b      	uxth	r3, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bf0c      	ite	eq
 800d06e:	2301      	moveq	r3, #1
 800d070:	2300      	movne	r3, #0
 800d072:	b2db      	uxtb	r3, r3
 800d074:	461a      	mov	r2, r3
 800d076:	e00c      	b.n	800d092 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	43da      	mvns	r2, r3
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	4013      	ands	r3, r2
 800d084:	b29b      	uxth	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	bf0c      	ite	eq
 800d08a:	2301      	moveq	r3, #1
 800d08c:	2300      	movne	r3, #0
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	429a      	cmp	r2, r3
 800d096:	d0b6      	beq.n	800d006 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	607a      	str	r2, [r7, #4]
 800d0ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d0b0:	e051      	b.n	800d156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0c0:	d123      	bne.n	800d10a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d0da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2220      	movs	r2, #32
 800d0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f6:	f043 0204 	orr.w	r2, r3, #4
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e046      	b.n	800d198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d110:	d021      	beq.n	800d156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d112:	f7fe f8ed 	bl	800b2f0 <HAL_GetTick>
 800d116:	4602      	mov	r2, r0
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d302      	bcc.n	800d128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d116      	bne.n	800d156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2220      	movs	r2, #32
 800d132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d142:	f043 0220 	orr.w	r2, r3, #32
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e020      	b.n	800d198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	0c1b      	lsrs	r3, r3, #16
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d10c      	bne.n	800d17a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	43da      	mvns	r2, r3
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	4013      	ands	r3, r2
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bf14      	ite	ne
 800d172:	2301      	movne	r3, #1
 800d174:	2300      	moveq	r3, #0
 800d176:	b2db      	uxtb	r3, r3
 800d178:	e00b      	b.n	800d192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	43da      	mvns	r2, r3
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	4013      	ands	r3, r2
 800d186:	b29b      	uxth	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bf14      	ite	ne
 800d18c:	2301      	movne	r3, #1
 800d18e:	2300      	moveq	r3, #0
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	d18d      	bne.n	800d0b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d1ac:	e02d      	b.n	800d20a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f000 f8ce 	bl	800d350 <I2C_IsAcknowledgeFailed>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e02d      	b.n	800d21a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d021      	beq.n	800d20a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1c6:	f7fe f893 	bl	800b2f0 <HAL_GetTick>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d302      	bcc.n	800d1dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d116      	bne.n	800d20a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f6:	f043 0220 	orr.w	r2, r3, #32
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e007      	b.n	800d21a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d214:	2b80      	cmp	r3, #128	; 0x80
 800d216:	d1ca      	bne.n	800d1ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b084      	sub	sp, #16
 800d226:	af00      	add	r7, sp, #0
 800d228:	60f8      	str	r0, [r7, #12]
 800d22a:	60b9      	str	r1, [r7, #8]
 800d22c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d22e:	e02d      	b.n	800d28c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d230:	68f8      	ldr	r0, [r7, #12]
 800d232:	f000 f88d 	bl	800d350 <I2C_IsAcknowledgeFailed>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e02d      	b.n	800d29c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d021      	beq.n	800d28c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d248:	f7fe f852 	bl	800b2f0 <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d302      	bcc.n	800d25e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d116      	bne.n	800d28c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2200      	movs	r2, #0
 800d262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2220      	movs	r2, #32
 800d268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	f043 0220 	orr.w	r2, r3, #32
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e007      	b.n	800d29c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	f003 0304 	and.w	r3, r3, #4
 800d296:	2b04      	cmp	r3, #4
 800d298:	d1ca      	bne.n	800d230 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d2b0:	e042      	b.n	800d338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	695b      	ldr	r3, [r3, #20]
 800d2b8:	f003 0310 	and.w	r3, r3, #16
 800d2bc:	2b10      	cmp	r3, #16
 800d2be:	d119      	bne.n	800d2f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f06f 0210 	mvn.w	r2, #16
 800d2c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2220      	movs	r2, #32
 800d2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e029      	b.n	800d348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2f4:	f7fd fffc 	bl	800b2f0 <HAL_GetTick>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	429a      	cmp	r2, r3
 800d302:	d302      	bcc.n	800d30a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d116      	bne.n	800d338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2220      	movs	r2, #32
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	f043 0220 	orr.w	r2, r3, #32
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e007      	b.n	800d348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d342:	2b40      	cmp	r3, #64	; 0x40
 800d344:	d1b5      	bne.n	800d2b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d366:	d11b      	bne.n	800d3a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d370:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2220      	movs	r2, #32
 800d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38c:	f043 0204 	orr.w	r2, r3, #4
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e000      	b.n	800d3a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b20      	cmp	r3, #32
 800d3c2:	d129      	bne.n	800d418 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2224      	movs	r2, #36	; 0x24
 800d3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f022 0201 	bic.w	r2, r2, #1
 800d3da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f022 0210 	bic.w	r2, r2, #16
 800d3ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f042 0201 	orr.w	r2, r2, #1
 800d40a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2220      	movs	r2, #32
 800d410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	e000      	b.n	800d41a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d426:	b480      	push	{r7}
 800d428:	b085      	sub	sp, #20
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b20      	cmp	r3, #32
 800d43e:	d12a      	bne.n	800d496 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2224      	movs	r2, #36	; 0x24
 800d444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f022 0201 	bic.w	r2, r2, #1
 800d456:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800d460:	89fb      	ldrh	r3, [r7, #14]
 800d462:	f023 030f 	bic.w	r3, r3, #15
 800d466:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	4313      	orrs	r3, r2
 800d470:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	89fa      	ldrh	r2, [r7, #14]
 800d478:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f042 0201 	orr.w	r2, r2, #1
 800d488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	e000      	b.n	800d498 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800d496:	2302      	movs	r3, #2
  }
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e0bf      	b.n	800d636 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7fa fae0 	bl	8007a90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	699a      	ldr	r2, [r3, #24]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d4e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6999      	ldr	r1, [r3, #24]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685a      	ldr	r2, [r3, #4]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d4fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	430a      	orrs	r2, r1
 800d50a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6899      	ldr	r1, [r3, #8]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b4a      	ldr	r3, [pc, #296]	; (800d640 <HAL_LTDC_Init+0x19c>)
 800d518:	400b      	ands	r3, r1
 800d51a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	041b      	lsls	r3, r3, #16
 800d522:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6899      	ldr	r1, [r3, #8]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	699a      	ldr	r2, [r3, #24]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	431a      	orrs	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	430a      	orrs	r2, r1
 800d538:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68d9      	ldr	r1, [r3, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	4b3e      	ldr	r3, [pc, #248]	; (800d640 <HAL_LTDC_Init+0x19c>)
 800d546:	400b      	ands	r3, r1
 800d548:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	69db      	ldr	r3, [r3, #28]
 800d54e:	041b      	lsls	r3, r3, #16
 800d550:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68d9      	ldr	r1, [r3, #12]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6a1a      	ldr	r2, [r3, #32]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	431a      	orrs	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6919      	ldr	r1, [r3, #16]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	4b33      	ldr	r3, [pc, #204]	; (800d640 <HAL_LTDC_Init+0x19c>)
 800d574:	400b      	ands	r3, r1
 800d576:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	041b      	lsls	r3, r3, #16
 800d57e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6919      	ldr	r1, [r3, #16]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	431a      	orrs	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	430a      	orrs	r2, r1
 800d594:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6959      	ldr	r1, [r3, #20]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	4b27      	ldr	r3, [pc, #156]	; (800d640 <HAL_LTDC_Init+0x19c>)
 800d5a2:	400b      	ands	r3, r1
 800d5a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	041b      	lsls	r3, r3, #16
 800d5ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6959      	ldr	r1, [r3, #20]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d5ca:	021b      	lsls	r3, r3, #8
 800d5cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d5d4:	041b      	lsls	r3, r3, #16
 800d5d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d5e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	430a      	orrs	r2, r1
 800d602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f042 0206 	orr.w	r2, r2, #6
 800d612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	699a      	ldr	r2, [r3, #24]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f042 0201 	orr.w	r2, r2, #1
 800d622:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	f000f800 	.word	0xf000f800

0800d644 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d644:	b5b0      	push	{r4, r5, r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d656:	2b01      	cmp	r3, #1
 800d658:	d101      	bne.n	800d65e <HAL_LTDC_ConfigLayer+0x1a>
 800d65a:	2302      	movs	r3, #2
 800d65c:	e02c      	b.n	800d6b8 <HAL_LTDC_ConfigLayer+0x74>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2202      	movs	r2, #2
 800d66a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2134      	movs	r1, #52	; 0x34
 800d674:	fb01 f303 	mul.w	r3, r1, r3
 800d678:	4413      	add	r3, r2
 800d67a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	4614      	mov	r4, r2
 800d682:	461d      	mov	r5, r3
 800d684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d68a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d68c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d68e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68b9      	ldr	r1, [r7, #8]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 f8b9 	bl	800d810 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bdb0      	pop	{r4, r5, r7, pc}

0800d6c0 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d101      	bne.n	800d6da <HAL_LTDC_ConfigColorKeying+0x1a>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e030      	b.n	800d73c <HAL_LTDC_ConfigColorKeying+0x7c>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	01db      	lsls	r3, r3, #7
 800d6f4:	4413      	add	r3, r2
 800d6f6:	3384      	adds	r3, #132	; 0x84
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	6812      	ldr	r2, [r2, #0]
 800d6fe:	4611      	mov	r1, r2
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	01d2      	lsls	r2, r2, #7
 800d704:	440a      	add	r2, r1
 800d706:	3284      	adds	r2, #132	; 0x84
 800d708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d70c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	01db      	lsls	r3, r3, #7
 800d718:	4413      	add	r3, r2
 800d71a:	3384      	adds	r3, #132	; 0x84
 800d71c:	461a      	mov	r2, r3
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2201      	movs	r2, #1
 800d728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d101      	bne.n	800d760 <HAL_LTDC_EnableColorKeying+0x18>
 800d75c:	2302      	movs	r3, #2
 800d75e:	e026      	b.n	800d7ae <HAL_LTDC_EnableColorKeying+0x66>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2202      	movs	r2, #2
 800d76c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	01db      	lsls	r3, r3, #7
 800d77a:	4413      	add	r3, r2
 800d77c:	3384      	adds	r3, #132	; 0x84
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6812      	ldr	r2, [r2, #0]
 800d784:	4611      	mov	r1, r2
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	01d2      	lsls	r2, r2, #7
 800d78a:	440a      	add	r2, r1
 800d78c:	3284      	adds	r2, #132	; 0x84
 800d78e:	f043 0302 	orr.w	r3, r3, #2
 800d792:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2201      	movs	r2, #1
 800d79a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
	...

0800d7bc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d101      	bne.n	800d7d2 <HAL_LTDC_EnableDither+0x16>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	e016      	b.n	800d800 <HAL_LTDC_EnableDither+0x44>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2202      	movs	r2, #2
 800d7de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <HAL_LTDC_EnableDither+0x50>)
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	4a09      	ldr	r2, [pc, #36]	; (800d80c <HAL_LTDC_EnableDither+0x50>)
 800d7e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7ec:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	40016800 	.word	0x40016800

0800d810 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d810:	b480      	push	{r7}
 800d812:	b089      	sub	sp, #36	; 0x24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	0c1b      	lsrs	r3, r3, #16
 800d828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d82c:	4413      	add	r3, r2
 800d82e:	041b      	lsls	r3, r3, #16
 800d830:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	01db      	lsls	r3, r3, #7
 800d83c:	4413      	add	r3, r2
 800d83e:	3384      	adds	r3, #132	; 0x84
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	4611      	mov	r1, r2
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	01d2      	lsls	r2, r2, #7
 800d84c:	440a      	add	r2, r1
 800d84e:	3284      	adds	r2, #132	; 0x84
 800d850:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d854:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	0c1b      	lsrs	r3, r3, #16
 800d862:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d866:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d868:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4619      	mov	r1, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	01db      	lsls	r3, r3, #7
 800d874:	440b      	add	r3, r1
 800d876:	3384      	adds	r3, #132	; 0x84
 800d878:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800d87e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d88e:	4413      	add	r3, r2
 800d890:	041b      	lsls	r3, r3, #16
 800d892:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	461a      	mov	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	01db      	lsls	r3, r3, #7
 800d89e:	4413      	add	r3, r2
 800d8a0:	3384      	adds	r3, #132	; 0x84
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	6812      	ldr	r2, [r2, #0]
 800d8a8:	4611      	mov	r1, r2
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	01d2      	lsls	r2, r2, #7
 800d8ae:	440a      	add	r2, r1
 800d8b0:	3284      	adds	r2, #132	; 0x84
 800d8b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d8b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	689a      	ldr	r2, [r3, #8]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8c6:	4413      	add	r3, r2
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	01db      	lsls	r3, r3, #7
 800d8d4:	440b      	add	r3, r1
 800d8d6:	3384      	adds	r3, #132	; 0x84
 800d8d8:	4619      	mov	r1, r3
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	01db      	lsls	r3, r3, #7
 800d8ea:	4413      	add	r3, r2
 800d8ec:	3384      	adds	r3, #132	; 0x84
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	6812      	ldr	r2, [r2, #0]
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	01d2      	lsls	r2, r2, #7
 800d8fa:	440a      	add	r2, r1
 800d8fc:	3284      	adds	r2, #132	; 0x84
 800d8fe:	f023 0307 	bic.w	r3, r3, #7
 800d902:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	461a      	mov	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	01db      	lsls	r3, r3, #7
 800d90e:	4413      	add	r3, r2
 800d910:	3384      	adds	r3, #132	; 0x84
 800d912:	461a      	mov	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d920:	021b      	lsls	r3, r3, #8
 800d922:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d92a:	041b      	lsls	r3, r3, #16
 800d92c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	061b      	lsls	r3, r3, #24
 800d934:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	461a      	mov	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	01db      	lsls	r3, r3, #7
 800d940:	4413      	add	r3, r2
 800d942:	3384      	adds	r3, #132	; 0x84
 800d944:	699b      	ldr	r3, [r3, #24]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	01db      	lsls	r3, r3, #7
 800d950:	4413      	add	r3, r2
 800d952:	3384      	adds	r3, #132	; 0x84
 800d954:	461a      	mov	r2, r3
 800d956:	2300      	movs	r3, #0
 800d958:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d960:	461a      	mov	r2, r3
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	431a      	orrs	r2, r3
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	431a      	orrs	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4619      	mov	r1, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	01db      	lsls	r3, r3, #7
 800d974:	440b      	add	r3, r1
 800d976:	3384      	adds	r3, #132	; 0x84
 800d978:	4619      	mov	r1, r3
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	461a      	mov	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	01db      	lsls	r3, r3, #7
 800d98a:	4413      	add	r3, r2
 800d98c:	3384      	adds	r3, #132	; 0x84
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	6812      	ldr	r2, [r2, #0]
 800d994:	4611      	mov	r1, r2
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	01d2      	lsls	r2, r2, #7
 800d99a:	440a      	add	r2, r1
 800d99c:	3284      	adds	r2, #132	; 0x84
 800d99e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	01db      	lsls	r3, r3, #7
 800d9ae:	4413      	add	r3, r2
 800d9b0:	3384      	adds	r3, #132	; 0x84
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	695b      	ldr	r3, [r3, #20]
 800d9b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	01db      	lsls	r3, r3, #7
 800d9c4:	4413      	add	r3, r2
 800d9c6:	3384      	adds	r3, #132	; 0x84
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	6812      	ldr	r2, [r2, #0]
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	01d2      	lsls	r2, r2, #7
 800d9d4:	440a      	add	r2, r1
 800d9d6:	3284      	adds	r2, #132	; 0x84
 800d9d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d9dc:	f023 0307 	bic.w	r3, r3, #7
 800d9e0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	69da      	ldr	r2, [r3, #28]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	68f9      	ldr	r1, [r7, #12]
 800d9ec:	6809      	ldr	r1, [r1, #0]
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	01c9      	lsls	r1, r1, #7
 800d9f4:	4401      	add	r1, r0
 800d9f6:	3184      	adds	r1, #132	; 0x84
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	01db      	lsls	r3, r3, #7
 800da06:	4413      	add	r3, r2
 800da08:	3384      	adds	r3, #132	; 0x84
 800da0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	461a      	mov	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	01db      	lsls	r3, r3, #7
 800da16:	4413      	add	r3, r2
 800da18:	3384      	adds	r3, #132	; 0x84
 800da1a:	461a      	mov	r2, r3
 800da1c:	2300      	movs	r3, #0
 800da1e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	461a      	mov	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	01db      	lsls	r3, r3, #7
 800da2a:	4413      	add	r3, r2
 800da2c:	3384      	adds	r3, #132	; 0x84
 800da2e:	461a      	mov	r2, r3
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d102      	bne.n	800da44 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800da3e:	2304      	movs	r3, #4
 800da40:	61fb      	str	r3, [r7, #28]
 800da42:	e01b      	b.n	800da7c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d102      	bne.n	800da52 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800da4c:	2303      	movs	r3, #3
 800da4e:	61fb      	str	r3, [r7, #28]
 800da50:	e014      	b.n	800da7c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b04      	cmp	r3, #4
 800da58:	d00b      	beq.n	800da72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800da5e:	2b02      	cmp	r3, #2
 800da60:	d007      	beq.n	800da72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800da66:	2b03      	cmp	r3, #3
 800da68:	d003      	beq.n	800da72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800da6e:	2b07      	cmp	r3, #7
 800da70:	d102      	bne.n	800da78 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800da72:	2302      	movs	r3, #2
 800da74:	61fb      	str	r3, [r7, #28]
 800da76:	e001      	b.n	800da7c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800da78:	2301      	movs	r3, #1
 800da7a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	461a      	mov	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	01db      	lsls	r3, r3, #7
 800da86:	4413      	add	r3, r2
 800da88:	3384      	adds	r3, #132	; 0x84
 800da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	6812      	ldr	r2, [r2, #0]
 800da90:	4611      	mov	r1, r2
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	01d2      	lsls	r2, r2, #7
 800da96:	440a      	add	r2, r1
 800da98:	3284      	adds	r2, #132	; 0x84
 800da9a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800da9e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa4:	69fa      	ldr	r2, [r7, #28]
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
 800daaa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	6859      	ldr	r1, [r3, #4]
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	1acb      	subs	r3, r1, r3
 800dab6:	69f9      	ldr	r1, [r7, #28]
 800dab8:	fb01 f303 	mul.w	r3, r1, r3
 800dabc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	6809      	ldr	r1, [r1, #0]
 800dac2:	4608      	mov	r0, r1
 800dac4:	6879      	ldr	r1, [r7, #4]
 800dac6:	01c9      	lsls	r1, r1, #7
 800dac8:	4401      	add	r1, r0
 800daca:	3184      	adds	r1, #132	; 0x84
 800dacc:	4313      	orrs	r3, r2
 800dace:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	461a      	mov	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	01db      	lsls	r3, r3, #7
 800dada:	4413      	add	r3, r2
 800dadc:	3384      	adds	r3, #132	; 0x84
 800dade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	4611      	mov	r1, r2
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	01d2      	lsls	r2, r2, #7
 800daea:	440a      	add	r2, r1
 800daec:	3284      	adds	r2, #132	; 0x84
 800daee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800daf2:	f023 0307 	bic.w	r3, r3, #7
 800daf6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	461a      	mov	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	01db      	lsls	r3, r3, #7
 800db02:	4413      	add	r3, r2
 800db04:	3384      	adds	r3, #132	; 0x84
 800db06:	461a      	mov	r2, r3
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	01db      	lsls	r3, r3, #7
 800db18:	4413      	add	r3, r2
 800db1a:	3384      	adds	r3, #132	; 0x84
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	6812      	ldr	r2, [r2, #0]
 800db22:	4611      	mov	r1, r2
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	01d2      	lsls	r2, r2, #7
 800db28:	440a      	add	r2, r1
 800db2a:	3284      	adds	r2, #132	; 0x84
 800db2c:	f043 0301 	orr.w	r3, r3, #1
 800db30:	6013      	str	r3, [r2, #0]
}
 800db32:	bf00      	nop
 800db34:	3724      	adds	r7, #36	; 0x24
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
	...

0800db40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e267      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d075      	beq.n	800dc4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800db5e:	4b88      	ldr	r3, [pc, #544]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	f003 030c 	and.w	r3, r3, #12
 800db66:	2b04      	cmp	r3, #4
 800db68:	d00c      	beq.n	800db84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db6a:	4b85      	ldr	r3, [pc, #532]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800db72:	2b08      	cmp	r3, #8
 800db74:	d112      	bne.n	800db9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db76:	4b82      	ldr	r3, [pc, #520]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db82:	d10b      	bne.n	800db9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db84:	4b7e      	ldr	r3, [pc, #504]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d05b      	beq.n	800dc48 <HAL_RCC_OscConfig+0x108>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d157      	bne.n	800dc48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	e242      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dba4:	d106      	bne.n	800dbb4 <HAL_RCC_OscConfig+0x74>
 800dba6:	4b76      	ldr	r3, [pc, #472]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a75      	ldr	r2, [pc, #468]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbb0:	6013      	str	r3, [r2, #0]
 800dbb2:	e01d      	b.n	800dbf0 <HAL_RCC_OscConfig+0xb0>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dbbc:	d10c      	bne.n	800dbd8 <HAL_RCC_OscConfig+0x98>
 800dbbe:	4b70      	ldr	r3, [pc, #448]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a6f      	ldr	r2, [pc, #444]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dbc8:	6013      	str	r3, [r2, #0]
 800dbca:	4b6d      	ldr	r3, [pc, #436]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a6c      	ldr	r2, [pc, #432]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	e00b      	b.n	800dbf0 <HAL_RCC_OscConfig+0xb0>
 800dbd8:	4b69      	ldr	r3, [pc, #420]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a68      	ldr	r2, [pc, #416]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	4b66      	ldr	r3, [pc, #408]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a65      	ldr	r2, [pc, #404]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dbea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d013      	beq.n	800dc20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbf8:	f7fd fb7a 	bl	800b2f0 <HAL_GetTick>
 800dbfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbfe:	e008      	b.n	800dc12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dc00:	f7fd fb76 	bl	800b2f0 <HAL_GetTick>
 800dc04:	4602      	mov	r2, r0
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2b64      	cmp	r3, #100	; 0x64
 800dc0c:	d901      	bls.n	800dc12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	e207      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc12:	4b5b      	ldr	r3, [pc, #364]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d0f0      	beq.n	800dc00 <HAL_RCC_OscConfig+0xc0>
 800dc1e:	e014      	b.n	800dc4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc20:	f7fd fb66 	bl	800b2f0 <HAL_GetTick>
 800dc24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc26:	e008      	b.n	800dc3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dc28:	f7fd fb62 	bl	800b2f0 <HAL_GetTick>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	2b64      	cmp	r3, #100	; 0x64
 800dc34:	d901      	bls.n	800dc3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dc36:	2303      	movs	r3, #3
 800dc38:	e1f3      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc3a:	4b51      	ldr	r3, [pc, #324]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d1f0      	bne.n	800dc28 <HAL_RCC_OscConfig+0xe8>
 800dc46:	e000      	b.n	800dc4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 0302 	and.w	r3, r3, #2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d063      	beq.n	800dd1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dc56:	4b4a      	ldr	r3, [pc, #296]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f003 030c 	and.w	r3, r3, #12
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00b      	beq.n	800dc7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc62:	4b47      	ldr	r3, [pc, #284]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dc6a:	2b08      	cmp	r3, #8
 800dc6c:	d11c      	bne.n	800dca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc6e:	4b44      	ldr	r3, [pc, #272]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d116      	bne.n	800dca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc7a:	4b41      	ldr	r3, [pc, #260]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d005      	beq.n	800dc92 <HAL_RCC_OscConfig+0x152>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	68db      	ldr	r3, [r3, #12]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d001      	beq.n	800dc92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e1c7      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc92:	4b3b      	ldr	r3, [pc, #236]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	4937      	ldr	r1, [pc, #220]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dca2:	4313      	orrs	r3, r2
 800dca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dca6:	e03a      	b.n	800dd1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d020      	beq.n	800dcf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dcb0:	4b34      	ldr	r3, [pc, #208]	; (800dd84 <HAL_RCC_OscConfig+0x244>)
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcb6:	f7fd fb1b 	bl	800b2f0 <HAL_GetTick>
 800dcba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcbc:	e008      	b.n	800dcd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dcbe:	f7fd fb17 	bl	800b2f0 <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d901      	bls.n	800dcd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e1a8      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dcd0:	4b2b      	ldr	r3, [pc, #172]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 0302 	and.w	r3, r3, #2
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0f0      	beq.n	800dcbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcdc:	4b28      	ldr	r3, [pc, #160]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	691b      	ldr	r3, [r3, #16]
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	4925      	ldr	r1, [pc, #148]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dcec:	4313      	orrs	r3, r2
 800dcee:	600b      	str	r3, [r1, #0]
 800dcf0:	e015      	b.n	800dd1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dcf2:	4b24      	ldr	r3, [pc, #144]	; (800dd84 <HAL_RCC_OscConfig+0x244>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf8:	f7fd fafa 	bl	800b2f0 <HAL_GetTick>
 800dcfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dcfe:	e008      	b.n	800dd12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dd00:	f7fd faf6 	bl	800b2f0 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d901      	bls.n	800dd12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e187      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dd12:	4b1b      	ldr	r3, [pc, #108]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0302 	and.w	r3, r3, #2
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f0      	bne.n	800dd00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 0308 	and.w	r3, r3, #8
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d036      	beq.n	800dd98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d016      	beq.n	800dd60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd32:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <HAL_RCC_OscConfig+0x248>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd38:	f7fd fada 	bl	800b2f0 <HAL_GetTick>
 800dd3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd3e:	e008      	b.n	800dd52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dd40:	f7fd fad6 	bl	800b2f0 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	d901      	bls.n	800dd52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dd4e:	2303      	movs	r3, #3
 800dd50:	e167      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd52:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <HAL_RCC_OscConfig+0x240>)
 800dd54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d0f0      	beq.n	800dd40 <HAL_RCC_OscConfig+0x200>
 800dd5e:	e01b      	b.n	800dd98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dd60:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <HAL_RCC_OscConfig+0x248>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dd66:	f7fd fac3 	bl	800b2f0 <HAL_GetTick>
 800dd6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd6c:	e00e      	b.n	800dd8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dd6e:	f7fd fabf 	bl	800b2f0 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d907      	bls.n	800dd8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e150      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
 800dd80:	40023800 	.word	0x40023800
 800dd84:	42470000 	.word	0x42470000
 800dd88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd8c:	4b88      	ldr	r3, [pc, #544]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800dd8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd90:	f003 0302 	and.w	r3, r3, #2
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1ea      	bne.n	800dd6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 0304 	and.w	r3, r3, #4
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 8097 	beq.w	800ded4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dda6:	2300      	movs	r3, #0
 800dda8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ddaa:	4b81      	ldr	r3, [pc, #516]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10f      	bne.n	800ddd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60bb      	str	r3, [r7, #8]
 800ddba:	4b7d      	ldr	r3, [pc, #500]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbe:	4a7c      	ldr	r2, [pc, #496]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800ddc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddc4:	6413      	str	r3, [r2, #64]	; 0x40
 800ddc6:	4b7a      	ldr	r3, [pc, #488]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800ddc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddce:	60bb      	str	r3, [r7, #8]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddd6:	4b77      	ldr	r3, [pc, #476]	; (800dfb4 <HAL_RCC_OscConfig+0x474>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d118      	bne.n	800de14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dde2:	4b74      	ldr	r3, [pc, #464]	; (800dfb4 <HAL_RCC_OscConfig+0x474>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4a73      	ldr	r2, [pc, #460]	; (800dfb4 <HAL_RCC_OscConfig+0x474>)
 800dde8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ddee:	f7fd fa7f 	bl	800b2f0 <HAL_GetTick>
 800ddf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddf4:	e008      	b.n	800de08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddf6:	f7fd fa7b 	bl	800b2f0 <HAL_GetTick>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	2b02      	cmp	r3, #2
 800de02:	d901      	bls.n	800de08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800de04:	2303      	movs	r3, #3
 800de06:	e10c      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de08:	4b6a      	ldr	r3, [pc, #424]	; (800dfb4 <HAL_RCC_OscConfig+0x474>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de10:	2b00      	cmp	r3, #0
 800de12:	d0f0      	beq.n	800ddf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d106      	bne.n	800de2a <HAL_RCC_OscConfig+0x2ea>
 800de1c:	4b64      	ldr	r3, [pc, #400]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de20:	4a63      	ldr	r2, [pc, #396]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de22:	f043 0301 	orr.w	r3, r3, #1
 800de26:	6713      	str	r3, [r2, #112]	; 0x70
 800de28:	e01c      	b.n	800de64 <HAL_RCC_OscConfig+0x324>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	2b05      	cmp	r3, #5
 800de30:	d10c      	bne.n	800de4c <HAL_RCC_OscConfig+0x30c>
 800de32:	4b5f      	ldr	r3, [pc, #380]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de36:	4a5e      	ldr	r2, [pc, #376]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de38:	f043 0304 	orr.w	r3, r3, #4
 800de3c:	6713      	str	r3, [r2, #112]	; 0x70
 800de3e:	4b5c      	ldr	r3, [pc, #368]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de42:	4a5b      	ldr	r2, [pc, #364]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de44:	f043 0301 	orr.w	r3, r3, #1
 800de48:	6713      	str	r3, [r2, #112]	; 0x70
 800de4a:	e00b      	b.n	800de64 <HAL_RCC_OscConfig+0x324>
 800de4c:	4b58      	ldr	r3, [pc, #352]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de50:	4a57      	ldr	r2, [pc, #348]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de52:	f023 0301 	bic.w	r3, r3, #1
 800de56:	6713      	str	r3, [r2, #112]	; 0x70
 800de58:	4b55      	ldr	r3, [pc, #340]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de5c:	4a54      	ldr	r2, [pc, #336]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de5e:	f023 0304 	bic.w	r3, r3, #4
 800de62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d015      	beq.n	800de98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de6c:	f7fd fa40 	bl	800b2f0 <HAL_GetTick>
 800de70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de72:	e00a      	b.n	800de8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800de74:	f7fd fa3c 	bl	800b2f0 <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de82:	4293      	cmp	r3, r2
 800de84:	d901      	bls.n	800de8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e0cb      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de8a:	4b49      	ldr	r3, [pc, #292]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800de8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0ee      	beq.n	800de74 <HAL_RCC_OscConfig+0x334>
 800de96:	e014      	b.n	800dec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800de98:	f7fd fa2a 	bl	800b2f0 <HAL_GetTick>
 800de9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de9e:	e00a      	b.n	800deb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dea0:	f7fd fa26 	bl	800b2f0 <HAL_GetTick>
 800dea4:	4602      	mov	r2, r0
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800deae:	4293      	cmp	r3, r2
 800deb0:	d901      	bls.n	800deb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800deb2:	2303      	movs	r3, #3
 800deb4:	e0b5      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800deb6:	4b3e      	ldr	r3, [pc, #248]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800deb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deba:	f003 0302 	and.w	r3, r3, #2
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1ee      	bne.n	800dea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d105      	bne.n	800ded4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dec8:	4b39      	ldr	r3, [pc, #228]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800deca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800decc:	4a38      	ldr	r2, [pc, #224]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800dece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ded2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 80a1 	beq.w	800e020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dede:	4b34      	ldr	r3, [pc, #208]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	f003 030c 	and.w	r3, r3, #12
 800dee6:	2b08      	cmp	r3, #8
 800dee8:	d05c      	beq.n	800dfa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	2b02      	cmp	r3, #2
 800def0:	d141      	bne.n	800df76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800def2:	4b31      	ldr	r3, [pc, #196]	; (800dfb8 <HAL_RCC_OscConfig+0x478>)
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800def8:	f7fd f9fa 	bl	800b2f0 <HAL_GetTick>
 800defc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800defe:	e008      	b.n	800df12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df00:	f7fd f9f6 	bl	800b2f0 <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b02      	cmp	r3, #2
 800df0c:	d901      	bls.n	800df12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e087      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df12:	4b27      	ldr	r3, [pc, #156]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1f0      	bne.n	800df00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	69da      	ldr	r2, [r3, #28]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	431a      	orrs	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	019b      	lsls	r3, r3, #6
 800df2e:	431a      	orrs	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df34:	085b      	lsrs	r3, r3, #1
 800df36:	3b01      	subs	r3, #1
 800df38:	041b      	lsls	r3, r3, #16
 800df3a:	431a      	orrs	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df40:	061b      	lsls	r3, r3, #24
 800df42:	491b      	ldr	r1, [pc, #108]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800df44:	4313      	orrs	r3, r2
 800df46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df48:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <HAL_RCC_OscConfig+0x478>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df4e:	f7fd f9cf 	bl	800b2f0 <HAL_GetTick>
 800df52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df54:	e008      	b.n	800df68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df56:	f7fd f9cb 	bl	800b2f0 <HAL_GetTick>
 800df5a:	4602      	mov	r2, r0
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	2b02      	cmp	r3, #2
 800df62:	d901      	bls.n	800df68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800df64:	2303      	movs	r3, #3
 800df66:	e05c      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df68:	4b11      	ldr	r3, [pc, #68]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d0f0      	beq.n	800df56 <HAL_RCC_OscConfig+0x416>
 800df74:	e054      	b.n	800e020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df76:	4b10      	ldr	r3, [pc, #64]	; (800dfb8 <HAL_RCC_OscConfig+0x478>)
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df7c:	f7fd f9b8 	bl	800b2f0 <HAL_GetTick>
 800df80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df82:	e008      	b.n	800df96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df84:	f7fd f9b4 	bl	800b2f0 <HAL_GetTick>
 800df88:	4602      	mov	r2, r0
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	2b02      	cmp	r3, #2
 800df90:	d901      	bls.n	800df96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e045      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df96:	4b06      	ldr	r3, [pc, #24]	; (800dfb0 <HAL_RCC_OscConfig+0x470>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1f0      	bne.n	800df84 <HAL_RCC_OscConfig+0x444>
 800dfa2:	e03d      	b.n	800e020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d107      	bne.n	800dfbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	e038      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
 800dfb0:	40023800 	.word	0x40023800
 800dfb4:	40007000 	.word	0x40007000
 800dfb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800dfbc:	4b1b      	ldr	r3, [pc, #108]	; (800e02c <HAL_RCC_OscConfig+0x4ec>)
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d028      	beq.n	800e01c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d121      	bne.n	800e01c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d11a      	bne.n	800e01c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dfec:	4013      	ands	r3, r2
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d111      	bne.n	800e01c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e002:	085b      	lsrs	r3, r3, #1
 800e004:	3b01      	subs	r3, #1
 800e006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e008:	429a      	cmp	r2, r3
 800e00a:	d107      	bne.n	800e01c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e018:	429a      	cmp	r2, r3
 800e01a:	d001      	beq.n	800e020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	40023800 	.word	0x40023800

0800e030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e0cc      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e044:	4b68      	ldr	r3, [pc, #416]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f003 030f 	and.w	r3, r3, #15
 800e04c:	683a      	ldr	r2, [r7, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d90c      	bls.n	800e06c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e052:	4b65      	ldr	r3, [pc, #404]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e05a:	4b63      	ldr	r3, [pc, #396]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 030f 	and.w	r3, r3, #15
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d001      	beq.n	800e06c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	e0b8      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 0302 	and.w	r3, r3, #2
 800e074:	2b00      	cmp	r3, #0
 800e076:	d020      	beq.n	800e0ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f003 0304 	and.w	r3, r3, #4
 800e080:	2b00      	cmp	r3, #0
 800e082:	d005      	beq.n	800e090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e084:	4b59      	ldr	r3, [pc, #356]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	4a58      	ldr	r2, [pc, #352]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e08a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e08e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f003 0308 	and.w	r3, r3, #8
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d005      	beq.n	800e0a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e09c:	4b53      	ldr	r3, [pc, #332]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4a52      	ldr	r2, [pc, #328]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e0a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e0a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e0a8:	4b50      	ldr	r3, [pc, #320]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	494d      	ldr	r1, [pc, #308]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d044      	beq.n	800e150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d107      	bne.n	800e0de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e0ce:	4b47      	ldr	r3, [pc, #284]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d119      	bne.n	800e10e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e07f      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d003      	beq.n	800e0ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d107      	bne.n	800e0fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e0ee:	4b3f      	ldr	r3, [pc, #252]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d109      	bne.n	800e10e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e06f      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e0fe:	4b3b      	ldr	r3, [pc, #236]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e067      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e10e:	4b37      	ldr	r3, [pc, #220]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f023 0203 	bic.w	r2, r3, #3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	4934      	ldr	r1, [pc, #208]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e11c:	4313      	orrs	r3, r2
 800e11e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e120:	f7fd f8e6 	bl	800b2f0 <HAL_GetTick>
 800e124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e126:	e00a      	b.n	800e13e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e128:	f7fd f8e2 	bl	800b2f0 <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	f241 3288 	movw	r2, #5000	; 0x1388
 800e136:	4293      	cmp	r3, r2
 800e138:	d901      	bls.n	800e13e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e13a:	2303      	movs	r3, #3
 800e13c:	e04f      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e13e:	4b2b      	ldr	r3, [pc, #172]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f003 020c 	and.w	r2, r3, #12
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d1eb      	bne.n	800e128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e150:	4b25      	ldr	r3, [pc, #148]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 030f 	and.w	r3, r3, #15
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d20c      	bcs.n	800e178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e15e:	4b22      	ldr	r3, [pc, #136]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	b2d2      	uxtb	r2, r2
 800e164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e166:	4b20      	ldr	r3, [pc, #128]	; (800e1e8 <HAL_RCC_ClockConfig+0x1b8>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f003 030f 	and.w	r3, r3, #15
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	429a      	cmp	r2, r3
 800e172:	d001      	beq.n	800e178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e032      	b.n	800e1de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d008      	beq.n	800e196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e184:	4b19      	ldr	r3, [pc, #100]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	4916      	ldr	r1, [pc, #88]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e192:	4313      	orrs	r3, r2
 800e194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f003 0308 	and.w	r3, r3, #8
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d009      	beq.n	800e1b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e1a2:	4b12      	ldr	r3, [pc, #72]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	490e      	ldr	r1, [pc, #56]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e1b6:	f000 f821 	bl	800e1fc <HAL_RCC_GetSysClockFreq>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	4b0b      	ldr	r3, [pc, #44]	; (800e1ec <HAL_RCC_ClockConfig+0x1bc>)
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	091b      	lsrs	r3, r3, #4
 800e1c2:	f003 030f 	and.w	r3, r3, #15
 800e1c6:	490a      	ldr	r1, [pc, #40]	; (800e1f0 <HAL_RCC_ClockConfig+0x1c0>)
 800e1c8:	5ccb      	ldrb	r3, [r1, r3]
 800e1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ce:	4a09      	ldr	r2, [pc, #36]	; (800e1f4 <HAL_RCC_ClockConfig+0x1c4>)
 800e1d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <HAL_RCC_ClockConfig+0x1c8>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fa fbf4 	bl	80089c4 <HAL_InitTick>

  return HAL_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	40023c00 	.word	0x40023c00
 800e1ec:	40023800 	.word	0x40023800
 800e1f0:	0814f5d4 	.word	0x0814f5d4
 800e1f4:	200008bc 	.word	0x200008bc
 800e1f8:	200008c0 	.word	0x200008c0

0800e1fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e1fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e200:	b094      	sub	sp, #80	; 0x50
 800e202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e204:	2300      	movs	r3, #0
 800e206:	647b      	str	r3, [r7, #68]	; 0x44
 800e208:	2300      	movs	r3, #0
 800e20a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e20c:	2300      	movs	r3, #0
 800e20e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800e210:	2300      	movs	r3, #0
 800e212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e214:	4b79      	ldr	r3, [pc, #484]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f003 030c 	and.w	r3, r3, #12
 800e21c:	2b08      	cmp	r3, #8
 800e21e:	d00d      	beq.n	800e23c <HAL_RCC_GetSysClockFreq+0x40>
 800e220:	2b08      	cmp	r3, #8
 800e222:	f200 80e1 	bhi.w	800e3e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <HAL_RCC_GetSysClockFreq+0x34>
 800e22a:	2b04      	cmp	r3, #4
 800e22c:	d003      	beq.n	800e236 <HAL_RCC_GetSysClockFreq+0x3a>
 800e22e:	e0db      	b.n	800e3e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e230:	4b73      	ldr	r3, [pc, #460]	; (800e400 <HAL_RCC_GetSysClockFreq+0x204>)
 800e232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800e234:	e0db      	b.n	800e3ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e236:	4b73      	ldr	r3, [pc, #460]	; (800e404 <HAL_RCC_GetSysClockFreq+0x208>)
 800e238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e23a:	e0d8      	b.n	800e3ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e23c:	4b6f      	ldr	r3, [pc, #444]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e246:	4b6d      	ldr	r3, [pc, #436]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d063      	beq.n	800e31a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e252:	4b6a      	ldr	r3, [pc, #424]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	099b      	lsrs	r3, r3, #6
 800e258:	2200      	movs	r2, #0
 800e25a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e25c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e264:	633b      	str	r3, [r7, #48]	; 0x30
 800e266:	2300      	movs	r3, #0
 800e268:	637b      	str	r3, [r7, #52]	; 0x34
 800e26a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e26e:	4622      	mov	r2, r4
 800e270:	462b      	mov	r3, r5
 800e272:	f04f 0000 	mov.w	r0, #0
 800e276:	f04f 0100 	mov.w	r1, #0
 800e27a:	0159      	lsls	r1, r3, #5
 800e27c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e280:	0150      	lsls	r0, r2, #5
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4621      	mov	r1, r4
 800e288:	1a51      	subs	r1, r2, r1
 800e28a:	6139      	str	r1, [r7, #16]
 800e28c:	4629      	mov	r1, r5
 800e28e:	eb63 0301 	sbc.w	r3, r3, r1
 800e292:	617b      	str	r3, [r7, #20]
 800e294:	f04f 0200 	mov.w	r2, #0
 800e298:	f04f 0300 	mov.w	r3, #0
 800e29c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e2a0:	4659      	mov	r1, fp
 800e2a2:	018b      	lsls	r3, r1, #6
 800e2a4:	4651      	mov	r1, sl
 800e2a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e2aa:	4651      	mov	r1, sl
 800e2ac:	018a      	lsls	r2, r1, #6
 800e2ae:	4651      	mov	r1, sl
 800e2b0:	ebb2 0801 	subs.w	r8, r2, r1
 800e2b4:	4659      	mov	r1, fp
 800e2b6:	eb63 0901 	sbc.w	r9, r3, r1
 800e2ba:	f04f 0200 	mov.w	r2, #0
 800e2be:	f04f 0300 	mov.w	r3, #0
 800e2c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e2c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e2ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e2ce:	4690      	mov	r8, r2
 800e2d0:	4699      	mov	r9, r3
 800e2d2:	4623      	mov	r3, r4
 800e2d4:	eb18 0303 	adds.w	r3, r8, r3
 800e2d8:	60bb      	str	r3, [r7, #8]
 800e2da:	462b      	mov	r3, r5
 800e2dc:	eb49 0303 	adc.w	r3, r9, r3
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	f04f 0200 	mov.w	r2, #0
 800e2e6:	f04f 0300 	mov.w	r3, #0
 800e2ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	024b      	lsls	r3, r1, #9
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	024a      	lsls	r2, r1, #9
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	4619      	mov	r1, r3
 800e300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e302:	2200      	movs	r2, #0
 800e304:	62bb      	str	r3, [r7, #40]	; 0x28
 800e306:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e30c:	f7f8 fd32 	bl	8006d74 <__aeabi_uldivmod>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	4613      	mov	r3, r2
 800e316:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e318:	e058      	b.n	800e3cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e31a:	4b38      	ldr	r3, [pc, #224]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	099b      	lsrs	r3, r3, #6
 800e320:	2200      	movs	r2, #0
 800e322:	4618      	mov	r0, r3
 800e324:	4611      	mov	r1, r2
 800e326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e32a:	623b      	str	r3, [r7, #32]
 800e32c:	2300      	movs	r3, #0
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
 800e330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e334:	4642      	mov	r2, r8
 800e336:	464b      	mov	r3, r9
 800e338:	f04f 0000 	mov.w	r0, #0
 800e33c:	f04f 0100 	mov.w	r1, #0
 800e340:	0159      	lsls	r1, r3, #5
 800e342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e346:	0150      	lsls	r0, r2, #5
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	4641      	mov	r1, r8
 800e34e:	ebb2 0a01 	subs.w	sl, r2, r1
 800e352:	4649      	mov	r1, r9
 800e354:	eb63 0b01 	sbc.w	fp, r3, r1
 800e358:	f04f 0200 	mov.w	r2, #0
 800e35c:	f04f 0300 	mov.w	r3, #0
 800e360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e36c:	ebb2 040a 	subs.w	r4, r2, sl
 800e370:	eb63 050b 	sbc.w	r5, r3, fp
 800e374:	f04f 0200 	mov.w	r2, #0
 800e378:	f04f 0300 	mov.w	r3, #0
 800e37c:	00eb      	lsls	r3, r5, #3
 800e37e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e382:	00e2      	lsls	r2, r4, #3
 800e384:	4614      	mov	r4, r2
 800e386:	461d      	mov	r5, r3
 800e388:	4643      	mov	r3, r8
 800e38a:	18e3      	adds	r3, r4, r3
 800e38c:	603b      	str	r3, [r7, #0]
 800e38e:	464b      	mov	r3, r9
 800e390:	eb45 0303 	adc.w	r3, r5, r3
 800e394:	607b      	str	r3, [r7, #4]
 800e396:	f04f 0200 	mov.w	r2, #0
 800e39a:	f04f 0300 	mov.w	r3, #0
 800e39e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	028b      	lsls	r3, r1, #10
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	028a      	lsls	r2, r1, #10
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	61bb      	str	r3, [r7, #24]
 800e3ba:	61fa      	str	r2, [r7, #28]
 800e3bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e3c0:	f7f8 fcd8 	bl	8006d74 <__aeabi_uldivmod>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e3cc:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <HAL_RCC_GetSysClockFreq+0x200>)
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	0c1b      	lsrs	r3, r3, #16
 800e3d2:	f003 0303 	and.w	r3, r3, #3
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e3dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e3e6:	e002      	b.n	800e3ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e3e8:	4b05      	ldr	r3, [pc, #20]	; (800e400 <HAL_RCC_GetSysClockFreq+0x204>)
 800e3ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e3ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3750      	adds	r7, #80	; 0x50
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3fa:	bf00      	nop
 800e3fc:	40023800 	.word	0x40023800
 800e400:	00f42400 	.word	0x00f42400
 800e404:	007a1200 	.word	0x007a1200

0800e408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e408:	b480      	push	{r7}
 800e40a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e40c:	4b03      	ldr	r3, [pc, #12]	; (800e41c <HAL_RCC_GetHCLKFreq+0x14>)
 800e40e:	681b      	ldr	r3, [r3, #0]
}
 800e410:	4618      	mov	r0, r3
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	200008bc 	.word	0x200008bc

0800e420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e424:	f7ff fff0 	bl	800e408 <HAL_RCC_GetHCLKFreq>
 800e428:	4602      	mov	r2, r0
 800e42a:	4b05      	ldr	r3, [pc, #20]	; (800e440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	0a9b      	lsrs	r3, r3, #10
 800e430:	f003 0307 	and.w	r3, r3, #7
 800e434:	4903      	ldr	r1, [pc, #12]	; (800e444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e436:	5ccb      	ldrb	r3, [r1, r3]
 800e438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	40023800 	.word	0x40023800
 800e444:	0814f5e4 	.word	0x0814f5e4

0800e448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e44c:	f7ff ffdc 	bl	800e408 <HAL_RCC_GetHCLKFreq>
 800e450:	4602      	mov	r2, r0
 800e452:	4b05      	ldr	r3, [pc, #20]	; (800e468 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	0b5b      	lsrs	r3, r3, #13
 800e458:	f003 0307 	and.w	r3, r3, #7
 800e45c:	4903      	ldr	r1, [pc, #12]	; (800e46c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e45e:	5ccb      	ldrb	r3, [r1, r3]
 800e460:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e464:	4618      	mov	r0, r3
 800e466:	bd80      	pop	{r7, pc}
 800e468:	40023800 	.word	0x40023800
 800e46c:	0814f5e4 	.word	0x0814f5e4

0800e470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	220f      	movs	r2, #15
 800e47e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e480:	4b12      	ldr	r3, [pc, #72]	; (800e4cc <HAL_RCC_GetClockConfig+0x5c>)
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	f003 0203 	and.w	r2, r3, #3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e48c:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <HAL_RCC_GetClockConfig+0x5c>)
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e498:	4b0c      	ldr	r3, [pc, #48]	; (800e4cc <HAL_RCC_GetClockConfig+0x5c>)
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e4a4:	4b09      	ldr	r3, [pc, #36]	; (800e4cc <HAL_RCC_GetClockConfig+0x5c>)
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	08db      	lsrs	r3, r3, #3
 800e4aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e4b2:	4b07      	ldr	r3, [pc, #28]	; (800e4d0 <HAL_RCC_GetClockConfig+0x60>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 020f 	and.w	r2, r3, #15
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	601a      	str	r2, [r3, #0]
}
 800e4be:	bf00      	nop
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	40023800 	.word	0x40023800
 800e4d0:	40023c00 	.word	0x40023c00

0800e4d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10b      	bne.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e504:	2b00      	cmp	r3, #0
 800e506:	d075      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e508:	4b91      	ldr	r3, [pc, #580]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e50e:	f7fc feef 	bl	800b2f0 <HAL_GetTick>
 800e512:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e514:	e008      	b.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e516:	f7fc feeb 	bl	800b2f0 <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	2b02      	cmp	r3, #2
 800e522:	d901      	bls.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e189      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e528:	4b8a      	ldr	r3, [pc, #552]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1f0      	bne.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d009      	beq.n	800e554 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	019a      	lsls	r2, r3, #6
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	071b      	lsls	r3, r3, #28
 800e54c:	4981      	ldr	r1, [pc, #516]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e54e:	4313      	orrs	r3, r2
 800e550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01f      	beq.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e560:	4b7c      	ldr	r3, [pc, #496]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e566:	0f1b      	lsrs	r3, r3, #28
 800e568:	f003 0307 	and.w	r3, r3, #7
 800e56c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	019a      	lsls	r2, r3, #6
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	061b      	lsls	r3, r3, #24
 800e57a:	431a      	orrs	r2, r3
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	071b      	lsls	r3, r3, #28
 800e580:	4974      	ldr	r1, [pc, #464]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e582:	4313      	orrs	r3, r2
 800e584:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e588:	4b72      	ldr	r3, [pc, #456]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e58e:	f023 021f 	bic.w	r2, r3, #31
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	69db      	ldr	r3, [r3, #28]
 800e596:	3b01      	subs	r3, #1
 800e598:	496e      	ldr	r1, [pc, #440]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e59a:	4313      	orrs	r3, r2
 800e59c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00d      	beq.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	019a      	lsls	r2, r3, #6
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	061b      	lsls	r3, r3, #24
 800e5b8:	431a      	orrs	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	071b      	lsls	r3, r3, #28
 800e5c0:	4964      	ldr	r1, [pc, #400]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e5c8:	4b61      	ldr	r3, [pc, #388]	; (800e750 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e5ce:	f7fc fe8f 	bl	800b2f0 <HAL_GetTick>
 800e5d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e5d4:	e008      	b.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e5d6:	f7fc fe8b 	bl	800b2f0 <HAL_GetTick>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d901      	bls.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e129      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e5e8:	4b5a      	ldr	r3, [pc, #360]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d0f0      	beq.n	800e5d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f003 0304 	and.w	r3, r3, #4
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d079      	beq.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e60c:	4b52      	ldr	r3, [pc, #328]	; (800e758 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e612:	f7fc fe6d 	bl	800b2f0 <HAL_GetTick>
 800e616:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e618:	e008      	b.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e61a:	f7fc fe69 	bl	800b2f0 <HAL_GetTick>
 800e61e:	4602      	mov	r2, r0
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	2b02      	cmp	r3, #2
 800e626:	d901      	bls.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e628:	2303      	movs	r3, #3
 800e62a:	e107      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e62c:	4b49      	ldr	r3, [pc, #292]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e638:	d0ef      	beq.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 0304 	and.w	r3, r3, #4
 800e642:	2b00      	cmp	r3, #0
 800e644:	d020      	beq.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e646:	4b43      	ldr	r3, [pc, #268]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e64c:	0f1b      	lsrs	r3, r3, #28
 800e64e:	f003 0307 	and.w	r3, r3, #7
 800e652:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	019a      	lsls	r2, r3, #6
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	061b      	lsls	r3, r3, #24
 800e660:	431a      	orrs	r2, r3
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	071b      	lsls	r3, r3, #28
 800e666:	493b      	ldr	r1, [pc, #236]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e668:	4313      	orrs	r3, r2
 800e66a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e66e:	4b39      	ldr	r3, [pc, #228]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a1b      	ldr	r3, [r3, #32]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	021b      	lsls	r3, r3, #8
 800e680:	4934      	ldr	r1, [pc, #208]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e682:	4313      	orrs	r3, r2
 800e684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f003 0308 	and.w	r3, r3, #8
 800e690:	2b00      	cmp	r3, #0
 800e692:	d01e      	beq.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e694:	4b2f      	ldr	r3, [pc, #188]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e69a:	0e1b      	lsrs	r3, r3, #24
 800e69c:	f003 030f 	and.w	r3, r3, #15
 800e6a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	019a      	lsls	r2, r3, #6
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	061b      	lsls	r3, r3, #24
 800e6ac:	431a      	orrs	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	071b      	lsls	r3, r3, #28
 800e6b4:	4927      	ldr	r1, [pc, #156]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e6bc:	4b25      	ldr	r3, [pc, #148]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6ca:	4922      	ldr	r1, [pc, #136]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e6d2:	4b21      	ldr	r3, [pc, #132]	; (800e758 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e6d8:	f7fc fe0a 	bl	800b2f0 <HAL_GetTick>
 800e6dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e6de:	e008      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e6e0:	f7fc fe06 	bl	800b2f0 <HAL_GetTick>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d901      	bls.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e0a4      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e6f2:	4b18      	ldr	r3, [pc, #96]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6fe:	d1ef      	bne.n	800e6e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f000 808b 	beq.w	800e824 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e70e:	2300      	movs	r3, #0
 800e710:	60fb      	str	r3, [r7, #12]
 800e712:	4b10      	ldr	r3, [pc, #64]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e716:	4a0f      	ldr	r2, [pc, #60]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e71c:	6413      	str	r3, [r2, #64]	; 0x40
 800e71e:	4b0d      	ldr	r3, [pc, #52]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e72a:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a0b      	ldr	r2, [pc, #44]	; (800e75c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e734:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e736:	f7fc fddb 	bl	800b2f0 <HAL_GetTick>
 800e73a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e73c:	e010      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e73e:	f7fc fdd7 	bl	800b2f0 <HAL_GetTick>
 800e742:	4602      	mov	r2, r0
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d909      	bls.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800e74c:	2303      	movs	r3, #3
 800e74e:	e075      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
 800e750:	42470068 	.word	0x42470068
 800e754:	40023800 	.word	0x40023800
 800e758:	42470070 	.word	0x42470070
 800e75c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e760:	4b38      	ldr	r3, [pc, #224]	; (800e844 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0e8      	beq.n	800e73e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e76c:	4b36      	ldr	r3, [pc, #216]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e76e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e774:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d02f      	beq.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d028      	beq.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e78a:	4b2f      	ldr	r3, [pc, #188]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e78e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e792:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e794:	4b2d      	ldr	r3, [pc, #180]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e796:	2201      	movs	r2, #1
 800e798:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e79a:	4b2c      	ldr	r3, [pc, #176]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e7a0:	4a29      	ldr	r2, [pc, #164]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e7a6:	4b28      	ldr	r3, [pc, #160]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d114      	bne.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e7b2:	f7fc fd9d 	bl	800b2f0 <HAL_GetTick>
 800e7b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7b8:	e00a      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e7ba:	f7fc fd99 	bl	800b2f0 <HAL_GetTick>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d901      	bls.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e035      	b.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7d0:	4b1d      	ldr	r3, [pc, #116]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7d4:	f003 0302 	and.w	r3, r3, #2
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0ee      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7e8:	d10d      	bne.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800e7ea:	4b17      	ldr	r3, [pc, #92]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e7fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7fe:	4912      	ldr	r1, [pc, #72]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e800:	4313      	orrs	r3, r2
 800e802:	608b      	str	r3, [r1, #8]
 800e804:	e005      	b.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	4a0f      	ldr	r2, [pc, #60]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e80c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e810:	6093      	str	r3, [r2, #8]
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e81a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e81e:	490a      	ldr	r1, [pc, #40]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e820:	4313      	orrs	r3, r2
 800e822:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f003 0310 	and.w	r3, r3, #16
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d004      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e836:	4b06      	ldr	r3, [pc, #24]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800e838:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	40007000 	.word	0x40007000
 800e848:	40023800 	.word	0x40023800
 800e84c:	42470e40 	.word	0x42470e40
 800e850:	424711e0 	.word	0x424711e0

0800e854 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e864:	2301      	movs	r3, #1
 800e866:	e025      	b.n	800e8b4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d106      	bne.n	800e882 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7f8 fe7f 	bl	8007580 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2202      	movs	r2, #2
 800e886:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3304      	adds	r3, #4
 800e892:	4619      	mov	r1, r3
 800e894:	4610      	mov	r0, r2
 800e896:	f001 fe91 	bl	80105bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6818      	ldr	r0, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	f001 fee6 	bl	8010676 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8ce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	d101      	bne.n	800e8da <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e021      	b.n	800e91e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d002      	beq.n	800e8e6 <HAL_SDRAM_SendCommand+0x2a>
 800e8e0:	7dfb      	ldrb	r3, [r7, #23]
 800e8e2:	2b05      	cmp	r3, #5
 800e8e4:	d118      	bne.n	800e918 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f001 ff26 	bl	8010748 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b02      	cmp	r3, #2
 800e902:	d104      	bne.n	800e90e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2205      	movs	r2, #5
 800e908:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e90c:	e006      	b.n	800e91c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2201      	movs	r2, #1
 800e912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e916:	e001      	b.n	800e91c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	e000      	b.n	800e91e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3718      	adds	r7, #24
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b082      	sub	sp, #8
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
 800e92e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d101      	bne.n	800e940 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e93c:	2302      	movs	r3, #2
 800e93e:	e016      	b.n	800e96e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d10f      	bne.n	800e96c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 ff31 	bl	80107c2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	e000      	b.n	800e96e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e984:	2301      	movs	r3, #1
 800e986:	e07b      	b.n	800ea80 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d108      	bne.n	800e9a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e998:	d009      	beq.n	800e9ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	61da      	str	r2, [r3, #28]
 800e9a0:	e005      	b.n	800e9ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d106      	bne.n	800e9ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7f9 ff6d 	bl	80088a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2202      	movs	r2, #2
 800e9d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e9f6:	431a      	orrs	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea00:	431a      	orrs	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	f003 0302 	and.w	r3, r3, #2
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	f003 0301 	and.w	r3, r3, #1
 800ea14:	431a      	orrs	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	699b      	ldr	r3, [r3, #24]
 800ea1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	69db      	ldr	r3, [r3, #28]
 800ea24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea28:	431a      	orrs	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea32:	ea42 0103 	orr.w	r1, r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	0c1b      	lsrs	r3, r3, #16
 800ea4c:	f003 0104 	and.w	r1, r3, #4
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea54:	f003 0210 	and.w	r2, r3, #16
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	69da      	ldr	r2, [r3, #28]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e01a      	b.n	800ead0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eab0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7f9 ff40 	bl	8008938 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	603b      	str	r3, [r7, #0]
 800eae4:	4613      	mov	r3, r2
 800eae6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d101      	bne.n	800eafa <HAL_SPI_Transmit+0x22>
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	e126      	b.n	800ed48 <HAL_SPI_Transmit+0x270>
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2201      	movs	r2, #1
 800eafe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb02:	f7fc fbf5 	bl	800b2f0 <HAL_GetTick>
 800eb06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eb08:	88fb      	ldrh	r3, [r7, #6]
 800eb0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d002      	beq.n	800eb1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb1c:	e10b      	b.n	800ed36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <HAL_SPI_Transmit+0x52>
 800eb24:	88fb      	ldrh	r3, [r7, #6]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d102      	bne.n	800eb30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb2e:	e102      	b.n	800ed36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2203      	movs	r2, #3
 800eb34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	88fa      	ldrh	r2, [r7, #6]
 800eb48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	88fa      	ldrh	r2, [r7, #6]
 800eb4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb76:	d10f      	bne.n	800eb98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eba2:	2b40      	cmp	r3, #64	; 0x40
 800eba4:	d007      	beq.n	800ebb6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebbe:	d14b      	bne.n	800ec58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <HAL_SPI_Transmit+0xf6>
 800ebc8:	8afb      	ldrh	r3, [r7, #22]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d13e      	bne.n	800ec4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd2:	881a      	ldrh	r2, [r3, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebde:	1c9a      	adds	r2, r3, #2
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	3b01      	subs	r3, #1
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ebf2:	e02b      	b.n	800ec4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f003 0302 	and.w	r3, r3, #2
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d112      	bne.n	800ec28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec06:	881a      	ldrh	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec12:	1c9a      	adds	r2, r3, #2
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	86da      	strh	r2, [r3, #54]	; 0x36
 800ec26:	e011      	b.n	800ec4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec28:	f7fc fb62 	bl	800b2f0 <HAL_GetTick>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d803      	bhi.n	800ec40 <HAL_SPI_Transmit+0x168>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3e:	d102      	bne.n	800ec46 <HAL_SPI_Transmit+0x16e>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ec46:	2303      	movs	r3, #3
 800ec48:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ec4a:	e074      	b.n	800ed36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1ce      	bne.n	800ebf4 <HAL_SPI_Transmit+0x11c>
 800ec56:	e04c      	b.n	800ecf2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <HAL_SPI_Transmit+0x18e>
 800ec60:	8afb      	ldrh	r3, [r7, #22]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d140      	bne.n	800ece8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	330c      	adds	r3, #12
 800ec70:	7812      	ldrb	r2, [r2, #0]
 800ec72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ec8c:	e02c      	b.n	800ece8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d113      	bne.n	800ecc4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	330c      	adds	r3, #12
 800eca6:	7812      	ldrb	r2, [r2, #0]
 800eca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	86da      	strh	r2, [r3, #54]	; 0x36
 800ecc2:	e011      	b.n	800ece8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecc4:	f7fc fb14 	bl	800b2f0 <HAL_GetTick>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d803      	bhi.n	800ecdc <HAL_SPI_Transmit+0x204>
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecda:	d102      	bne.n	800ece2 <HAL_SPI_Transmit+0x20a>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ece6:	e026      	b.n	800ed36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1cd      	bne.n	800ec8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ecf2:	69ba      	ldr	r2, [r7, #24]
 800ecf4:	6839      	ldr	r1, [r7, #0]
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f000 fbda 	bl	800f4b0 <SPI_EndRxTxTransaction>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d002      	beq.n	800ed08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2220      	movs	r2, #32
 800ed06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10a      	bne.n	800ed26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed10:	2300      	movs	r3, #0
 800ed12:	613b      	str	r3, [r7, #16]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	613b      	str	r3, [r7, #16]
 800ed24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	77fb      	strb	r3, [r7, #31]
 800ed32:	e000      	b.n	800ed36 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ed34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3720      	adds	r7, #32
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	603b      	str	r3, [r7, #0]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed6c:	d112      	bne.n	800ed94 <HAL_SPI_Receive+0x44>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10e      	bne.n	800ed94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2204      	movs	r2, #4
 800ed7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ed7e:	88fa      	ldrh	r2, [r7, #6]
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	4613      	mov	r3, r2
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f000 f8f1 	bl	800ef72 <HAL_SPI_TransmitReceive>
 800ed90:	4603      	mov	r3, r0
 800ed92:	e0ea      	b.n	800ef6a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d101      	bne.n	800eda2 <HAL_SPI_Receive+0x52>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	e0e3      	b.n	800ef6a <HAL_SPI_Receive+0x21a>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800edaa:	f7fc faa1 	bl	800b2f0 <HAL_GetTick>
 800edae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d002      	beq.n	800edc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800edbc:	2302      	movs	r3, #2
 800edbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 800edc0:	e0ca      	b.n	800ef58 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <HAL_SPI_Receive+0x7e>
 800edc8:	88fb      	ldrh	r3, [r7, #6]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800edd2:	e0c1      	b.n	800ef58 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2204      	movs	r2, #4
 800edd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	88fa      	ldrh	r2, [r7, #6]
 800edec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	88fa      	ldrh	r2, [r7, #6]
 800edf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2200      	movs	r2, #0
 800edf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2200      	movs	r2, #0
 800edfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2200      	movs	r2, #0
 800ee04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee1a:	d10f      	bne.n	800ee3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ee3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee46:	2b40      	cmp	r3, #64	; 0x40
 800ee48:	d007      	beq.n	800ee5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d162      	bne.n	800ef28 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ee62:	e02e      	b.n	800eec2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	f003 0301 	and.w	r3, r3, #1
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d115      	bne.n	800ee9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f103 020c 	add.w	r2, r3, #12
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7e:	7812      	ldrb	r2, [r2, #0]
 800ee80:	b2d2      	uxtb	r2, r2
 800ee82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee88:	1c5a      	adds	r2, r3, #1
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	3b01      	subs	r3, #1
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee9c:	e011      	b.n	800eec2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee9e:	f7fc fa27 	bl	800b2f0 <HAL_GetTick>
 800eea2:	4602      	mov	r2, r0
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	683a      	ldr	r2, [r7, #0]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d803      	bhi.n	800eeb6 <HAL_SPI_Receive+0x166>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb4:	d102      	bne.n	800eebc <HAL_SPI_Receive+0x16c>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eec0:	e04a      	b.n	800ef58 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1cb      	bne.n	800ee64 <HAL_SPI_Receive+0x114>
 800eecc:	e031      	b.n	800ef32 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	f003 0301 	and.w	r3, r3, #1
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d113      	bne.n	800ef04 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee6:	b292      	uxth	r2, r2
 800eee8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	1c9a      	adds	r2, r3, #2
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef02:	e011      	b.n	800ef28 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef04:	f7fc f9f4 	bl	800b2f0 <HAL_GetTick>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d803      	bhi.n	800ef1c <HAL_SPI_Receive+0x1cc>
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1a:	d102      	bne.n	800ef22 <HAL_SPI_Receive+0x1d2>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d102      	bne.n	800ef28 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ef26:	e017      	b.n	800ef58 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1cd      	bne.n	800eece <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef32:	693a      	ldr	r2, [r7, #16]
 800ef34:	6839      	ldr	r1, [r7, #0]
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f000 fa54 	bl	800f3e4 <SPI_EndRxTransaction>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2220      	movs	r2, #32
 800ef46:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ef50:	2301      	movs	r3, #1
 800ef52:	75fb      	strb	r3, [r7, #23]
 800ef54:	e000      	b.n	800ef58 <HAL_SPI_Receive+0x208>
  }

error :
 800ef56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3718      	adds	r7, #24
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b08c      	sub	sp, #48	; 0x30
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	60b9      	str	r1, [r7, #8]
 800ef7c:	607a      	str	r2, [r7, #4]
 800ef7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ef80:	2301      	movs	r3, #1
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d101      	bne.n	800ef98 <HAL_SPI_TransmitReceive+0x26>
 800ef94:	2302      	movs	r3, #2
 800ef96:	e18a      	b.n	800f2ae <HAL_SPI_TransmitReceive+0x33c>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efa0:	f7fc f9a6 	bl	800b2f0 <HAL_GetTick>
 800efa4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800efb6:	887b      	ldrh	r3, [r7, #2]
 800efb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800efba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d00f      	beq.n	800efe2 <HAL_SPI_TransmitReceive+0x70>
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efc8:	d107      	bne.n	800efda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d103      	bne.n	800efda <HAL_SPI_TransmitReceive+0x68>
 800efd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	d003      	beq.n	800efe2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800efda:	2302      	movs	r3, #2
 800efdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800efe0:	e15b      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d005      	beq.n	800eff4 <HAL_SPI_TransmitReceive+0x82>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d002      	beq.n	800eff4 <HAL_SPI_TransmitReceive+0x82>
 800efee:	887b      	ldrh	r3, [r7, #2]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d103      	bne.n	800effc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eff4:	2301      	movs	r3, #1
 800eff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800effa:	e14e      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b04      	cmp	r3, #4
 800f006:	d003      	beq.n	800f010 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	2205      	movs	r2, #5
 800f00c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	887a      	ldrh	r2, [r7, #2]
 800f020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	887a      	ldrh	r2, [r7, #2]
 800f026:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	887a      	ldrh	r2, [r7, #2]
 800f032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	887a      	ldrh	r2, [r7, #2]
 800f038:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2200      	movs	r2, #0
 800f044:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f050:	2b40      	cmp	r3, #64	; 0x40
 800f052:	d007      	beq.n	800f064 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f06c:	d178      	bne.n	800f160 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d002      	beq.n	800f07c <HAL_SPI_TransmitReceive+0x10a>
 800f076:	8b7b      	ldrh	r3, [r7, #26]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d166      	bne.n	800f14a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f080:	881a      	ldrh	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f08c:	1c9a      	adds	r2, r3, #2
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f096:	b29b      	uxth	r3, r3
 800f098:	3b01      	subs	r3, #1
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0a0:	e053      	b.n	800f14a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	f003 0302 	and.w	r3, r3, #2
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d11b      	bne.n	800f0e8 <HAL_SPI_TransmitReceive+0x176>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d016      	beq.n	800f0e8 <HAL_SPI_TransmitReceive+0x176>
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d113      	bne.n	800f0e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c4:	881a      	ldrh	r2, [r3, #0]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d0:	1c9a      	adds	r2, r3, #2
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d119      	bne.n	800f12a <HAL_SPI_TransmitReceive+0x1b8>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d014      	beq.n	800f12a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68da      	ldr	r2, [r3, #12]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10a:	b292      	uxth	r2, r2
 800f10c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f112:	1c9a      	adds	r2, r3, #2
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3b01      	subs	r3, #1
 800f120:	b29a      	uxth	r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f126:	2301      	movs	r3, #1
 800f128:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f12a:	f7fc f8e1 	bl	800b2f0 <HAL_GetTick>
 800f12e:	4602      	mov	r2, r0
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f136:	429a      	cmp	r2, r3
 800f138:	d807      	bhi.n	800f14a <HAL_SPI_TransmitReceive+0x1d8>
 800f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f140:	d003      	beq.n	800f14a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f142:	2303      	movs	r3, #3
 800f144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f148:	e0a7      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1a6      	bne.n	800f0a2 <HAL_SPI_TransmitReceive+0x130>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f158:	b29b      	uxth	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1a1      	bne.n	800f0a2 <HAL_SPI_TransmitReceive+0x130>
 800f15e:	e07c      	b.n	800f25a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <HAL_SPI_TransmitReceive+0x1fc>
 800f168:	8b7b      	ldrh	r3, [r7, #26]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d16b      	bne.n	800f246 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	330c      	adds	r3, #12
 800f178:	7812      	ldrb	r2, [r2, #0]
 800f17a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	3b01      	subs	r3, #1
 800f18e:	b29a      	uxth	r2, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f194:	e057      	b.n	800f246 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f003 0302 	and.w	r3, r3, #2
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d11c      	bne.n	800f1de <HAL_SPI_TransmitReceive+0x26c>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d017      	beq.n	800f1de <HAL_SPI_TransmitReceive+0x26c>
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d114      	bne.n	800f1de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	330c      	adds	r3, #12
 800f1be:	7812      	ldrb	r2, [r2, #0]
 800f1c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1c6:	1c5a      	adds	r2, r3, #1
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d119      	bne.n	800f220 <HAL_SPI_TransmitReceive+0x2ae>
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d014      	beq.n	800f220 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68da      	ldr	r2, [r3, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f200:	b2d2      	uxtb	r2, r2
 800f202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f212:	b29b      	uxth	r3, r3
 800f214:	3b01      	subs	r3, #1
 800f216:	b29a      	uxth	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f21c:	2301      	movs	r3, #1
 800f21e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f220:	f7fc f866 	bl	800b2f0 <HAL_GetTick>
 800f224:	4602      	mov	r2, r0
 800f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d803      	bhi.n	800f238 <HAL_SPI_TransmitReceive+0x2c6>
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f236:	d102      	bne.n	800f23e <HAL_SPI_TransmitReceive+0x2cc>
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d103      	bne.n	800f246 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f23e:	2303      	movs	r3, #3
 800f240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f244:	e029      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d1a2      	bne.n	800f196 <HAL_SPI_TransmitReceive+0x224>
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f254:	b29b      	uxth	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d19d      	bne.n	800f196 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f25c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f000 f926 	bl	800f4b0 <SPI_EndRxTxTransaction>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d006      	beq.n	800f278 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2220      	movs	r2, #32
 800f274:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f276:	e010      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d10b      	bne.n	800f298 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f280:	2300      	movs	r3, #0
 800f282:	617b      	str	r3, [r7, #20]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	617b      	str	r3, [r7, #20]
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	e000      	b.n	800f29a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f298:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f2aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3730      	adds	r7, #48	; 0x30
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f2b6:	b480      	push	{r7}
 800f2b8:	b083      	sub	sp, #12
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f2c4:	b2db      	uxtb	r3, r3
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr
	...

0800f2d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b088      	sub	sp, #32
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	603b      	str	r3, [r7, #0]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f2e4:	f7fc f804 	bl	800b2f0 <HAL_GetTick>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	1a9b      	subs	r3, r3, r2
 800f2ee:	683a      	ldr	r2, [r7, #0]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f2f4:	f7fb fffc 	bl	800b2f0 <HAL_GetTick>
 800f2f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f2fa:	4b39      	ldr	r3, [pc, #228]	; (800f3e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	015b      	lsls	r3, r3, #5
 800f300:	0d1b      	lsrs	r3, r3, #20
 800f302:	69fa      	ldr	r2, [r7, #28]
 800f304:	fb02 f303 	mul.w	r3, r2, r3
 800f308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f30a:	e054      	b.n	800f3b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f312:	d050      	beq.n	800f3b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f314:	f7fb ffec 	bl	800b2f0 <HAL_GetTick>
 800f318:	4602      	mov	r2, r0
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	1ad3      	subs	r3, r2, r3
 800f31e:	69fa      	ldr	r2, [r7, #28]
 800f320:	429a      	cmp	r2, r3
 800f322:	d902      	bls.n	800f32a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d13d      	bne.n	800f3a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	685a      	ldr	r2, [r3, #4]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f342:	d111      	bne.n	800f368 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f34c:	d004      	beq.n	800f358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f356:	d107      	bne.n	800f368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f370:	d10f      	bne.n	800f392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f380:	601a      	str	r2, [r3, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e017      	b.n	800f3d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d101      	bne.n	800f3b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689a      	ldr	r2, [r3, #8]
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	4013      	ands	r3, r2
 800f3c0:	68ba      	ldr	r2, [r7, #8]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	bf0c      	ite	eq
 800f3c6:	2301      	moveq	r3, #1
 800f3c8:	2300      	movne	r3, #0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d19b      	bne.n	800f30c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3720      	adds	r7, #32
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	200008bc 	.word	0x200008bc

0800f3e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af02      	add	r7, sp, #8
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3f8:	d111      	bne.n	800f41e <SPI_EndRxTransaction+0x3a>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f402:	d004      	beq.n	800f40e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f40c:	d107      	bne.n	800f41e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f41c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f426:	d12a      	bne.n	800f47e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f430:	d012      	beq.n	800f458 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2200      	movs	r2, #0
 800f43a:	2180      	movs	r1, #128	; 0x80
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff ff49 	bl	800f2d4 <SPI_WaitFlagStateUntilTimeout>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d02d      	beq.n	800f4a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44c:	f043 0220 	orr.w	r2, r3, #32
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f454:	2303      	movs	r3, #3
 800f456:	e026      	b.n	800f4a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2200      	movs	r2, #0
 800f460:	2101      	movs	r1, #1
 800f462:	68f8      	ldr	r0, [r7, #12]
 800f464:	f7ff ff36 	bl	800f2d4 <SPI_WaitFlagStateUntilTimeout>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d01a      	beq.n	800f4a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f472:	f043 0220 	orr.w	r2, r3, #32
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f47a:	2303      	movs	r3, #3
 800f47c:	e013      	b.n	800f4a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2200      	movs	r2, #0
 800f486:	2101      	movs	r1, #1
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f7ff ff23 	bl	800f2d4 <SPI_WaitFlagStateUntilTimeout>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d007      	beq.n	800f4a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f498:	f043 0220 	orr.w	r2, r3, #32
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	e000      	b.n	800f4a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f4a4:	2300      	movs	r3, #0
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
	...

0800f4b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b088      	sub	sp, #32
 800f4b4:	af02      	add	r7, sp, #8
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f4bc:	4b1b      	ldr	r3, [pc, #108]	; (800f52c <SPI_EndRxTxTransaction+0x7c>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a1b      	ldr	r2, [pc, #108]	; (800f530 <SPI_EndRxTxTransaction+0x80>)
 800f4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c6:	0d5b      	lsrs	r3, r3, #21
 800f4c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4cc:	fb02 f303 	mul.w	r3, r2, r3
 800f4d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4da:	d112      	bne.n	800f502 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	2180      	movs	r1, #128	; 0x80
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff fef4 	bl	800f2d4 <SPI_WaitFlagStateUntilTimeout>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d016      	beq.n	800f520 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f6:	f043 0220 	orr.w	r2, r3, #32
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4fe:	2303      	movs	r3, #3
 800f500:	e00f      	b.n	800f522 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00a      	beq.n	800f51e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	3b01      	subs	r3, #1
 800f50c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f518:	2b80      	cmp	r3, #128	; 0x80
 800f51a:	d0f2      	beq.n	800f502 <SPI_EndRxTxTransaction+0x52>
 800f51c:	e000      	b.n	800f520 <SPI_EndRxTxTransaction+0x70>
        break;
 800f51e:	bf00      	nop
  }

  return HAL_OK;
 800f520:	2300      	movs	r3, #0
}
 800f522:	4618      	mov	r0, r3
 800f524:	3718      	adds	r7, #24
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200008bc 	.word	0x200008bc
 800f530:	165e9f81 	.word	0x165e9f81

0800f534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d101      	bne.n	800f546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e041      	b.n	800f5ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7f9 fbde 	bl	8008d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3304      	adds	r3, #4
 800f570:	4619      	mov	r1, r3
 800f572:	4610      	mov	r0, r2
 800f574:	f000 fa96 	bl	800faa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d001      	beq.n	800f5ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	e04e      	b.n	800f68a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68da      	ldr	r2, [r3, #12]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f042 0201 	orr.w	r2, r2, #1
 800f602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a23      	ldr	r2, [pc, #140]	; (800f698 <HAL_TIM_Base_Start_IT+0xc4>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d022      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f616:	d01d      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a1f      	ldr	r2, [pc, #124]	; (800f69c <HAL_TIM_Base_Start_IT+0xc8>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d018      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a1e      	ldr	r2, [pc, #120]	; (800f6a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d013      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a1c      	ldr	r2, [pc, #112]	; (800f6a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d00e      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a1b      	ldr	r2, [pc, #108]	; (800f6a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d009      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a19      	ldr	r2, [pc, #100]	; (800f6ac <HAL_TIM_Base_Start_IT+0xd8>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d004      	beq.n	800f654 <HAL_TIM_Base_Start_IT+0x80>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a18      	ldr	r2, [pc, #96]	; (800f6b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d111      	bne.n	800f678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f003 0307 	and.w	r3, r3, #7
 800f65e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b06      	cmp	r3, #6
 800f664:	d010      	beq.n	800f688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f042 0201 	orr.w	r2, r2, #1
 800f674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f676:	e007      	b.n	800f688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f042 0201 	orr.w	r2, r2, #1
 800f686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3714      	adds	r7, #20
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	40010000 	.word	0x40010000
 800f69c:	40000400 	.word	0x40000400
 800f6a0:	40000800 	.word	0x40000800
 800f6a4:	40000c00 	.word	0x40000c00
 800f6a8:	40010400 	.word	0x40010400
 800f6ac:	40014000 	.word	0x40014000
 800f6b0:	40001800 	.word	0x40001800

0800f6b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	d122      	bne.n	800f710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	f003 0302 	and.w	r3, r3, #2
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d11b      	bne.n	800f710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f06f 0202 	mvn.w	r2, #2
 800f6e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	699b      	ldr	r3, [r3, #24]
 800f6ee:	f003 0303 	and.w	r3, r3, #3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d003      	beq.n	800f6fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f9b5 	bl	800fa66 <HAL_TIM_IC_CaptureCallback>
 800f6fc:	e005      	b.n	800f70a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f9a7 	bl	800fa52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f9b8 	bl	800fa7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	f003 0304 	and.w	r3, r3, #4
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d122      	bne.n	800f764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	f003 0304 	and.w	r3, r3, #4
 800f728:	2b04      	cmp	r3, #4
 800f72a:	d11b      	bne.n	800f764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f06f 0204 	mvn.w	r2, #4
 800f734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2202      	movs	r2, #2
 800f73a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	699b      	ldr	r3, [r3, #24]
 800f742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f746:	2b00      	cmp	r3, #0
 800f748:	d003      	beq.n	800f752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f98b 	bl	800fa66 <HAL_TIM_IC_CaptureCallback>
 800f750:	e005      	b.n	800f75e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 f97d 	bl	800fa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 f98e 	bl	800fa7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	f003 0308 	and.w	r3, r3, #8
 800f76e:	2b08      	cmp	r3, #8
 800f770:	d122      	bne.n	800f7b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	f003 0308 	and.w	r3, r3, #8
 800f77c:	2b08      	cmp	r3, #8
 800f77e:	d11b      	bne.n	800f7b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f06f 0208 	mvn.w	r2, #8
 800f788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2204      	movs	r2, #4
 800f78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	69db      	ldr	r3, [r3, #28]
 800f796:	f003 0303 	and.w	r3, r3, #3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d003      	beq.n	800f7a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f961 	bl	800fa66 <HAL_TIM_IC_CaptureCallback>
 800f7a4:	e005      	b.n	800f7b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f953 	bl	800fa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f964 	bl	800fa7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	f003 0310 	and.w	r3, r3, #16
 800f7c2:	2b10      	cmp	r3, #16
 800f7c4:	d122      	bne.n	800f80c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	f003 0310 	and.w	r3, r3, #16
 800f7d0:	2b10      	cmp	r3, #16
 800f7d2:	d11b      	bne.n	800f80c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f06f 0210 	mvn.w	r2, #16
 800f7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2208      	movs	r2, #8
 800f7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	69db      	ldr	r3, [r3, #28]
 800f7ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d003      	beq.n	800f7fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 f937 	bl	800fa66 <HAL_TIM_IC_CaptureCallback>
 800f7f8:	e005      	b.n	800f806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 f929 	bl	800fa52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 f93a 	bl	800fa7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	691b      	ldr	r3, [r3, #16]
 800f812:	f003 0301 	and.w	r3, r3, #1
 800f816:	2b01      	cmp	r3, #1
 800f818:	d10e      	bne.n	800f838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	2b01      	cmp	r3, #1
 800f826:	d107      	bne.n	800f838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f06f 0201 	mvn.w	r2, #1
 800f830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7f8 fe52 	bl	80084dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f842:	2b80      	cmp	r3, #128	; 0x80
 800f844:	d10e      	bne.n	800f864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f850:	2b80      	cmp	r3, #128	; 0x80
 800f852:	d107      	bne.n	800f864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f85c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fae0 	bl	800fe24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f86e:	2b40      	cmp	r3, #64	; 0x40
 800f870:	d10e      	bne.n	800f890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f87c:	2b40      	cmp	r3, #64	; 0x40
 800f87e:	d107      	bne.n	800f890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 f8ff 	bl	800fa8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	691b      	ldr	r3, [r3, #16]
 800f896:	f003 0320 	and.w	r3, r3, #32
 800f89a:	2b20      	cmp	r3, #32
 800f89c:	d10e      	bne.n	800f8bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	f003 0320 	and.w	r3, r3, #32
 800f8a8:	2b20      	cmp	r3, #32
 800f8aa:	d107      	bne.n	800f8bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f06f 0220 	mvn.w	r2, #32
 800f8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 faaa 	bl	800fe10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d101      	bne.n	800f8e0 <HAL_TIM_ConfigClockSource+0x1c>
 800f8dc:	2302      	movs	r3, #2
 800f8de:	e0b4      	b.n	800fa4a <HAL_TIM_ConfigClockSource+0x186>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2202      	movs	r2, #2
 800f8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f8fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f918:	d03e      	beq.n	800f998 <HAL_TIM_ConfigClockSource+0xd4>
 800f91a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f91e:	f200 8087 	bhi.w	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f926:	f000 8086 	beq.w	800fa36 <HAL_TIM_ConfigClockSource+0x172>
 800f92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f92e:	d87f      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f930:	2b70      	cmp	r3, #112	; 0x70
 800f932:	d01a      	beq.n	800f96a <HAL_TIM_ConfigClockSource+0xa6>
 800f934:	2b70      	cmp	r3, #112	; 0x70
 800f936:	d87b      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f938:	2b60      	cmp	r3, #96	; 0x60
 800f93a:	d050      	beq.n	800f9de <HAL_TIM_ConfigClockSource+0x11a>
 800f93c:	2b60      	cmp	r3, #96	; 0x60
 800f93e:	d877      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f940:	2b50      	cmp	r3, #80	; 0x50
 800f942:	d03c      	beq.n	800f9be <HAL_TIM_ConfigClockSource+0xfa>
 800f944:	2b50      	cmp	r3, #80	; 0x50
 800f946:	d873      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f948:	2b40      	cmp	r3, #64	; 0x40
 800f94a:	d058      	beq.n	800f9fe <HAL_TIM_ConfigClockSource+0x13a>
 800f94c:	2b40      	cmp	r3, #64	; 0x40
 800f94e:	d86f      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f950:	2b30      	cmp	r3, #48	; 0x30
 800f952:	d064      	beq.n	800fa1e <HAL_TIM_ConfigClockSource+0x15a>
 800f954:	2b30      	cmp	r3, #48	; 0x30
 800f956:	d86b      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f958:	2b20      	cmp	r3, #32
 800f95a:	d060      	beq.n	800fa1e <HAL_TIM_ConfigClockSource+0x15a>
 800f95c:	2b20      	cmp	r3, #32
 800f95e:	d867      	bhi.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
 800f960:	2b00      	cmp	r3, #0
 800f962:	d05c      	beq.n	800fa1e <HAL_TIM_ConfigClockSource+0x15a>
 800f964:	2b10      	cmp	r3, #16
 800f966:	d05a      	beq.n	800fa1e <HAL_TIM_ConfigClockSource+0x15a>
 800f968:	e062      	b.n	800fa30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6818      	ldr	r0, [r3, #0]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	6899      	ldr	r1, [r3, #8]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	f000 f9ad 	bl	800fcd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f98c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	609a      	str	r2, [r3, #8]
      break;
 800f996:	e04f      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6818      	ldr	r0, [r3, #0]
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	6899      	ldr	r1, [r3, #8]
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	f000 f996 	bl	800fcd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	689a      	ldr	r2, [r3, #8]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f9ba:	609a      	str	r2, [r3, #8]
      break;
 800f9bc:	e03c      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6818      	ldr	r0, [r3, #0]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	6859      	ldr	r1, [r3, #4]
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	f000 f90a 	bl	800fbe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2150      	movs	r1, #80	; 0x50
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 f963 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f9dc:	e02c      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6818      	ldr	r0, [r3, #0]
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	6859      	ldr	r1, [r3, #4]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	f000 f929 	bl	800fc42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2160      	movs	r1, #96	; 0x60
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f000 f953 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800f9fc:	e01c      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6818      	ldr	r0, [r3, #0]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	6859      	ldr	r1, [r3, #4]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	f000 f8ea 	bl	800fbe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2140      	movs	r1, #64	; 0x40
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 f943 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800fa1c:	e00c      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4619      	mov	r1, r3
 800fa28:	4610      	mov	r0, r2
 800fa2a:	f000 f93a 	bl	800fca2 <TIM_ITRx_SetConfig>
      break;
 800fa2e:	e003      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	73fb      	strb	r3, [r7, #15]
      break;
 800fa34:	e000      	b.n	800fa38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fa36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa52:	b480      	push	{r7}
 800fa54:	b083      	sub	sp, #12
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fa5a:	bf00      	nop
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa66:	b480      	push	{r7}
 800fa68:	b083      	sub	sp, #12
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa6e:	bf00      	nop
 800fa70:	370c      	adds	r7, #12
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa7a:	b480      	push	{r7}
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa82:	bf00      	nop
 800fa84:	370c      	adds	r7, #12
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr

0800fa8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa8e:	b480      	push	{r7}
 800fa90:	b083      	sub	sp, #12
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa96:	bf00      	nop
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
	...

0800faa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b085      	sub	sp, #20
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4a40      	ldr	r2, [pc, #256]	; (800fbb8 <TIM_Base_SetConfig+0x114>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d013      	beq.n	800fae4 <TIM_Base_SetConfig+0x40>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fac2:	d00f      	beq.n	800fae4 <TIM_Base_SetConfig+0x40>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a3d      	ldr	r2, [pc, #244]	; (800fbbc <TIM_Base_SetConfig+0x118>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d00b      	beq.n	800fae4 <TIM_Base_SetConfig+0x40>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4a3c      	ldr	r2, [pc, #240]	; (800fbc0 <TIM_Base_SetConfig+0x11c>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d007      	beq.n	800fae4 <TIM_Base_SetConfig+0x40>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a3b      	ldr	r2, [pc, #236]	; (800fbc4 <TIM_Base_SetConfig+0x120>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d003      	beq.n	800fae4 <TIM_Base_SetConfig+0x40>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	4a3a      	ldr	r2, [pc, #232]	; (800fbc8 <TIM_Base_SetConfig+0x124>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d108      	bne.n	800faf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a2f      	ldr	r2, [pc, #188]	; (800fbb8 <TIM_Base_SetConfig+0x114>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d02b      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb04:	d027      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4a2c      	ldr	r2, [pc, #176]	; (800fbbc <TIM_Base_SetConfig+0x118>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d023      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a2b      	ldr	r2, [pc, #172]	; (800fbc0 <TIM_Base_SetConfig+0x11c>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d01f      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a2a      	ldr	r2, [pc, #168]	; (800fbc4 <TIM_Base_SetConfig+0x120>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d01b      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4a29      	ldr	r2, [pc, #164]	; (800fbc8 <TIM_Base_SetConfig+0x124>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d017      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4a28      	ldr	r2, [pc, #160]	; (800fbcc <TIM_Base_SetConfig+0x128>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d013      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4a27      	ldr	r2, [pc, #156]	; (800fbd0 <TIM_Base_SetConfig+0x12c>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d00f      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4a26      	ldr	r2, [pc, #152]	; (800fbd4 <TIM_Base_SetConfig+0x130>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d00b      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4a25      	ldr	r2, [pc, #148]	; (800fbd8 <TIM_Base_SetConfig+0x134>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d007      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4a24      	ldr	r2, [pc, #144]	; (800fbdc <TIM_Base_SetConfig+0x138>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d003      	beq.n	800fb56 <TIM_Base_SetConfig+0xb2>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4a23      	ldr	r2, [pc, #140]	; (800fbe0 <TIM_Base_SetConfig+0x13c>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d108      	bne.n	800fb68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	689a      	ldr	r2, [r3, #8]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4a0a      	ldr	r2, [pc, #40]	; (800fbb8 <TIM_Base_SetConfig+0x114>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d003      	beq.n	800fb9c <TIM_Base_SetConfig+0xf8>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4a0c      	ldr	r2, [pc, #48]	; (800fbc8 <TIM_Base_SetConfig+0x124>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d103      	bne.n	800fba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	691a      	ldr	r2, [r3, #16]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	615a      	str	r2, [r3, #20]
}
 800fbaa:	bf00      	nop
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	40010000 	.word	0x40010000
 800fbbc:	40000400 	.word	0x40000400
 800fbc0:	40000800 	.word	0x40000800
 800fbc4:	40000c00 	.word	0x40000c00
 800fbc8:	40010400 	.word	0x40010400
 800fbcc:	40014000 	.word	0x40014000
 800fbd0:	40014400 	.word	0x40014400
 800fbd4:	40014800 	.word	0x40014800
 800fbd8:	40001800 	.word	0x40001800
 800fbdc:	40001c00 	.word	0x40001c00
 800fbe0:	40002000 	.word	0x40002000

0800fbe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6a1b      	ldr	r3, [r3, #32]
 800fbf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	f023 0201 	bic.w	r2, r3, #1
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f023 030a 	bic.w	r3, r3, #10
 800fc20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc22:	697a      	ldr	r2, [r7, #20]
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	4313      	orrs	r3, r2
 800fc28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	693a      	ldr	r2, [r7, #16]
 800fc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	621a      	str	r2, [r3, #32]
}
 800fc36:	bf00      	nop
 800fc38:	371c      	adds	r7, #28
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr

0800fc42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc42:	b480      	push	{r7}
 800fc44:	b087      	sub	sp, #28
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	60f8      	str	r0, [r7, #12]
 800fc4a:	60b9      	str	r1, [r7, #8]
 800fc4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	f023 0210 	bic.w	r2, r3, #16
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	699b      	ldr	r3, [r3, #24]
 800fc5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6a1b      	ldr	r3, [r3, #32]
 800fc64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fc6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	031b      	lsls	r3, r3, #12
 800fc72:	697a      	ldr	r2, [r7, #20]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fc7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	011b      	lsls	r3, r3, #4
 800fc84:	693a      	ldr	r2, [r7, #16]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	693a      	ldr	r2, [r7, #16]
 800fc94:	621a      	str	r2, [r3, #32]
}
 800fc96:	bf00      	nop
 800fc98:	371c      	adds	r7, #28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fca2:	b480      	push	{r7}
 800fca4:	b085      	sub	sp, #20
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	f043 0307 	orr.w	r3, r3, #7
 800fcc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	609a      	str	r2, [r3, #8]
}
 800fccc:	bf00      	nop
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fcf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	021a      	lsls	r2, r3, #8
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	431a      	orrs	r2, r3
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	609a      	str	r2, [r3, #8]
}
 800fd0c:	bf00      	nop
 800fd0e:	371c      	adds	r7, #28
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d101      	bne.n	800fd30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	e05a      	b.n	800fde6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2202      	movs	r2, #2
 800fd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68fa      	ldr	r2, [r7, #12]
 800fd68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a21      	ldr	r2, [pc, #132]	; (800fdf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d022      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd7c:	d01d      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a1d      	ldr	r2, [pc, #116]	; (800fdf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fd84:	4293      	cmp	r3, r2
 800fd86:	d018      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4a1b      	ldr	r2, [pc, #108]	; (800fdfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d013      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a1a      	ldr	r2, [pc, #104]	; (800fe00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d00e      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4a18      	ldr	r2, [pc, #96]	; (800fe04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d009      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a17      	ldr	r2, [pc, #92]	; (800fe08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d004      	beq.n	800fdba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a15      	ldr	r2, [pc, #84]	; (800fe0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d10c      	bne.n	800fdd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68ba      	ldr	r2, [r7, #8]
 800fdd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	40010000 	.word	0x40010000
 800fdf8:	40000400 	.word	0x40000400
 800fdfc:	40000800 	.word	0x40000800
 800fe00:	40000c00 	.word	0x40000c00
 800fe04:	40010400 	.word	0x40010400
 800fe08:	40014000 	.word	0x40014000
 800fe0c:	40001800 	.word	0x40001800

0800fe10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d101      	bne.n	800fe4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e03f      	b.n	800feca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d106      	bne.n	800fe64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f8 ffa8 	bl	8008db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2224      	movs	r2, #36	; 0x24
 800fe68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	68da      	ldr	r2, [r3, #12]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fe7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f929 	bl	80100d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	691a      	ldr	r2, [r3, #16]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	695a      	ldr	r2, [r3, #20]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	68da      	ldr	r2, [r3, #12]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800feb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2220      	movs	r2, #32
 800febc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2220      	movs	r2, #32
 800fec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fec8:	2300      	movs	r3, #0
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b08a      	sub	sp, #40	; 0x28
 800fed6:	af02      	add	r7, sp, #8
 800fed8:	60f8      	str	r0, [r7, #12]
 800feda:	60b9      	str	r1, [r7, #8]
 800fedc:	603b      	str	r3, [r7, #0]
 800fede:	4613      	mov	r3, r2
 800fee0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fee2:	2300      	movs	r3, #0
 800fee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b20      	cmp	r3, #32
 800fef0:	d17c      	bne.n	800ffec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <HAL_UART_Transmit+0x2c>
 800fef8:	88fb      	ldrh	r3, [r7, #6]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d101      	bne.n	800ff02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e075      	b.n	800ffee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d101      	bne.n	800ff10 <HAL_UART_Transmit+0x3e>
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	e06e      	b.n	800ffee <HAL_UART_Transmit+0x11c>
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2221      	movs	r2, #33	; 0x21
 800ff22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff26:	f7fb f9e3 	bl	800b2f0 <HAL_GetTick>
 800ff2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	88fa      	ldrh	r2, [r7, #6]
 800ff30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	88fa      	ldrh	r2, [r7, #6]
 800ff36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff40:	d108      	bne.n	800ff54 <HAL_UART_Transmit+0x82>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d104      	bne.n	800ff54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	61bb      	str	r3, [r7, #24]
 800ff52:	e003      	b.n	800ff5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ff64:	e02a      	b.n	800ffbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	2180      	movs	r1, #128	; 0x80
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f000 f840 	bl	800fff6 <UART_WaitOnFlagUntilTimeout>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	e036      	b.n	800ffee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d10b      	bne.n	800ff9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	881b      	ldrh	r3, [r3, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	3302      	adds	r3, #2
 800ff9a:	61bb      	str	r3, [r7, #24]
 800ff9c:	e007      	b.n	800ffae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	781a      	ldrb	r2, [r3, #0]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1cf      	bne.n	800ff66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2140      	movs	r1, #64	; 0x40
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f000 f810 	bl	800fff6 <UART_WaitOnFlagUntilTimeout>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e006      	b.n	800ffee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2220      	movs	r2, #32
 800ffe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	e000      	b.n	800ffee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ffec:	2302      	movs	r3, #2
  }
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3720      	adds	r7, #32
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b090      	sub	sp, #64	; 0x40
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	603b      	str	r3, [r7, #0]
 8010002:	4613      	mov	r3, r2
 8010004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010006:	e050      	b.n	80100aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801000a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000e:	d04c      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010012:	2b00      	cmp	r3, #0
 8010014:	d007      	beq.n	8010026 <UART_WaitOnFlagUntilTimeout+0x30>
 8010016:	f7fb f96b 	bl	800b2f0 <HAL_GetTick>
 801001a:	4602      	mov	r2, r0
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010022:	429a      	cmp	r2, r3
 8010024:	d241      	bcs.n	80100aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	330c      	adds	r3, #12
 801002c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010030:	e853 3f00 	ldrex	r3, [r3]
 8010034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801003c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	330c      	adds	r3, #12
 8010044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010046:	637a      	str	r2, [r7, #52]	; 0x34
 8010048:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801004a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801004c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801004e:	e841 2300 	strex	r3, r2, [r1]
 8010052:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1e5      	bne.n	8010026 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3314      	adds	r3, #20
 8010060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	e853 3f00 	ldrex	r3, [r3]
 8010068:	613b      	str	r3, [r7, #16]
   return(result);
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	f023 0301 	bic.w	r3, r3, #1
 8010070:	63bb      	str	r3, [r7, #56]	; 0x38
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3314      	adds	r3, #20
 8010078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801007a:	623a      	str	r2, [r7, #32]
 801007c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007e:	69f9      	ldr	r1, [r7, #28]
 8010080:	6a3a      	ldr	r2, [r7, #32]
 8010082:	e841 2300 	strex	r3, r2, [r1]
 8010086:	61bb      	str	r3, [r7, #24]
   return(result);
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1e5      	bne.n	801005a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2220      	movs	r2, #32
 8010092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2220      	movs	r2, #32
 801009a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80100a6:	2303      	movs	r3, #3
 80100a8:	e00f      	b.n	80100ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	4013      	ands	r3, r2
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	bf0c      	ite	eq
 80100ba:	2301      	moveq	r3, #1
 80100bc:	2300      	movne	r3, #0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	461a      	mov	r2, r3
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d09f      	beq.n	8010008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3740      	adds	r7, #64	; 0x40
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80100d8:	b0c0      	sub	sp, #256	; 0x100
 80100da:	af00      	add	r7, sp, #0
 80100dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	691b      	ldr	r3, [r3, #16]
 80100e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80100ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100f0:	68d9      	ldr	r1, [r3, #12]
 80100f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	ea40 0301 	orr.w	r3, r0, r1
 80100fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80100fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010102:	689a      	ldr	r2, [r3, #8]
 8010104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	431a      	orrs	r2, r3
 801010c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010110:	695b      	ldr	r3, [r3, #20]
 8010112:	431a      	orrs	r2, r3
 8010114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	4313      	orrs	r3, r2
 801011c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801012c:	f021 010c 	bic.w	r1, r1, #12
 8010130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801013a:	430b      	orrs	r3, r1
 801013c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801013e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801014a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801014e:	6999      	ldr	r1, [r3, #24]
 8010150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	ea40 0301 	orr.w	r3, r0, r1
 801015a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801015c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	4b8f      	ldr	r3, [pc, #572]	; (80103a0 <UART_SetConfig+0x2cc>)
 8010164:	429a      	cmp	r2, r3
 8010166:	d005      	beq.n	8010174 <UART_SetConfig+0xa0>
 8010168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	4b8d      	ldr	r3, [pc, #564]	; (80103a4 <UART_SetConfig+0x2d0>)
 8010170:	429a      	cmp	r2, r3
 8010172:	d104      	bne.n	801017e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010174:	f7fe f968 	bl	800e448 <HAL_RCC_GetPCLK2Freq>
 8010178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801017c:	e003      	b.n	8010186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801017e:	f7fe f94f 	bl	800e420 <HAL_RCC_GetPCLK1Freq>
 8010182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801018a:	69db      	ldr	r3, [r3, #28]
 801018c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010190:	f040 810c 	bne.w	80103ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010198:	2200      	movs	r2, #0
 801019a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801019e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80101a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80101a6:	4622      	mov	r2, r4
 80101a8:	462b      	mov	r3, r5
 80101aa:	1891      	adds	r1, r2, r2
 80101ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80101ae:	415b      	adcs	r3, r3
 80101b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80101b6:	4621      	mov	r1, r4
 80101b8:	eb12 0801 	adds.w	r8, r2, r1
 80101bc:	4629      	mov	r1, r5
 80101be:	eb43 0901 	adc.w	r9, r3, r1
 80101c2:	f04f 0200 	mov.w	r2, #0
 80101c6:	f04f 0300 	mov.w	r3, #0
 80101ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80101ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80101d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80101d6:	4690      	mov	r8, r2
 80101d8:	4699      	mov	r9, r3
 80101da:	4623      	mov	r3, r4
 80101dc:	eb18 0303 	adds.w	r3, r8, r3
 80101e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80101e4:	462b      	mov	r3, r5
 80101e6:	eb49 0303 	adc.w	r3, r9, r3
 80101ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80101ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80101fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80101fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010202:	460b      	mov	r3, r1
 8010204:	18db      	adds	r3, r3, r3
 8010206:	653b      	str	r3, [r7, #80]	; 0x50
 8010208:	4613      	mov	r3, r2
 801020a:	eb42 0303 	adc.w	r3, r2, r3
 801020e:	657b      	str	r3, [r7, #84]	; 0x54
 8010210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8010218:	f7f6 fdac 	bl	8006d74 <__aeabi_uldivmod>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	4b61      	ldr	r3, [pc, #388]	; (80103a8 <UART_SetConfig+0x2d4>)
 8010222:	fba3 2302 	umull	r2, r3, r3, r2
 8010226:	095b      	lsrs	r3, r3, #5
 8010228:	011c      	lsls	r4, r3, #4
 801022a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801022e:	2200      	movs	r2, #0
 8010230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8010238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801023c:	4642      	mov	r2, r8
 801023e:	464b      	mov	r3, r9
 8010240:	1891      	adds	r1, r2, r2
 8010242:	64b9      	str	r1, [r7, #72]	; 0x48
 8010244:	415b      	adcs	r3, r3
 8010246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801024c:	4641      	mov	r1, r8
 801024e:	eb12 0a01 	adds.w	sl, r2, r1
 8010252:	4649      	mov	r1, r9
 8010254:	eb43 0b01 	adc.w	fp, r3, r1
 8010258:	f04f 0200 	mov.w	r2, #0
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801026c:	4692      	mov	sl, r2
 801026e:	469b      	mov	fp, r3
 8010270:	4643      	mov	r3, r8
 8010272:	eb1a 0303 	adds.w	r3, sl, r3
 8010276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801027a:	464b      	mov	r3, r9
 801027c:	eb4b 0303 	adc.w	r3, fp, r3
 8010280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8010294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010298:	460b      	mov	r3, r1
 801029a:	18db      	adds	r3, r3, r3
 801029c:	643b      	str	r3, [r7, #64]	; 0x40
 801029e:	4613      	mov	r3, r2
 80102a0:	eb42 0303 	adc.w	r3, r2, r3
 80102a4:	647b      	str	r3, [r7, #68]	; 0x44
 80102a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80102aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80102ae:	f7f6 fd61 	bl	8006d74 <__aeabi_uldivmod>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4611      	mov	r1, r2
 80102b8:	4b3b      	ldr	r3, [pc, #236]	; (80103a8 <UART_SetConfig+0x2d4>)
 80102ba:	fba3 2301 	umull	r2, r3, r3, r1
 80102be:	095b      	lsrs	r3, r3, #5
 80102c0:	2264      	movs	r2, #100	; 0x64
 80102c2:	fb02 f303 	mul.w	r3, r2, r3
 80102c6:	1acb      	subs	r3, r1, r3
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80102ce:	4b36      	ldr	r3, [pc, #216]	; (80103a8 <UART_SetConfig+0x2d4>)
 80102d0:	fba3 2302 	umull	r2, r3, r3, r2
 80102d4:	095b      	lsrs	r3, r3, #5
 80102d6:	005b      	lsls	r3, r3, #1
 80102d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102dc:	441c      	add	r4, r3
 80102de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80102e2:	2200      	movs	r2, #0
 80102e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80102e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80102ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80102f0:	4642      	mov	r2, r8
 80102f2:	464b      	mov	r3, r9
 80102f4:	1891      	adds	r1, r2, r2
 80102f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80102f8:	415b      	adcs	r3, r3
 80102fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010300:	4641      	mov	r1, r8
 8010302:	1851      	adds	r1, r2, r1
 8010304:	6339      	str	r1, [r7, #48]	; 0x30
 8010306:	4649      	mov	r1, r9
 8010308:	414b      	adcs	r3, r1
 801030a:	637b      	str	r3, [r7, #52]	; 0x34
 801030c:	f04f 0200 	mov.w	r2, #0
 8010310:	f04f 0300 	mov.w	r3, #0
 8010314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8010318:	4659      	mov	r1, fp
 801031a:	00cb      	lsls	r3, r1, #3
 801031c:	4651      	mov	r1, sl
 801031e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010322:	4651      	mov	r1, sl
 8010324:	00ca      	lsls	r2, r1, #3
 8010326:	4610      	mov	r0, r2
 8010328:	4619      	mov	r1, r3
 801032a:	4603      	mov	r3, r0
 801032c:	4642      	mov	r2, r8
 801032e:	189b      	adds	r3, r3, r2
 8010330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010334:	464b      	mov	r3, r9
 8010336:	460a      	mov	r2, r1
 8010338:	eb42 0303 	adc.w	r3, r2, r3
 801033c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801034c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8010350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010354:	460b      	mov	r3, r1
 8010356:	18db      	adds	r3, r3, r3
 8010358:	62bb      	str	r3, [r7, #40]	; 0x28
 801035a:	4613      	mov	r3, r2
 801035c:	eb42 0303 	adc.w	r3, r2, r3
 8010360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801036a:	f7f6 fd03 	bl	8006d74 <__aeabi_uldivmod>
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	4b0d      	ldr	r3, [pc, #52]	; (80103a8 <UART_SetConfig+0x2d4>)
 8010374:	fba3 1302 	umull	r1, r3, r3, r2
 8010378:	095b      	lsrs	r3, r3, #5
 801037a:	2164      	movs	r1, #100	; 0x64
 801037c:	fb01 f303 	mul.w	r3, r1, r3
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	00db      	lsls	r3, r3, #3
 8010384:	3332      	adds	r3, #50	; 0x32
 8010386:	4a08      	ldr	r2, [pc, #32]	; (80103a8 <UART_SetConfig+0x2d4>)
 8010388:	fba2 2303 	umull	r2, r3, r2, r3
 801038c:	095b      	lsrs	r3, r3, #5
 801038e:	f003 0207 	and.w	r2, r3, #7
 8010392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4422      	add	r2, r4
 801039a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801039c:	e106      	b.n	80105ac <UART_SetConfig+0x4d8>
 801039e:	bf00      	nop
 80103a0:	40011000 	.word	0x40011000
 80103a4:	40011400 	.word	0x40011400
 80103a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80103ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80103b0:	2200      	movs	r2, #0
 80103b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80103b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80103ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80103be:	4642      	mov	r2, r8
 80103c0:	464b      	mov	r3, r9
 80103c2:	1891      	adds	r1, r2, r2
 80103c4:	6239      	str	r1, [r7, #32]
 80103c6:	415b      	adcs	r3, r3
 80103c8:	627b      	str	r3, [r7, #36]	; 0x24
 80103ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80103ce:	4641      	mov	r1, r8
 80103d0:	1854      	adds	r4, r2, r1
 80103d2:	4649      	mov	r1, r9
 80103d4:	eb43 0501 	adc.w	r5, r3, r1
 80103d8:	f04f 0200 	mov.w	r2, #0
 80103dc:	f04f 0300 	mov.w	r3, #0
 80103e0:	00eb      	lsls	r3, r5, #3
 80103e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80103e6:	00e2      	lsls	r2, r4, #3
 80103e8:	4614      	mov	r4, r2
 80103ea:	461d      	mov	r5, r3
 80103ec:	4643      	mov	r3, r8
 80103ee:	18e3      	adds	r3, r4, r3
 80103f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80103f4:	464b      	mov	r3, r9
 80103f6:	eb45 0303 	adc.w	r3, r5, r3
 80103fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80103fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801040a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801040e:	f04f 0200 	mov.w	r2, #0
 8010412:	f04f 0300 	mov.w	r3, #0
 8010416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801041a:	4629      	mov	r1, r5
 801041c:	008b      	lsls	r3, r1, #2
 801041e:	4621      	mov	r1, r4
 8010420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010424:	4621      	mov	r1, r4
 8010426:	008a      	lsls	r2, r1, #2
 8010428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801042c:	f7f6 fca2 	bl	8006d74 <__aeabi_uldivmod>
 8010430:	4602      	mov	r2, r0
 8010432:	460b      	mov	r3, r1
 8010434:	4b60      	ldr	r3, [pc, #384]	; (80105b8 <UART_SetConfig+0x4e4>)
 8010436:	fba3 2302 	umull	r2, r3, r3, r2
 801043a:	095b      	lsrs	r3, r3, #5
 801043c:	011c      	lsls	r4, r3, #4
 801043e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010442:	2200      	movs	r2, #0
 8010444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801044c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8010450:	4642      	mov	r2, r8
 8010452:	464b      	mov	r3, r9
 8010454:	1891      	adds	r1, r2, r2
 8010456:	61b9      	str	r1, [r7, #24]
 8010458:	415b      	adcs	r3, r3
 801045a:	61fb      	str	r3, [r7, #28]
 801045c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010460:	4641      	mov	r1, r8
 8010462:	1851      	adds	r1, r2, r1
 8010464:	6139      	str	r1, [r7, #16]
 8010466:	4649      	mov	r1, r9
 8010468:	414b      	adcs	r3, r1
 801046a:	617b      	str	r3, [r7, #20]
 801046c:	f04f 0200 	mov.w	r2, #0
 8010470:	f04f 0300 	mov.w	r3, #0
 8010474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010478:	4659      	mov	r1, fp
 801047a:	00cb      	lsls	r3, r1, #3
 801047c:	4651      	mov	r1, sl
 801047e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010482:	4651      	mov	r1, sl
 8010484:	00ca      	lsls	r2, r1, #3
 8010486:	4610      	mov	r0, r2
 8010488:	4619      	mov	r1, r3
 801048a:	4603      	mov	r3, r0
 801048c:	4642      	mov	r2, r8
 801048e:	189b      	adds	r3, r3, r2
 8010490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010494:	464b      	mov	r3, r9
 8010496:	460a      	mov	r2, r1
 8010498:	eb42 0303 	adc.w	r3, r2, r3
 801049c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80104aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80104ac:	f04f 0200 	mov.w	r2, #0
 80104b0:	f04f 0300 	mov.w	r3, #0
 80104b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80104b8:	4649      	mov	r1, r9
 80104ba:	008b      	lsls	r3, r1, #2
 80104bc:	4641      	mov	r1, r8
 80104be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104c2:	4641      	mov	r1, r8
 80104c4:	008a      	lsls	r2, r1, #2
 80104c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80104ca:	f7f6 fc53 	bl	8006d74 <__aeabi_uldivmod>
 80104ce:	4602      	mov	r2, r0
 80104d0:	460b      	mov	r3, r1
 80104d2:	4611      	mov	r1, r2
 80104d4:	4b38      	ldr	r3, [pc, #224]	; (80105b8 <UART_SetConfig+0x4e4>)
 80104d6:	fba3 2301 	umull	r2, r3, r3, r1
 80104da:	095b      	lsrs	r3, r3, #5
 80104dc:	2264      	movs	r2, #100	; 0x64
 80104de:	fb02 f303 	mul.w	r3, r2, r3
 80104e2:	1acb      	subs	r3, r1, r3
 80104e4:	011b      	lsls	r3, r3, #4
 80104e6:	3332      	adds	r3, #50	; 0x32
 80104e8:	4a33      	ldr	r2, [pc, #204]	; (80105b8 <UART_SetConfig+0x4e4>)
 80104ea:	fba2 2303 	umull	r2, r3, r2, r3
 80104ee:	095b      	lsrs	r3, r3, #5
 80104f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104f4:	441c      	add	r4, r3
 80104f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80104fa:	2200      	movs	r2, #0
 80104fc:	673b      	str	r3, [r7, #112]	; 0x70
 80104fe:	677a      	str	r2, [r7, #116]	; 0x74
 8010500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8010504:	4642      	mov	r2, r8
 8010506:	464b      	mov	r3, r9
 8010508:	1891      	adds	r1, r2, r2
 801050a:	60b9      	str	r1, [r7, #8]
 801050c:	415b      	adcs	r3, r3
 801050e:	60fb      	str	r3, [r7, #12]
 8010510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010514:	4641      	mov	r1, r8
 8010516:	1851      	adds	r1, r2, r1
 8010518:	6039      	str	r1, [r7, #0]
 801051a:	4649      	mov	r1, r9
 801051c:	414b      	adcs	r3, r1
 801051e:	607b      	str	r3, [r7, #4]
 8010520:	f04f 0200 	mov.w	r2, #0
 8010524:	f04f 0300 	mov.w	r3, #0
 8010528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801052c:	4659      	mov	r1, fp
 801052e:	00cb      	lsls	r3, r1, #3
 8010530:	4651      	mov	r1, sl
 8010532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010536:	4651      	mov	r1, sl
 8010538:	00ca      	lsls	r2, r1, #3
 801053a:	4610      	mov	r0, r2
 801053c:	4619      	mov	r1, r3
 801053e:	4603      	mov	r3, r0
 8010540:	4642      	mov	r2, r8
 8010542:	189b      	adds	r3, r3, r2
 8010544:	66bb      	str	r3, [r7, #104]	; 0x68
 8010546:	464b      	mov	r3, r9
 8010548:	460a      	mov	r2, r1
 801054a:	eb42 0303 	adc.w	r3, r2, r3
 801054e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	663b      	str	r3, [r7, #96]	; 0x60
 801055a:	667a      	str	r2, [r7, #100]	; 0x64
 801055c:	f04f 0200 	mov.w	r2, #0
 8010560:	f04f 0300 	mov.w	r3, #0
 8010564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8010568:	4649      	mov	r1, r9
 801056a:	008b      	lsls	r3, r1, #2
 801056c:	4641      	mov	r1, r8
 801056e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010572:	4641      	mov	r1, r8
 8010574:	008a      	lsls	r2, r1, #2
 8010576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801057a:	f7f6 fbfb 	bl	8006d74 <__aeabi_uldivmod>
 801057e:	4602      	mov	r2, r0
 8010580:	460b      	mov	r3, r1
 8010582:	4b0d      	ldr	r3, [pc, #52]	; (80105b8 <UART_SetConfig+0x4e4>)
 8010584:	fba3 1302 	umull	r1, r3, r3, r2
 8010588:	095b      	lsrs	r3, r3, #5
 801058a:	2164      	movs	r1, #100	; 0x64
 801058c:	fb01 f303 	mul.w	r3, r1, r3
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	011b      	lsls	r3, r3, #4
 8010594:	3332      	adds	r3, #50	; 0x32
 8010596:	4a08      	ldr	r2, [pc, #32]	; (80105b8 <UART_SetConfig+0x4e4>)
 8010598:	fba2 2303 	umull	r2, r3, r2, r3
 801059c:	095b      	lsrs	r3, r3, #5
 801059e:	f003 020f 	and.w	r2, r3, #15
 80105a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4422      	add	r2, r4
 80105aa:	609a      	str	r2, [r3, #8]
}
 80105ac:	bf00      	nop
 80105ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80105b2:	46bd      	mov	sp, r7
 80105b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80105b8:	51eb851f 	.word	0x51eb851f

080105bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d123      	bne.n	8010616 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80105d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	6851      	ldr	r1, [r2, #4]
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	6892      	ldr	r2, [r2, #8]
 80105e2:	4311      	orrs	r1, r2
 80105e4:	683a      	ldr	r2, [r7, #0]
 80105e6:	68d2      	ldr	r2, [r2, #12]
 80105e8:	4311      	orrs	r1, r2
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	6912      	ldr	r2, [r2, #16]
 80105ee:	4311      	orrs	r1, r2
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	6952      	ldr	r2, [r2, #20]
 80105f4:	4311      	orrs	r1, r2
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	6992      	ldr	r2, [r2, #24]
 80105fa:	4311      	orrs	r1, r2
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	69d2      	ldr	r2, [r2, #28]
 8010600:	4311      	orrs	r1, r2
 8010602:	683a      	ldr	r2, [r7, #0]
 8010604:	6a12      	ldr	r2, [r2, #32]
 8010606:	4311      	orrs	r1, r2
 8010608:	683a      	ldr	r2, [r7, #0]
 801060a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801060c:	430a      	orrs	r2, r1
 801060e:	431a      	orrs	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	e028      	b.n	8010668 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	69d9      	ldr	r1, [r3, #28]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	6a1b      	ldr	r3, [r3, #32]
 8010626:	4319      	orrs	r1, r3
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801062c:	430b      	orrs	r3, r1
 801062e:	431a      	orrs	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801063c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010640:	683a      	ldr	r2, [r7, #0]
 8010642:	6851      	ldr	r1, [r2, #4]
 8010644:	683a      	ldr	r2, [r7, #0]
 8010646:	6892      	ldr	r2, [r2, #8]
 8010648:	4311      	orrs	r1, r2
 801064a:	683a      	ldr	r2, [r7, #0]
 801064c:	68d2      	ldr	r2, [r2, #12]
 801064e:	4311      	orrs	r1, r2
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	6912      	ldr	r2, [r2, #16]
 8010654:	4311      	orrs	r1, r2
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	6952      	ldr	r2, [r2, #20]
 801065a:	4311      	orrs	r1, r2
 801065c:	683a      	ldr	r2, [r7, #0]
 801065e:	6992      	ldr	r2, [r2, #24]
 8010660:	430a      	orrs	r2, r1
 8010662:	431a      	orrs	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010676:	b480      	push	{r7}
 8010678:	b085      	sub	sp, #20
 801067a:	af00      	add	r7, sp, #0
 801067c:	60f8      	str	r0, [r7, #12]
 801067e:	60b9      	str	r1, [r7, #8]
 8010680:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d128      	bne.n	80106da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	1e59      	subs	r1, r3, #1
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	3b01      	subs	r3, #1
 801069c:	011b      	lsls	r3, r3, #4
 801069e:	4319      	orrs	r1, r3
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	021b      	lsls	r3, r3, #8
 80106a8:	4319      	orrs	r1, r3
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	3b01      	subs	r3, #1
 80106b0:	031b      	lsls	r3, r3, #12
 80106b2:	4319      	orrs	r1, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	3b01      	subs	r3, #1
 80106ba:	041b      	lsls	r3, r3, #16
 80106bc:	4319      	orrs	r1, r3
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	051b      	lsls	r3, r3, #20
 80106c6:	4319      	orrs	r1, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	061b      	lsls	r3, r3, #24
 80106d0:	430b      	orrs	r3, r1
 80106d2:	431a      	orrs	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	609a      	str	r2, [r3, #8]
 80106d8:	e02f      	b.n	801073a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80106e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	68d2      	ldr	r2, [r2, #12]
 80106ea:	3a01      	subs	r2, #1
 80106ec:	0311      	lsls	r1, r2, #12
 80106ee:	68ba      	ldr	r2, [r7, #8]
 80106f0:	6952      	ldr	r2, [r2, #20]
 80106f2:	3a01      	subs	r2, #1
 80106f4:	0512      	lsls	r2, r2, #20
 80106f6:	430a      	orrs	r2, r1
 80106f8:	431a      	orrs	r2, r3
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	1e59      	subs	r1, r3, #1
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	3b01      	subs	r3, #1
 8010712:	011b      	lsls	r3, r3, #4
 8010714:	4319      	orrs	r1, r3
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	3b01      	subs	r3, #1
 801071c:	021b      	lsls	r3, r3, #8
 801071e:	4319      	orrs	r1, r3
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	3b01      	subs	r3, #1
 8010726:	041b      	lsls	r3, r3, #16
 8010728:	4319      	orrs	r1, r3
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	699b      	ldr	r3, [r3, #24]
 801072e:	3b01      	subs	r3, #1
 8010730:	061b      	lsls	r3, r3, #24
 8010732:	430b      	orrs	r3, r1
 8010734:	431a      	orrs	r2, r3
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801073a:	2300      	movs	r3, #0
}
 801073c:	4618      	mov	r0, r3
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010754:	2300      	movs	r3, #0
 8010756:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	0d9b      	lsrs	r3, r3, #22
 801075e:	059b      	lsls	r3, r3, #22
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	6811      	ldr	r1, [r2, #0]
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	6852      	ldr	r2, [r2, #4]
 8010768:	4311      	orrs	r1, r2
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	6892      	ldr	r2, [r2, #8]
 801076e:	3a01      	subs	r2, #1
 8010770:	0152      	lsls	r2, r2, #5
 8010772:	4311      	orrs	r1, r2
 8010774:	68ba      	ldr	r2, [r7, #8]
 8010776:	68d2      	ldr	r2, [r2, #12]
 8010778:	0252      	lsls	r2, r2, #9
 801077a:	430a      	orrs	r2, r1
 801077c:	431a      	orrs	r2, r3
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8010782:	f7fa fdb5 	bl	800b2f0 <HAL_GetTick>
 8010786:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8010788:	e010      	b.n	80107ac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010790:	d00c      	beq.n	80107ac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d007      	beq.n	80107a8 <FMC_SDRAM_SendCommand+0x60>
 8010798:	f7fa fdaa 	bl	800b2f0 <HAL_GetTick>
 801079c:	4602      	mov	r2, r0
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d201      	bcs.n	80107ac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80107a8:	2303      	movs	r3, #3
 80107aa:	e006      	b.n	80107ba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	699b      	ldr	r3, [r3, #24]
 80107b0:	f003 0320 	and.w	r3, r3, #32
 80107b4:	2b20      	cmp	r3, #32
 80107b6:	d0e8      	beq.n	801078a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3718      	adds	r7, #24
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80107c2:	b480      	push	{r7}
 80107c4:	b083      	sub	sp, #12
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	695b      	ldr	r3, [r3, #20]
 80107d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80107d4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	0052      	lsls	r2, r2, #1
 80107dc:	431a      	orrs	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80107e2:	2300      	movs	r3, #0
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <__cvt>:
 80107f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107f4:	ec55 4b10 	vmov	r4, r5, d0
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	460e      	mov	r6, r1
 80107fc:	4619      	mov	r1, r3
 80107fe:	462b      	mov	r3, r5
 8010800:	bfbb      	ittet	lt
 8010802:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010806:	461d      	movlt	r5, r3
 8010808:	2300      	movge	r3, #0
 801080a:	232d      	movlt	r3, #45	; 0x2d
 801080c:	700b      	strb	r3, [r1, #0]
 801080e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010810:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010814:	4691      	mov	r9, r2
 8010816:	f023 0820 	bic.w	r8, r3, #32
 801081a:	bfbc      	itt	lt
 801081c:	4622      	movlt	r2, r4
 801081e:	4614      	movlt	r4, r2
 8010820:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010824:	d005      	beq.n	8010832 <__cvt+0x42>
 8010826:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801082a:	d100      	bne.n	801082e <__cvt+0x3e>
 801082c:	3601      	adds	r6, #1
 801082e:	2102      	movs	r1, #2
 8010830:	e000      	b.n	8010834 <__cvt+0x44>
 8010832:	2103      	movs	r1, #3
 8010834:	ab03      	add	r3, sp, #12
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	ab02      	add	r3, sp, #8
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	ec45 4b10 	vmov	d0, r4, r5
 8010840:	4653      	mov	r3, sl
 8010842:	4632      	mov	r2, r6
 8010844:	f001 f9a4 	bl	8011b90 <_dtoa_r>
 8010848:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801084c:	4607      	mov	r7, r0
 801084e:	d102      	bne.n	8010856 <__cvt+0x66>
 8010850:	f019 0f01 	tst.w	r9, #1
 8010854:	d022      	beq.n	801089c <__cvt+0xac>
 8010856:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801085a:	eb07 0906 	add.w	r9, r7, r6
 801085e:	d110      	bne.n	8010882 <__cvt+0x92>
 8010860:	783b      	ldrb	r3, [r7, #0]
 8010862:	2b30      	cmp	r3, #48	; 0x30
 8010864:	d10a      	bne.n	801087c <__cvt+0x8c>
 8010866:	2200      	movs	r2, #0
 8010868:	2300      	movs	r3, #0
 801086a:	4620      	mov	r0, r4
 801086c:	4629      	mov	r1, r5
 801086e:	f7f6 f9a1 	bl	8006bb4 <__aeabi_dcmpeq>
 8010872:	b918      	cbnz	r0, 801087c <__cvt+0x8c>
 8010874:	f1c6 0601 	rsb	r6, r6, #1
 8010878:	f8ca 6000 	str.w	r6, [sl]
 801087c:	f8da 3000 	ldr.w	r3, [sl]
 8010880:	4499      	add	r9, r3
 8010882:	2200      	movs	r2, #0
 8010884:	2300      	movs	r3, #0
 8010886:	4620      	mov	r0, r4
 8010888:	4629      	mov	r1, r5
 801088a:	f7f6 f993 	bl	8006bb4 <__aeabi_dcmpeq>
 801088e:	b108      	cbz	r0, 8010894 <__cvt+0xa4>
 8010890:	f8cd 900c 	str.w	r9, [sp, #12]
 8010894:	2230      	movs	r2, #48	; 0x30
 8010896:	9b03      	ldr	r3, [sp, #12]
 8010898:	454b      	cmp	r3, r9
 801089a:	d307      	bcc.n	80108ac <__cvt+0xbc>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108a0:	1bdb      	subs	r3, r3, r7
 80108a2:	4638      	mov	r0, r7
 80108a4:	6013      	str	r3, [r2, #0]
 80108a6:	b004      	add	sp, #16
 80108a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ac:	1c59      	adds	r1, r3, #1
 80108ae:	9103      	str	r1, [sp, #12]
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	e7f0      	b.n	8010896 <__cvt+0xa6>

080108b4 <__exponent>:
 80108b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108b6:	4603      	mov	r3, r0
 80108b8:	2900      	cmp	r1, #0
 80108ba:	bfb8      	it	lt
 80108bc:	4249      	neglt	r1, r1
 80108be:	f803 2b02 	strb.w	r2, [r3], #2
 80108c2:	bfb4      	ite	lt
 80108c4:	222d      	movlt	r2, #45	; 0x2d
 80108c6:	222b      	movge	r2, #43	; 0x2b
 80108c8:	2909      	cmp	r1, #9
 80108ca:	7042      	strb	r2, [r0, #1]
 80108cc:	dd2a      	ble.n	8010924 <__exponent+0x70>
 80108ce:	f10d 0207 	add.w	r2, sp, #7
 80108d2:	4617      	mov	r7, r2
 80108d4:	260a      	movs	r6, #10
 80108d6:	4694      	mov	ip, r2
 80108d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80108dc:	fb06 1415 	mls	r4, r6, r5, r1
 80108e0:	3430      	adds	r4, #48	; 0x30
 80108e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80108e6:	460c      	mov	r4, r1
 80108e8:	2c63      	cmp	r4, #99	; 0x63
 80108ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80108ee:	4629      	mov	r1, r5
 80108f0:	dcf1      	bgt.n	80108d6 <__exponent+0x22>
 80108f2:	3130      	adds	r1, #48	; 0x30
 80108f4:	f1ac 0402 	sub.w	r4, ip, #2
 80108f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80108fc:	1c41      	adds	r1, r0, #1
 80108fe:	4622      	mov	r2, r4
 8010900:	42ba      	cmp	r2, r7
 8010902:	d30a      	bcc.n	801091a <__exponent+0x66>
 8010904:	f10d 0209 	add.w	r2, sp, #9
 8010908:	eba2 020c 	sub.w	r2, r2, ip
 801090c:	42bc      	cmp	r4, r7
 801090e:	bf88      	it	hi
 8010910:	2200      	movhi	r2, #0
 8010912:	4413      	add	r3, r2
 8010914:	1a18      	subs	r0, r3, r0
 8010916:	b003      	add	sp, #12
 8010918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801091a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801091e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010922:	e7ed      	b.n	8010900 <__exponent+0x4c>
 8010924:	2330      	movs	r3, #48	; 0x30
 8010926:	3130      	adds	r1, #48	; 0x30
 8010928:	7083      	strb	r3, [r0, #2]
 801092a:	70c1      	strb	r1, [r0, #3]
 801092c:	1d03      	adds	r3, r0, #4
 801092e:	e7f1      	b.n	8010914 <__exponent+0x60>

08010930 <_printf_float>:
 8010930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010934:	ed2d 8b02 	vpush	{d8}
 8010938:	b08d      	sub	sp, #52	; 0x34
 801093a:	460c      	mov	r4, r1
 801093c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010940:	4616      	mov	r6, r2
 8010942:	461f      	mov	r7, r3
 8010944:	4605      	mov	r5, r0
 8010946:	f001 f809 	bl	801195c <_localeconv_r>
 801094a:	f8d0 a000 	ldr.w	sl, [r0]
 801094e:	4650      	mov	r0, sl
 8010950:	f7f5 fcb6 	bl	80062c0 <strlen>
 8010954:	2300      	movs	r3, #0
 8010956:	930a      	str	r3, [sp, #40]	; 0x28
 8010958:	6823      	ldr	r3, [r4, #0]
 801095a:	9305      	str	r3, [sp, #20]
 801095c:	f8d8 3000 	ldr.w	r3, [r8]
 8010960:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010964:	3307      	adds	r3, #7
 8010966:	f023 0307 	bic.w	r3, r3, #7
 801096a:	f103 0208 	add.w	r2, r3, #8
 801096e:	f8c8 2000 	str.w	r2, [r8]
 8010972:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801097a:	9307      	str	r3, [sp, #28]
 801097c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010980:	ee08 0a10 	vmov	s16, r0
 8010984:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801098c:	4b9e      	ldr	r3, [pc, #632]	; (8010c08 <_printf_float+0x2d8>)
 801098e:	f04f 32ff 	mov.w	r2, #4294967295
 8010992:	f7f6 f941 	bl	8006c18 <__aeabi_dcmpun>
 8010996:	bb88      	cbnz	r0, 80109fc <_printf_float+0xcc>
 8010998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801099c:	4b9a      	ldr	r3, [pc, #616]	; (8010c08 <_printf_float+0x2d8>)
 801099e:	f04f 32ff 	mov.w	r2, #4294967295
 80109a2:	f7f6 f91b 	bl	8006bdc <__aeabi_dcmple>
 80109a6:	bb48      	cbnz	r0, 80109fc <_printf_float+0xcc>
 80109a8:	2200      	movs	r2, #0
 80109aa:	2300      	movs	r3, #0
 80109ac:	4640      	mov	r0, r8
 80109ae:	4649      	mov	r1, r9
 80109b0:	f7f6 f90a 	bl	8006bc8 <__aeabi_dcmplt>
 80109b4:	b110      	cbz	r0, 80109bc <_printf_float+0x8c>
 80109b6:	232d      	movs	r3, #45	; 0x2d
 80109b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109bc:	4a93      	ldr	r2, [pc, #588]	; (8010c0c <_printf_float+0x2dc>)
 80109be:	4b94      	ldr	r3, [pc, #592]	; (8010c10 <_printf_float+0x2e0>)
 80109c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80109c4:	bf94      	ite	ls
 80109c6:	4690      	movls	r8, r2
 80109c8:	4698      	movhi	r8, r3
 80109ca:	2303      	movs	r3, #3
 80109cc:	6123      	str	r3, [r4, #16]
 80109ce:	9b05      	ldr	r3, [sp, #20]
 80109d0:	f023 0304 	bic.w	r3, r3, #4
 80109d4:	6023      	str	r3, [r4, #0]
 80109d6:	f04f 0900 	mov.w	r9, #0
 80109da:	9700      	str	r7, [sp, #0]
 80109dc:	4633      	mov	r3, r6
 80109de:	aa0b      	add	r2, sp, #44	; 0x2c
 80109e0:	4621      	mov	r1, r4
 80109e2:	4628      	mov	r0, r5
 80109e4:	f000 f9da 	bl	8010d9c <_printf_common>
 80109e8:	3001      	adds	r0, #1
 80109ea:	f040 8090 	bne.w	8010b0e <_printf_float+0x1de>
 80109ee:	f04f 30ff 	mov.w	r0, #4294967295
 80109f2:	b00d      	add	sp, #52	; 0x34
 80109f4:	ecbd 8b02 	vpop	{d8}
 80109f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fc:	4642      	mov	r2, r8
 80109fe:	464b      	mov	r3, r9
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7f6 f908 	bl	8006c18 <__aeabi_dcmpun>
 8010a08:	b140      	cbz	r0, 8010a1c <_printf_float+0xec>
 8010a0a:	464b      	mov	r3, r9
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	bfbc      	itt	lt
 8010a10:	232d      	movlt	r3, #45	; 0x2d
 8010a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a16:	4a7f      	ldr	r2, [pc, #508]	; (8010c14 <_printf_float+0x2e4>)
 8010a18:	4b7f      	ldr	r3, [pc, #508]	; (8010c18 <_printf_float+0x2e8>)
 8010a1a:	e7d1      	b.n	80109c0 <_printf_float+0x90>
 8010a1c:	6863      	ldr	r3, [r4, #4]
 8010a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a22:	9206      	str	r2, [sp, #24]
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	d13f      	bne.n	8010aa8 <_printf_float+0x178>
 8010a28:	2306      	movs	r3, #6
 8010a2a:	6063      	str	r3, [r4, #4]
 8010a2c:	9b05      	ldr	r3, [sp, #20]
 8010a2e:	6861      	ldr	r1, [r4, #4]
 8010a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010a34:	2300      	movs	r3, #0
 8010a36:	9303      	str	r3, [sp, #12]
 8010a38:	ab0a      	add	r3, sp, #40	; 0x28
 8010a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010a3e:	ab09      	add	r3, sp, #36	; 0x24
 8010a40:	ec49 8b10 	vmov	d0, r8, r9
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	6022      	str	r2, [r4, #0]
 8010a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7ff fecf 	bl	80107f0 <__cvt>
 8010a52:	9b06      	ldr	r3, [sp, #24]
 8010a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a56:	2b47      	cmp	r3, #71	; 0x47
 8010a58:	4680      	mov	r8, r0
 8010a5a:	d108      	bne.n	8010a6e <_printf_float+0x13e>
 8010a5c:	1cc8      	adds	r0, r1, #3
 8010a5e:	db02      	blt.n	8010a66 <_printf_float+0x136>
 8010a60:	6863      	ldr	r3, [r4, #4]
 8010a62:	4299      	cmp	r1, r3
 8010a64:	dd41      	ble.n	8010aea <_printf_float+0x1ba>
 8010a66:	f1ab 0302 	sub.w	r3, fp, #2
 8010a6a:	fa5f fb83 	uxtb.w	fp, r3
 8010a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010a72:	d820      	bhi.n	8010ab6 <_printf_float+0x186>
 8010a74:	3901      	subs	r1, #1
 8010a76:	465a      	mov	r2, fp
 8010a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8010a7e:	f7ff ff19 	bl	80108b4 <__exponent>
 8010a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a84:	1813      	adds	r3, r2, r0
 8010a86:	2a01      	cmp	r2, #1
 8010a88:	4681      	mov	r9, r0
 8010a8a:	6123      	str	r3, [r4, #16]
 8010a8c:	dc02      	bgt.n	8010a94 <_printf_float+0x164>
 8010a8e:	6822      	ldr	r2, [r4, #0]
 8010a90:	07d2      	lsls	r2, r2, #31
 8010a92:	d501      	bpl.n	8010a98 <_printf_float+0x168>
 8010a94:	3301      	adds	r3, #1
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d09c      	beq.n	80109da <_printf_float+0xaa>
 8010aa0:	232d      	movs	r3, #45	; 0x2d
 8010aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010aa6:	e798      	b.n	80109da <_printf_float+0xaa>
 8010aa8:	9a06      	ldr	r2, [sp, #24]
 8010aaa:	2a47      	cmp	r2, #71	; 0x47
 8010aac:	d1be      	bne.n	8010a2c <_printf_float+0xfc>
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1bc      	bne.n	8010a2c <_printf_float+0xfc>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e7b9      	b.n	8010a2a <_printf_float+0xfa>
 8010ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010aba:	d118      	bne.n	8010aee <_printf_float+0x1be>
 8010abc:	2900      	cmp	r1, #0
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	dd0b      	ble.n	8010ada <_printf_float+0x1aa>
 8010ac2:	6121      	str	r1, [r4, #16]
 8010ac4:	b913      	cbnz	r3, 8010acc <_printf_float+0x19c>
 8010ac6:	6822      	ldr	r2, [r4, #0]
 8010ac8:	07d0      	lsls	r0, r2, #31
 8010aca:	d502      	bpl.n	8010ad2 <_printf_float+0x1a2>
 8010acc:	3301      	adds	r3, #1
 8010ace:	440b      	add	r3, r1
 8010ad0:	6123      	str	r3, [r4, #16]
 8010ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ad4:	f04f 0900 	mov.w	r9, #0
 8010ad8:	e7de      	b.n	8010a98 <_printf_float+0x168>
 8010ada:	b913      	cbnz	r3, 8010ae2 <_printf_float+0x1b2>
 8010adc:	6822      	ldr	r2, [r4, #0]
 8010ade:	07d2      	lsls	r2, r2, #31
 8010ae0:	d501      	bpl.n	8010ae6 <_printf_float+0x1b6>
 8010ae2:	3302      	adds	r3, #2
 8010ae4:	e7f4      	b.n	8010ad0 <_printf_float+0x1a0>
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	e7f2      	b.n	8010ad0 <_printf_float+0x1a0>
 8010aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af0:	4299      	cmp	r1, r3
 8010af2:	db05      	blt.n	8010b00 <_printf_float+0x1d0>
 8010af4:	6823      	ldr	r3, [r4, #0]
 8010af6:	6121      	str	r1, [r4, #16]
 8010af8:	07d8      	lsls	r0, r3, #31
 8010afa:	d5ea      	bpl.n	8010ad2 <_printf_float+0x1a2>
 8010afc:	1c4b      	adds	r3, r1, #1
 8010afe:	e7e7      	b.n	8010ad0 <_printf_float+0x1a0>
 8010b00:	2900      	cmp	r1, #0
 8010b02:	bfd4      	ite	le
 8010b04:	f1c1 0202 	rsble	r2, r1, #2
 8010b08:	2201      	movgt	r2, #1
 8010b0a:	4413      	add	r3, r2
 8010b0c:	e7e0      	b.n	8010ad0 <_printf_float+0x1a0>
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	055a      	lsls	r2, r3, #21
 8010b12:	d407      	bmi.n	8010b24 <_printf_float+0x1f4>
 8010b14:	6923      	ldr	r3, [r4, #16]
 8010b16:	4642      	mov	r2, r8
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	47b8      	blx	r7
 8010b1e:	3001      	adds	r0, #1
 8010b20:	d12c      	bne.n	8010b7c <_printf_float+0x24c>
 8010b22:	e764      	b.n	80109ee <_printf_float+0xbe>
 8010b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b28:	f240 80e0 	bls.w	8010cec <_printf_float+0x3bc>
 8010b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b30:	2200      	movs	r2, #0
 8010b32:	2300      	movs	r3, #0
 8010b34:	f7f6 f83e 	bl	8006bb4 <__aeabi_dcmpeq>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d034      	beq.n	8010ba6 <_printf_float+0x276>
 8010b3c:	4a37      	ldr	r2, [pc, #220]	; (8010c1c <_printf_float+0x2ec>)
 8010b3e:	2301      	movs	r3, #1
 8010b40:	4631      	mov	r1, r6
 8010b42:	4628      	mov	r0, r5
 8010b44:	47b8      	blx	r7
 8010b46:	3001      	adds	r0, #1
 8010b48:	f43f af51 	beq.w	80109ee <_printf_float+0xbe>
 8010b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b50:	429a      	cmp	r2, r3
 8010b52:	db02      	blt.n	8010b5a <_printf_float+0x22a>
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	07d8      	lsls	r0, r3, #31
 8010b58:	d510      	bpl.n	8010b7c <_printf_float+0x24c>
 8010b5a:	ee18 3a10 	vmov	r3, s16
 8010b5e:	4652      	mov	r2, sl
 8010b60:	4631      	mov	r1, r6
 8010b62:	4628      	mov	r0, r5
 8010b64:	47b8      	blx	r7
 8010b66:	3001      	adds	r0, #1
 8010b68:	f43f af41 	beq.w	80109ee <_printf_float+0xbe>
 8010b6c:	f04f 0800 	mov.w	r8, #0
 8010b70:	f104 091a 	add.w	r9, r4, #26
 8010b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b76:	3b01      	subs	r3, #1
 8010b78:	4543      	cmp	r3, r8
 8010b7a:	dc09      	bgt.n	8010b90 <_printf_float+0x260>
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	079b      	lsls	r3, r3, #30
 8010b80:	f100 8107 	bmi.w	8010d92 <_printf_float+0x462>
 8010b84:	68e0      	ldr	r0, [r4, #12]
 8010b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b88:	4298      	cmp	r0, r3
 8010b8a:	bfb8      	it	lt
 8010b8c:	4618      	movlt	r0, r3
 8010b8e:	e730      	b.n	80109f2 <_printf_float+0xc2>
 8010b90:	2301      	movs	r3, #1
 8010b92:	464a      	mov	r2, r9
 8010b94:	4631      	mov	r1, r6
 8010b96:	4628      	mov	r0, r5
 8010b98:	47b8      	blx	r7
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	f43f af27 	beq.w	80109ee <_printf_float+0xbe>
 8010ba0:	f108 0801 	add.w	r8, r8, #1
 8010ba4:	e7e6      	b.n	8010b74 <_printf_float+0x244>
 8010ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	dc39      	bgt.n	8010c20 <_printf_float+0x2f0>
 8010bac:	4a1b      	ldr	r2, [pc, #108]	; (8010c1c <_printf_float+0x2ec>)
 8010bae:	2301      	movs	r3, #1
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	47b8      	blx	r7
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	f43f af19 	beq.w	80109ee <_printf_float+0xbe>
 8010bbc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	d102      	bne.n	8010bca <_printf_float+0x29a>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	07d9      	lsls	r1, r3, #31
 8010bc8:	d5d8      	bpl.n	8010b7c <_printf_float+0x24c>
 8010bca:	ee18 3a10 	vmov	r3, s16
 8010bce:	4652      	mov	r2, sl
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b8      	blx	r7
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	f43f af09 	beq.w	80109ee <_printf_float+0xbe>
 8010bdc:	f04f 0900 	mov.w	r9, #0
 8010be0:	f104 0a1a 	add.w	sl, r4, #26
 8010be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be6:	425b      	negs	r3, r3
 8010be8:	454b      	cmp	r3, r9
 8010bea:	dc01      	bgt.n	8010bf0 <_printf_float+0x2c0>
 8010bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bee:	e792      	b.n	8010b16 <_printf_float+0x1e6>
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	4652      	mov	r2, sl
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	47b8      	blx	r7
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	f43f aef7 	beq.w	80109ee <_printf_float+0xbe>
 8010c00:	f109 0901 	add.w	r9, r9, #1
 8010c04:	e7ee      	b.n	8010be4 <_printf_float+0x2b4>
 8010c06:	bf00      	nop
 8010c08:	7fefffff 	.word	0x7fefffff
 8010c0c:	0814f5f4 	.word	0x0814f5f4
 8010c10:	0814f5f8 	.word	0x0814f5f8
 8010c14:	0814f5fc 	.word	0x0814f5fc
 8010c18:	0814f600 	.word	0x0814f600
 8010c1c:	0814f604 	.word	0x0814f604
 8010c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c24:	429a      	cmp	r2, r3
 8010c26:	bfa8      	it	ge
 8010c28:	461a      	movge	r2, r3
 8010c2a:	2a00      	cmp	r2, #0
 8010c2c:	4691      	mov	r9, r2
 8010c2e:	dc37      	bgt.n	8010ca0 <_printf_float+0x370>
 8010c30:	f04f 0b00 	mov.w	fp, #0
 8010c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c38:	f104 021a 	add.w	r2, r4, #26
 8010c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c3e:	9305      	str	r3, [sp, #20]
 8010c40:	eba3 0309 	sub.w	r3, r3, r9
 8010c44:	455b      	cmp	r3, fp
 8010c46:	dc33      	bgt.n	8010cb0 <_printf_float+0x380>
 8010c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	db3b      	blt.n	8010cc8 <_printf_float+0x398>
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	07da      	lsls	r2, r3, #31
 8010c54:	d438      	bmi.n	8010cc8 <_printf_float+0x398>
 8010c56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010c5a:	eba2 0903 	sub.w	r9, r2, r3
 8010c5e:	9b05      	ldr	r3, [sp, #20]
 8010c60:	1ad2      	subs	r2, r2, r3
 8010c62:	4591      	cmp	r9, r2
 8010c64:	bfa8      	it	ge
 8010c66:	4691      	movge	r9, r2
 8010c68:	f1b9 0f00 	cmp.w	r9, #0
 8010c6c:	dc35      	bgt.n	8010cda <_printf_float+0x3aa>
 8010c6e:	f04f 0800 	mov.w	r8, #0
 8010c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c76:	f104 0a1a 	add.w	sl, r4, #26
 8010c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c7e:	1a9b      	subs	r3, r3, r2
 8010c80:	eba3 0309 	sub.w	r3, r3, r9
 8010c84:	4543      	cmp	r3, r8
 8010c86:	f77f af79 	ble.w	8010b7c <_printf_float+0x24c>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	4652      	mov	r2, sl
 8010c8e:	4631      	mov	r1, r6
 8010c90:	4628      	mov	r0, r5
 8010c92:	47b8      	blx	r7
 8010c94:	3001      	adds	r0, #1
 8010c96:	f43f aeaa 	beq.w	80109ee <_printf_float+0xbe>
 8010c9a:	f108 0801 	add.w	r8, r8, #1
 8010c9e:	e7ec      	b.n	8010c7a <_printf_float+0x34a>
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	4642      	mov	r2, r8
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	47b8      	blx	r7
 8010caa:	3001      	adds	r0, #1
 8010cac:	d1c0      	bne.n	8010c30 <_printf_float+0x300>
 8010cae:	e69e      	b.n	80109ee <_printf_float+0xbe>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4631      	mov	r1, r6
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	9205      	str	r2, [sp, #20]
 8010cb8:	47b8      	blx	r7
 8010cba:	3001      	adds	r0, #1
 8010cbc:	f43f ae97 	beq.w	80109ee <_printf_float+0xbe>
 8010cc0:	9a05      	ldr	r2, [sp, #20]
 8010cc2:	f10b 0b01 	add.w	fp, fp, #1
 8010cc6:	e7b9      	b.n	8010c3c <_printf_float+0x30c>
 8010cc8:	ee18 3a10 	vmov	r3, s16
 8010ccc:	4652      	mov	r2, sl
 8010cce:	4631      	mov	r1, r6
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	47b8      	blx	r7
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d1be      	bne.n	8010c56 <_printf_float+0x326>
 8010cd8:	e689      	b.n	80109ee <_printf_float+0xbe>
 8010cda:	9a05      	ldr	r2, [sp, #20]
 8010cdc:	464b      	mov	r3, r9
 8010cde:	4442      	add	r2, r8
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	47b8      	blx	r7
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	d1c1      	bne.n	8010c6e <_printf_float+0x33e>
 8010cea:	e680      	b.n	80109ee <_printf_float+0xbe>
 8010cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cee:	2a01      	cmp	r2, #1
 8010cf0:	dc01      	bgt.n	8010cf6 <_printf_float+0x3c6>
 8010cf2:	07db      	lsls	r3, r3, #31
 8010cf4:	d53a      	bpl.n	8010d6c <_printf_float+0x43c>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	4642      	mov	r2, r8
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b8      	blx	r7
 8010d00:	3001      	adds	r0, #1
 8010d02:	f43f ae74 	beq.w	80109ee <_printf_float+0xbe>
 8010d06:	ee18 3a10 	vmov	r3, s16
 8010d0a:	4652      	mov	r2, sl
 8010d0c:	4631      	mov	r1, r6
 8010d0e:	4628      	mov	r0, r5
 8010d10:	47b8      	blx	r7
 8010d12:	3001      	adds	r0, #1
 8010d14:	f43f ae6b 	beq.w	80109ee <_printf_float+0xbe>
 8010d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010d24:	f7f5 ff46 	bl	8006bb4 <__aeabi_dcmpeq>
 8010d28:	b9d8      	cbnz	r0, 8010d62 <_printf_float+0x432>
 8010d2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010d2e:	f108 0201 	add.w	r2, r8, #1
 8010d32:	4631      	mov	r1, r6
 8010d34:	4628      	mov	r0, r5
 8010d36:	47b8      	blx	r7
 8010d38:	3001      	adds	r0, #1
 8010d3a:	d10e      	bne.n	8010d5a <_printf_float+0x42a>
 8010d3c:	e657      	b.n	80109ee <_printf_float+0xbe>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	4652      	mov	r2, sl
 8010d42:	4631      	mov	r1, r6
 8010d44:	4628      	mov	r0, r5
 8010d46:	47b8      	blx	r7
 8010d48:	3001      	adds	r0, #1
 8010d4a:	f43f ae50 	beq.w	80109ee <_printf_float+0xbe>
 8010d4e:	f108 0801 	add.w	r8, r8, #1
 8010d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d54:	3b01      	subs	r3, #1
 8010d56:	4543      	cmp	r3, r8
 8010d58:	dcf1      	bgt.n	8010d3e <_printf_float+0x40e>
 8010d5a:	464b      	mov	r3, r9
 8010d5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010d60:	e6da      	b.n	8010b18 <_printf_float+0x1e8>
 8010d62:	f04f 0800 	mov.w	r8, #0
 8010d66:	f104 0a1a 	add.w	sl, r4, #26
 8010d6a:	e7f2      	b.n	8010d52 <_printf_float+0x422>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	4642      	mov	r2, r8
 8010d70:	e7df      	b.n	8010d32 <_printf_float+0x402>
 8010d72:	2301      	movs	r3, #1
 8010d74:	464a      	mov	r2, r9
 8010d76:	4631      	mov	r1, r6
 8010d78:	4628      	mov	r0, r5
 8010d7a:	47b8      	blx	r7
 8010d7c:	3001      	adds	r0, #1
 8010d7e:	f43f ae36 	beq.w	80109ee <_printf_float+0xbe>
 8010d82:	f108 0801 	add.w	r8, r8, #1
 8010d86:	68e3      	ldr	r3, [r4, #12]
 8010d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d8a:	1a5b      	subs	r3, r3, r1
 8010d8c:	4543      	cmp	r3, r8
 8010d8e:	dcf0      	bgt.n	8010d72 <_printf_float+0x442>
 8010d90:	e6f8      	b.n	8010b84 <_printf_float+0x254>
 8010d92:	f04f 0800 	mov.w	r8, #0
 8010d96:	f104 0919 	add.w	r9, r4, #25
 8010d9a:	e7f4      	b.n	8010d86 <_printf_float+0x456>

08010d9c <_printf_common>:
 8010d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010da0:	4616      	mov	r6, r2
 8010da2:	4699      	mov	r9, r3
 8010da4:	688a      	ldr	r2, [r1, #8]
 8010da6:	690b      	ldr	r3, [r1, #16]
 8010da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010dac:	4293      	cmp	r3, r2
 8010dae:	bfb8      	it	lt
 8010db0:	4613      	movlt	r3, r2
 8010db2:	6033      	str	r3, [r6, #0]
 8010db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010db8:	4607      	mov	r7, r0
 8010dba:	460c      	mov	r4, r1
 8010dbc:	b10a      	cbz	r2, 8010dc2 <_printf_common+0x26>
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	6033      	str	r3, [r6, #0]
 8010dc2:	6823      	ldr	r3, [r4, #0]
 8010dc4:	0699      	lsls	r1, r3, #26
 8010dc6:	bf42      	ittt	mi
 8010dc8:	6833      	ldrmi	r3, [r6, #0]
 8010dca:	3302      	addmi	r3, #2
 8010dcc:	6033      	strmi	r3, [r6, #0]
 8010dce:	6825      	ldr	r5, [r4, #0]
 8010dd0:	f015 0506 	ands.w	r5, r5, #6
 8010dd4:	d106      	bne.n	8010de4 <_printf_common+0x48>
 8010dd6:	f104 0a19 	add.w	sl, r4, #25
 8010dda:	68e3      	ldr	r3, [r4, #12]
 8010ddc:	6832      	ldr	r2, [r6, #0]
 8010dde:	1a9b      	subs	r3, r3, r2
 8010de0:	42ab      	cmp	r3, r5
 8010de2:	dc26      	bgt.n	8010e32 <_printf_common+0x96>
 8010de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010de8:	1e13      	subs	r3, r2, #0
 8010dea:	6822      	ldr	r2, [r4, #0]
 8010dec:	bf18      	it	ne
 8010dee:	2301      	movne	r3, #1
 8010df0:	0692      	lsls	r2, r2, #26
 8010df2:	d42b      	bmi.n	8010e4c <_printf_common+0xb0>
 8010df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010df8:	4649      	mov	r1, r9
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	47c0      	blx	r8
 8010dfe:	3001      	adds	r0, #1
 8010e00:	d01e      	beq.n	8010e40 <_printf_common+0xa4>
 8010e02:	6823      	ldr	r3, [r4, #0]
 8010e04:	6922      	ldr	r2, [r4, #16]
 8010e06:	f003 0306 	and.w	r3, r3, #6
 8010e0a:	2b04      	cmp	r3, #4
 8010e0c:	bf02      	ittt	eq
 8010e0e:	68e5      	ldreq	r5, [r4, #12]
 8010e10:	6833      	ldreq	r3, [r6, #0]
 8010e12:	1aed      	subeq	r5, r5, r3
 8010e14:	68a3      	ldr	r3, [r4, #8]
 8010e16:	bf0c      	ite	eq
 8010e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e1c:	2500      	movne	r5, #0
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	bfc4      	itt	gt
 8010e22:	1a9b      	subgt	r3, r3, r2
 8010e24:	18ed      	addgt	r5, r5, r3
 8010e26:	2600      	movs	r6, #0
 8010e28:	341a      	adds	r4, #26
 8010e2a:	42b5      	cmp	r5, r6
 8010e2c:	d11a      	bne.n	8010e64 <_printf_common+0xc8>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	e008      	b.n	8010e44 <_printf_common+0xa8>
 8010e32:	2301      	movs	r3, #1
 8010e34:	4652      	mov	r2, sl
 8010e36:	4649      	mov	r1, r9
 8010e38:	4638      	mov	r0, r7
 8010e3a:	47c0      	blx	r8
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d103      	bne.n	8010e48 <_printf_common+0xac>
 8010e40:	f04f 30ff 	mov.w	r0, #4294967295
 8010e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e48:	3501      	adds	r5, #1
 8010e4a:	e7c6      	b.n	8010dda <_printf_common+0x3e>
 8010e4c:	18e1      	adds	r1, r4, r3
 8010e4e:	1c5a      	adds	r2, r3, #1
 8010e50:	2030      	movs	r0, #48	; 0x30
 8010e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e56:	4422      	add	r2, r4
 8010e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e60:	3302      	adds	r3, #2
 8010e62:	e7c7      	b.n	8010df4 <_printf_common+0x58>
 8010e64:	2301      	movs	r3, #1
 8010e66:	4622      	mov	r2, r4
 8010e68:	4649      	mov	r1, r9
 8010e6a:	4638      	mov	r0, r7
 8010e6c:	47c0      	blx	r8
 8010e6e:	3001      	adds	r0, #1
 8010e70:	d0e6      	beq.n	8010e40 <_printf_common+0xa4>
 8010e72:	3601      	adds	r6, #1
 8010e74:	e7d9      	b.n	8010e2a <_printf_common+0x8e>
	...

08010e78 <_printf_i>:
 8010e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7c:	7e0f      	ldrb	r7, [r1, #24]
 8010e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e80:	2f78      	cmp	r7, #120	; 0x78
 8010e82:	4691      	mov	r9, r2
 8010e84:	4680      	mov	r8, r0
 8010e86:	460c      	mov	r4, r1
 8010e88:	469a      	mov	sl, r3
 8010e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e8e:	d807      	bhi.n	8010ea0 <_printf_i+0x28>
 8010e90:	2f62      	cmp	r7, #98	; 0x62
 8010e92:	d80a      	bhi.n	8010eaa <_printf_i+0x32>
 8010e94:	2f00      	cmp	r7, #0
 8010e96:	f000 80d4 	beq.w	8011042 <_printf_i+0x1ca>
 8010e9a:	2f58      	cmp	r7, #88	; 0x58
 8010e9c:	f000 80c0 	beq.w	8011020 <_printf_i+0x1a8>
 8010ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ea8:	e03a      	b.n	8010f20 <_printf_i+0xa8>
 8010eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010eae:	2b15      	cmp	r3, #21
 8010eb0:	d8f6      	bhi.n	8010ea0 <_printf_i+0x28>
 8010eb2:	a101      	add	r1, pc, #4	; (adr r1, 8010eb8 <_printf_i+0x40>)
 8010eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010eb8:	08010f11 	.word	0x08010f11
 8010ebc:	08010f25 	.word	0x08010f25
 8010ec0:	08010ea1 	.word	0x08010ea1
 8010ec4:	08010ea1 	.word	0x08010ea1
 8010ec8:	08010ea1 	.word	0x08010ea1
 8010ecc:	08010ea1 	.word	0x08010ea1
 8010ed0:	08010f25 	.word	0x08010f25
 8010ed4:	08010ea1 	.word	0x08010ea1
 8010ed8:	08010ea1 	.word	0x08010ea1
 8010edc:	08010ea1 	.word	0x08010ea1
 8010ee0:	08010ea1 	.word	0x08010ea1
 8010ee4:	08011029 	.word	0x08011029
 8010ee8:	08010f51 	.word	0x08010f51
 8010eec:	08010fe3 	.word	0x08010fe3
 8010ef0:	08010ea1 	.word	0x08010ea1
 8010ef4:	08010ea1 	.word	0x08010ea1
 8010ef8:	0801104b 	.word	0x0801104b
 8010efc:	08010ea1 	.word	0x08010ea1
 8010f00:	08010f51 	.word	0x08010f51
 8010f04:	08010ea1 	.word	0x08010ea1
 8010f08:	08010ea1 	.word	0x08010ea1
 8010f0c:	08010feb 	.word	0x08010feb
 8010f10:	682b      	ldr	r3, [r5, #0]
 8010f12:	1d1a      	adds	r2, r3, #4
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	602a      	str	r2, [r5, #0]
 8010f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f20:	2301      	movs	r3, #1
 8010f22:	e09f      	b.n	8011064 <_printf_i+0x1ec>
 8010f24:	6820      	ldr	r0, [r4, #0]
 8010f26:	682b      	ldr	r3, [r5, #0]
 8010f28:	0607      	lsls	r7, r0, #24
 8010f2a:	f103 0104 	add.w	r1, r3, #4
 8010f2e:	6029      	str	r1, [r5, #0]
 8010f30:	d501      	bpl.n	8010f36 <_printf_i+0xbe>
 8010f32:	681e      	ldr	r6, [r3, #0]
 8010f34:	e003      	b.n	8010f3e <_printf_i+0xc6>
 8010f36:	0646      	lsls	r6, r0, #25
 8010f38:	d5fb      	bpl.n	8010f32 <_printf_i+0xba>
 8010f3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010f3e:	2e00      	cmp	r6, #0
 8010f40:	da03      	bge.n	8010f4a <_printf_i+0xd2>
 8010f42:	232d      	movs	r3, #45	; 0x2d
 8010f44:	4276      	negs	r6, r6
 8010f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f4a:	485a      	ldr	r0, [pc, #360]	; (80110b4 <_printf_i+0x23c>)
 8010f4c:	230a      	movs	r3, #10
 8010f4e:	e012      	b.n	8010f76 <_printf_i+0xfe>
 8010f50:	682b      	ldr	r3, [r5, #0]
 8010f52:	6820      	ldr	r0, [r4, #0]
 8010f54:	1d19      	adds	r1, r3, #4
 8010f56:	6029      	str	r1, [r5, #0]
 8010f58:	0605      	lsls	r5, r0, #24
 8010f5a:	d501      	bpl.n	8010f60 <_printf_i+0xe8>
 8010f5c:	681e      	ldr	r6, [r3, #0]
 8010f5e:	e002      	b.n	8010f66 <_printf_i+0xee>
 8010f60:	0641      	lsls	r1, r0, #25
 8010f62:	d5fb      	bpl.n	8010f5c <_printf_i+0xe4>
 8010f64:	881e      	ldrh	r6, [r3, #0]
 8010f66:	4853      	ldr	r0, [pc, #332]	; (80110b4 <_printf_i+0x23c>)
 8010f68:	2f6f      	cmp	r7, #111	; 0x6f
 8010f6a:	bf0c      	ite	eq
 8010f6c:	2308      	moveq	r3, #8
 8010f6e:	230a      	movne	r3, #10
 8010f70:	2100      	movs	r1, #0
 8010f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f76:	6865      	ldr	r5, [r4, #4]
 8010f78:	60a5      	str	r5, [r4, #8]
 8010f7a:	2d00      	cmp	r5, #0
 8010f7c:	bfa2      	ittt	ge
 8010f7e:	6821      	ldrge	r1, [r4, #0]
 8010f80:	f021 0104 	bicge.w	r1, r1, #4
 8010f84:	6021      	strge	r1, [r4, #0]
 8010f86:	b90e      	cbnz	r6, 8010f8c <_printf_i+0x114>
 8010f88:	2d00      	cmp	r5, #0
 8010f8a:	d04b      	beq.n	8011024 <_printf_i+0x1ac>
 8010f8c:	4615      	mov	r5, r2
 8010f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f92:	fb03 6711 	mls	r7, r3, r1, r6
 8010f96:	5dc7      	ldrb	r7, [r0, r7]
 8010f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f9c:	4637      	mov	r7, r6
 8010f9e:	42bb      	cmp	r3, r7
 8010fa0:	460e      	mov	r6, r1
 8010fa2:	d9f4      	bls.n	8010f8e <_printf_i+0x116>
 8010fa4:	2b08      	cmp	r3, #8
 8010fa6:	d10b      	bne.n	8010fc0 <_printf_i+0x148>
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	07de      	lsls	r6, r3, #31
 8010fac:	d508      	bpl.n	8010fc0 <_printf_i+0x148>
 8010fae:	6923      	ldr	r3, [r4, #16]
 8010fb0:	6861      	ldr	r1, [r4, #4]
 8010fb2:	4299      	cmp	r1, r3
 8010fb4:	bfde      	ittt	le
 8010fb6:	2330      	movle	r3, #48	; 0x30
 8010fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010fc0:	1b52      	subs	r2, r2, r5
 8010fc2:	6122      	str	r2, [r4, #16]
 8010fc4:	f8cd a000 	str.w	sl, [sp]
 8010fc8:	464b      	mov	r3, r9
 8010fca:	aa03      	add	r2, sp, #12
 8010fcc:	4621      	mov	r1, r4
 8010fce:	4640      	mov	r0, r8
 8010fd0:	f7ff fee4 	bl	8010d9c <_printf_common>
 8010fd4:	3001      	adds	r0, #1
 8010fd6:	d14a      	bne.n	801106e <_printf_i+0x1f6>
 8010fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fdc:	b004      	add	sp, #16
 8010fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	f043 0320 	orr.w	r3, r3, #32
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	4833      	ldr	r0, [pc, #204]	; (80110b8 <_printf_i+0x240>)
 8010fec:	2778      	movs	r7, #120	; 0x78
 8010fee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ff2:	6823      	ldr	r3, [r4, #0]
 8010ff4:	6829      	ldr	r1, [r5, #0]
 8010ff6:	061f      	lsls	r7, r3, #24
 8010ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010ffc:	d402      	bmi.n	8011004 <_printf_i+0x18c>
 8010ffe:	065f      	lsls	r7, r3, #25
 8011000:	bf48      	it	mi
 8011002:	b2b6      	uxthmi	r6, r6
 8011004:	07df      	lsls	r7, r3, #31
 8011006:	bf48      	it	mi
 8011008:	f043 0320 	orrmi.w	r3, r3, #32
 801100c:	6029      	str	r1, [r5, #0]
 801100e:	bf48      	it	mi
 8011010:	6023      	strmi	r3, [r4, #0]
 8011012:	b91e      	cbnz	r6, 801101c <_printf_i+0x1a4>
 8011014:	6823      	ldr	r3, [r4, #0]
 8011016:	f023 0320 	bic.w	r3, r3, #32
 801101a:	6023      	str	r3, [r4, #0]
 801101c:	2310      	movs	r3, #16
 801101e:	e7a7      	b.n	8010f70 <_printf_i+0xf8>
 8011020:	4824      	ldr	r0, [pc, #144]	; (80110b4 <_printf_i+0x23c>)
 8011022:	e7e4      	b.n	8010fee <_printf_i+0x176>
 8011024:	4615      	mov	r5, r2
 8011026:	e7bd      	b.n	8010fa4 <_printf_i+0x12c>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	6826      	ldr	r6, [r4, #0]
 801102c:	6961      	ldr	r1, [r4, #20]
 801102e:	1d18      	adds	r0, r3, #4
 8011030:	6028      	str	r0, [r5, #0]
 8011032:	0635      	lsls	r5, r6, #24
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	d501      	bpl.n	801103c <_printf_i+0x1c4>
 8011038:	6019      	str	r1, [r3, #0]
 801103a:	e002      	b.n	8011042 <_printf_i+0x1ca>
 801103c:	0670      	lsls	r0, r6, #25
 801103e:	d5fb      	bpl.n	8011038 <_printf_i+0x1c0>
 8011040:	8019      	strh	r1, [r3, #0]
 8011042:	2300      	movs	r3, #0
 8011044:	6123      	str	r3, [r4, #16]
 8011046:	4615      	mov	r5, r2
 8011048:	e7bc      	b.n	8010fc4 <_printf_i+0x14c>
 801104a:	682b      	ldr	r3, [r5, #0]
 801104c:	1d1a      	adds	r2, r3, #4
 801104e:	602a      	str	r2, [r5, #0]
 8011050:	681d      	ldr	r5, [r3, #0]
 8011052:	6862      	ldr	r2, [r4, #4]
 8011054:	2100      	movs	r1, #0
 8011056:	4628      	mov	r0, r5
 8011058:	f7f5 f8e2 	bl	8006220 <memchr>
 801105c:	b108      	cbz	r0, 8011062 <_printf_i+0x1ea>
 801105e:	1b40      	subs	r0, r0, r5
 8011060:	6060      	str	r0, [r4, #4]
 8011062:	6863      	ldr	r3, [r4, #4]
 8011064:	6123      	str	r3, [r4, #16]
 8011066:	2300      	movs	r3, #0
 8011068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801106c:	e7aa      	b.n	8010fc4 <_printf_i+0x14c>
 801106e:	6923      	ldr	r3, [r4, #16]
 8011070:	462a      	mov	r2, r5
 8011072:	4649      	mov	r1, r9
 8011074:	4640      	mov	r0, r8
 8011076:	47d0      	blx	sl
 8011078:	3001      	adds	r0, #1
 801107a:	d0ad      	beq.n	8010fd8 <_printf_i+0x160>
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	079b      	lsls	r3, r3, #30
 8011080:	d413      	bmi.n	80110aa <_printf_i+0x232>
 8011082:	68e0      	ldr	r0, [r4, #12]
 8011084:	9b03      	ldr	r3, [sp, #12]
 8011086:	4298      	cmp	r0, r3
 8011088:	bfb8      	it	lt
 801108a:	4618      	movlt	r0, r3
 801108c:	e7a6      	b.n	8010fdc <_printf_i+0x164>
 801108e:	2301      	movs	r3, #1
 8011090:	4632      	mov	r2, r6
 8011092:	4649      	mov	r1, r9
 8011094:	4640      	mov	r0, r8
 8011096:	47d0      	blx	sl
 8011098:	3001      	adds	r0, #1
 801109a:	d09d      	beq.n	8010fd8 <_printf_i+0x160>
 801109c:	3501      	adds	r5, #1
 801109e:	68e3      	ldr	r3, [r4, #12]
 80110a0:	9903      	ldr	r1, [sp, #12]
 80110a2:	1a5b      	subs	r3, r3, r1
 80110a4:	42ab      	cmp	r3, r5
 80110a6:	dcf2      	bgt.n	801108e <_printf_i+0x216>
 80110a8:	e7eb      	b.n	8011082 <_printf_i+0x20a>
 80110aa:	2500      	movs	r5, #0
 80110ac:	f104 0619 	add.w	r6, r4, #25
 80110b0:	e7f5      	b.n	801109e <_printf_i+0x226>
 80110b2:	bf00      	nop
 80110b4:	0814f606 	.word	0x0814f606
 80110b8:	0814f617 	.word	0x0814f617

080110bc <_scanf_float>:
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	b087      	sub	sp, #28
 80110c2:	4617      	mov	r7, r2
 80110c4:	9303      	str	r3, [sp, #12]
 80110c6:	688b      	ldr	r3, [r1, #8]
 80110c8:	1e5a      	subs	r2, r3, #1
 80110ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80110ce:	bf83      	ittte	hi
 80110d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80110d4:	195b      	addhi	r3, r3, r5
 80110d6:	9302      	strhi	r3, [sp, #8]
 80110d8:	2300      	movls	r3, #0
 80110da:	bf86      	itte	hi
 80110dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80110e0:	608b      	strhi	r3, [r1, #8]
 80110e2:	9302      	strls	r3, [sp, #8]
 80110e4:	680b      	ldr	r3, [r1, #0]
 80110e6:	468b      	mov	fp, r1
 80110e8:	2500      	movs	r5, #0
 80110ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80110ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80110f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80110f6:	4680      	mov	r8, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	465e      	mov	r6, fp
 80110fc:	46aa      	mov	sl, r5
 80110fe:	46a9      	mov	r9, r5
 8011100:	9501      	str	r5, [sp, #4]
 8011102:	68a2      	ldr	r2, [r4, #8]
 8011104:	b152      	cbz	r2, 801111c <_scanf_float+0x60>
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	2b4e      	cmp	r3, #78	; 0x4e
 801110c:	d864      	bhi.n	80111d8 <_scanf_float+0x11c>
 801110e:	2b40      	cmp	r3, #64	; 0x40
 8011110:	d83c      	bhi.n	801118c <_scanf_float+0xd0>
 8011112:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011116:	b2c8      	uxtb	r0, r1
 8011118:	280e      	cmp	r0, #14
 801111a:	d93a      	bls.n	8011192 <_scanf_float+0xd6>
 801111c:	f1b9 0f00 	cmp.w	r9, #0
 8011120:	d003      	beq.n	801112a <_scanf_float+0x6e>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801112e:	f1ba 0f01 	cmp.w	sl, #1
 8011132:	f200 8113 	bhi.w	801135c <_scanf_float+0x2a0>
 8011136:	455e      	cmp	r6, fp
 8011138:	f200 8105 	bhi.w	8011346 <_scanf_float+0x28a>
 801113c:	2501      	movs	r5, #1
 801113e:	4628      	mov	r0, r5
 8011140:	b007      	add	sp, #28
 8011142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011146:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801114a:	2a0d      	cmp	r2, #13
 801114c:	d8e6      	bhi.n	801111c <_scanf_float+0x60>
 801114e:	a101      	add	r1, pc, #4	; (adr r1, 8011154 <_scanf_float+0x98>)
 8011150:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011154:	08011293 	.word	0x08011293
 8011158:	0801111d 	.word	0x0801111d
 801115c:	0801111d 	.word	0x0801111d
 8011160:	0801111d 	.word	0x0801111d
 8011164:	080112f3 	.word	0x080112f3
 8011168:	080112cb 	.word	0x080112cb
 801116c:	0801111d 	.word	0x0801111d
 8011170:	0801111d 	.word	0x0801111d
 8011174:	080112a1 	.word	0x080112a1
 8011178:	0801111d 	.word	0x0801111d
 801117c:	0801111d 	.word	0x0801111d
 8011180:	0801111d 	.word	0x0801111d
 8011184:	0801111d 	.word	0x0801111d
 8011188:	08011259 	.word	0x08011259
 801118c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011190:	e7db      	b.n	801114a <_scanf_float+0x8e>
 8011192:	290e      	cmp	r1, #14
 8011194:	d8c2      	bhi.n	801111c <_scanf_float+0x60>
 8011196:	a001      	add	r0, pc, #4	; (adr r0, 801119c <_scanf_float+0xe0>)
 8011198:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801119c:	0801124b 	.word	0x0801124b
 80111a0:	0801111d 	.word	0x0801111d
 80111a4:	0801124b 	.word	0x0801124b
 80111a8:	080112df 	.word	0x080112df
 80111ac:	0801111d 	.word	0x0801111d
 80111b0:	080111f9 	.word	0x080111f9
 80111b4:	08011235 	.word	0x08011235
 80111b8:	08011235 	.word	0x08011235
 80111bc:	08011235 	.word	0x08011235
 80111c0:	08011235 	.word	0x08011235
 80111c4:	08011235 	.word	0x08011235
 80111c8:	08011235 	.word	0x08011235
 80111cc:	08011235 	.word	0x08011235
 80111d0:	08011235 	.word	0x08011235
 80111d4:	08011235 	.word	0x08011235
 80111d8:	2b6e      	cmp	r3, #110	; 0x6e
 80111da:	d809      	bhi.n	80111f0 <_scanf_float+0x134>
 80111dc:	2b60      	cmp	r3, #96	; 0x60
 80111de:	d8b2      	bhi.n	8011146 <_scanf_float+0x8a>
 80111e0:	2b54      	cmp	r3, #84	; 0x54
 80111e2:	d077      	beq.n	80112d4 <_scanf_float+0x218>
 80111e4:	2b59      	cmp	r3, #89	; 0x59
 80111e6:	d199      	bne.n	801111c <_scanf_float+0x60>
 80111e8:	2d07      	cmp	r5, #7
 80111ea:	d197      	bne.n	801111c <_scanf_float+0x60>
 80111ec:	2508      	movs	r5, #8
 80111ee:	e029      	b.n	8011244 <_scanf_float+0x188>
 80111f0:	2b74      	cmp	r3, #116	; 0x74
 80111f2:	d06f      	beq.n	80112d4 <_scanf_float+0x218>
 80111f4:	2b79      	cmp	r3, #121	; 0x79
 80111f6:	e7f6      	b.n	80111e6 <_scanf_float+0x12a>
 80111f8:	6821      	ldr	r1, [r4, #0]
 80111fa:	05c8      	lsls	r0, r1, #23
 80111fc:	d51a      	bpl.n	8011234 <_scanf_float+0x178>
 80111fe:	9b02      	ldr	r3, [sp, #8]
 8011200:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011204:	6021      	str	r1, [r4, #0]
 8011206:	f109 0901 	add.w	r9, r9, #1
 801120a:	b11b      	cbz	r3, 8011214 <_scanf_float+0x158>
 801120c:	3b01      	subs	r3, #1
 801120e:	3201      	adds	r2, #1
 8011210:	9302      	str	r3, [sp, #8]
 8011212:	60a2      	str	r2, [r4, #8]
 8011214:	68a3      	ldr	r3, [r4, #8]
 8011216:	3b01      	subs	r3, #1
 8011218:	60a3      	str	r3, [r4, #8]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	3301      	adds	r3, #1
 801121e:	6123      	str	r3, [r4, #16]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	3b01      	subs	r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	607b      	str	r3, [r7, #4]
 8011228:	f340 8084 	ble.w	8011334 <_scanf_float+0x278>
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	3301      	adds	r3, #1
 8011230:	603b      	str	r3, [r7, #0]
 8011232:	e766      	b.n	8011102 <_scanf_float+0x46>
 8011234:	eb1a 0f05 	cmn.w	sl, r5
 8011238:	f47f af70 	bne.w	801111c <_scanf_float+0x60>
 801123c:	6822      	ldr	r2, [r4, #0]
 801123e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011242:	6022      	str	r2, [r4, #0]
 8011244:	f806 3b01 	strb.w	r3, [r6], #1
 8011248:	e7e4      	b.n	8011214 <_scanf_float+0x158>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	0610      	lsls	r0, r2, #24
 801124e:	f57f af65 	bpl.w	801111c <_scanf_float+0x60>
 8011252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011256:	e7f4      	b.n	8011242 <_scanf_float+0x186>
 8011258:	f1ba 0f00 	cmp.w	sl, #0
 801125c:	d10e      	bne.n	801127c <_scanf_float+0x1c0>
 801125e:	f1b9 0f00 	cmp.w	r9, #0
 8011262:	d10e      	bne.n	8011282 <_scanf_float+0x1c6>
 8011264:	6822      	ldr	r2, [r4, #0]
 8011266:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801126a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801126e:	d108      	bne.n	8011282 <_scanf_float+0x1c6>
 8011270:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011274:	6022      	str	r2, [r4, #0]
 8011276:	f04f 0a01 	mov.w	sl, #1
 801127a:	e7e3      	b.n	8011244 <_scanf_float+0x188>
 801127c:	f1ba 0f02 	cmp.w	sl, #2
 8011280:	d055      	beq.n	801132e <_scanf_float+0x272>
 8011282:	2d01      	cmp	r5, #1
 8011284:	d002      	beq.n	801128c <_scanf_float+0x1d0>
 8011286:	2d04      	cmp	r5, #4
 8011288:	f47f af48 	bne.w	801111c <_scanf_float+0x60>
 801128c:	3501      	adds	r5, #1
 801128e:	b2ed      	uxtb	r5, r5
 8011290:	e7d8      	b.n	8011244 <_scanf_float+0x188>
 8011292:	f1ba 0f01 	cmp.w	sl, #1
 8011296:	f47f af41 	bne.w	801111c <_scanf_float+0x60>
 801129a:	f04f 0a02 	mov.w	sl, #2
 801129e:	e7d1      	b.n	8011244 <_scanf_float+0x188>
 80112a0:	b97d      	cbnz	r5, 80112c2 <_scanf_float+0x206>
 80112a2:	f1b9 0f00 	cmp.w	r9, #0
 80112a6:	f47f af3c 	bne.w	8011122 <_scanf_float+0x66>
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112b4:	f47f af39 	bne.w	801112a <_scanf_float+0x6e>
 80112b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112bc:	6022      	str	r2, [r4, #0]
 80112be:	2501      	movs	r5, #1
 80112c0:	e7c0      	b.n	8011244 <_scanf_float+0x188>
 80112c2:	2d03      	cmp	r5, #3
 80112c4:	d0e2      	beq.n	801128c <_scanf_float+0x1d0>
 80112c6:	2d05      	cmp	r5, #5
 80112c8:	e7de      	b.n	8011288 <_scanf_float+0x1cc>
 80112ca:	2d02      	cmp	r5, #2
 80112cc:	f47f af26 	bne.w	801111c <_scanf_float+0x60>
 80112d0:	2503      	movs	r5, #3
 80112d2:	e7b7      	b.n	8011244 <_scanf_float+0x188>
 80112d4:	2d06      	cmp	r5, #6
 80112d6:	f47f af21 	bne.w	801111c <_scanf_float+0x60>
 80112da:	2507      	movs	r5, #7
 80112dc:	e7b2      	b.n	8011244 <_scanf_float+0x188>
 80112de:	6822      	ldr	r2, [r4, #0]
 80112e0:	0591      	lsls	r1, r2, #22
 80112e2:	f57f af1b 	bpl.w	801111c <_scanf_float+0x60>
 80112e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80112ea:	6022      	str	r2, [r4, #0]
 80112ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80112f0:	e7a8      	b.n	8011244 <_scanf_float+0x188>
 80112f2:	6822      	ldr	r2, [r4, #0]
 80112f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80112f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80112fc:	d006      	beq.n	801130c <_scanf_float+0x250>
 80112fe:	0550      	lsls	r0, r2, #21
 8011300:	f57f af0c 	bpl.w	801111c <_scanf_float+0x60>
 8011304:	f1b9 0f00 	cmp.w	r9, #0
 8011308:	f43f af0f 	beq.w	801112a <_scanf_float+0x6e>
 801130c:	0591      	lsls	r1, r2, #22
 801130e:	bf58      	it	pl
 8011310:	9901      	ldrpl	r1, [sp, #4]
 8011312:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011316:	bf58      	it	pl
 8011318:	eba9 0101 	subpl.w	r1, r9, r1
 801131c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011320:	bf58      	it	pl
 8011322:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011326:	6022      	str	r2, [r4, #0]
 8011328:	f04f 0900 	mov.w	r9, #0
 801132c:	e78a      	b.n	8011244 <_scanf_float+0x188>
 801132e:	f04f 0a03 	mov.w	sl, #3
 8011332:	e787      	b.n	8011244 <_scanf_float+0x188>
 8011334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011338:	4639      	mov	r1, r7
 801133a:	4640      	mov	r0, r8
 801133c:	4798      	blx	r3
 801133e:	2800      	cmp	r0, #0
 8011340:	f43f aedf 	beq.w	8011102 <_scanf_float+0x46>
 8011344:	e6ea      	b.n	801111c <_scanf_float+0x60>
 8011346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801134a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801134e:	463a      	mov	r2, r7
 8011350:	4640      	mov	r0, r8
 8011352:	4798      	blx	r3
 8011354:	6923      	ldr	r3, [r4, #16]
 8011356:	3b01      	subs	r3, #1
 8011358:	6123      	str	r3, [r4, #16]
 801135a:	e6ec      	b.n	8011136 <_scanf_float+0x7a>
 801135c:	1e6b      	subs	r3, r5, #1
 801135e:	2b06      	cmp	r3, #6
 8011360:	d825      	bhi.n	80113ae <_scanf_float+0x2f2>
 8011362:	2d02      	cmp	r5, #2
 8011364:	d836      	bhi.n	80113d4 <_scanf_float+0x318>
 8011366:	455e      	cmp	r6, fp
 8011368:	f67f aee8 	bls.w	801113c <_scanf_float+0x80>
 801136c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011370:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011374:	463a      	mov	r2, r7
 8011376:	4640      	mov	r0, r8
 8011378:	4798      	blx	r3
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	3b01      	subs	r3, #1
 801137e:	6123      	str	r3, [r4, #16]
 8011380:	e7f1      	b.n	8011366 <_scanf_float+0x2aa>
 8011382:	9802      	ldr	r0, [sp, #8]
 8011384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011388:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801138c:	9002      	str	r0, [sp, #8]
 801138e:	463a      	mov	r2, r7
 8011390:	4640      	mov	r0, r8
 8011392:	4798      	blx	r3
 8011394:	6923      	ldr	r3, [r4, #16]
 8011396:	3b01      	subs	r3, #1
 8011398:	6123      	str	r3, [r4, #16]
 801139a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801139e:	fa5f fa8a 	uxtb.w	sl, sl
 80113a2:	f1ba 0f02 	cmp.w	sl, #2
 80113a6:	d1ec      	bne.n	8011382 <_scanf_float+0x2c6>
 80113a8:	3d03      	subs	r5, #3
 80113aa:	b2ed      	uxtb	r5, r5
 80113ac:	1b76      	subs	r6, r6, r5
 80113ae:	6823      	ldr	r3, [r4, #0]
 80113b0:	05da      	lsls	r2, r3, #23
 80113b2:	d52f      	bpl.n	8011414 <_scanf_float+0x358>
 80113b4:	055b      	lsls	r3, r3, #21
 80113b6:	d510      	bpl.n	80113da <_scanf_float+0x31e>
 80113b8:	455e      	cmp	r6, fp
 80113ba:	f67f aebf 	bls.w	801113c <_scanf_float+0x80>
 80113be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113c6:	463a      	mov	r2, r7
 80113c8:	4640      	mov	r0, r8
 80113ca:	4798      	blx	r3
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	6123      	str	r3, [r4, #16]
 80113d2:	e7f1      	b.n	80113b8 <_scanf_float+0x2fc>
 80113d4:	46aa      	mov	sl, r5
 80113d6:	9602      	str	r6, [sp, #8]
 80113d8:	e7df      	b.n	801139a <_scanf_float+0x2de>
 80113da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80113de:	6923      	ldr	r3, [r4, #16]
 80113e0:	2965      	cmp	r1, #101	; 0x65
 80113e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80113e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80113ea:	6123      	str	r3, [r4, #16]
 80113ec:	d00c      	beq.n	8011408 <_scanf_float+0x34c>
 80113ee:	2945      	cmp	r1, #69	; 0x45
 80113f0:	d00a      	beq.n	8011408 <_scanf_float+0x34c>
 80113f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113f6:	463a      	mov	r2, r7
 80113f8:	4640      	mov	r0, r8
 80113fa:	4798      	blx	r3
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011402:	3b01      	subs	r3, #1
 8011404:	1eb5      	subs	r5, r6, #2
 8011406:	6123      	str	r3, [r4, #16]
 8011408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801140c:	463a      	mov	r2, r7
 801140e:	4640      	mov	r0, r8
 8011410:	4798      	blx	r3
 8011412:	462e      	mov	r6, r5
 8011414:	6825      	ldr	r5, [r4, #0]
 8011416:	f015 0510 	ands.w	r5, r5, #16
 801141a:	d158      	bne.n	80114ce <_scanf_float+0x412>
 801141c:	7035      	strb	r5, [r6, #0]
 801141e:	6823      	ldr	r3, [r4, #0]
 8011420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011428:	d11c      	bne.n	8011464 <_scanf_float+0x3a8>
 801142a:	9b01      	ldr	r3, [sp, #4]
 801142c:	454b      	cmp	r3, r9
 801142e:	eba3 0209 	sub.w	r2, r3, r9
 8011432:	d124      	bne.n	801147e <_scanf_float+0x3c2>
 8011434:	2200      	movs	r2, #0
 8011436:	4659      	mov	r1, fp
 8011438:	4640      	mov	r0, r8
 801143a:	f002 fd55 	bl	8013ee8 <_strtod_r>
 801143e:	9b03      	ldr	r3, [sp, #12]
 8011440:	6821      	ldr	r1, [r4, #0]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f011 0f02 	tst.w	r1, #2
 8011448:	ec57 6b10 	vmov	r6, r7, d0
 801144c:	f103 0204 	add.w	r2, r3, #4
 8011450:	d020      	beq.n	8011494 <_scanf_float+0x3d8>
 8011452:	9903      	ldr	r1, [sp, #12]
 8011454:	600a      	str	r2, [r1, #0]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	e9c3 6700 	strd	r6, r7, [r3]
 801145c:	68e3      	ldr	r3, [r4, #12]
 801145e:	3301      	adds	r3, #1
 8011460:	60e3      	str	r3, [r4, #12]
 8011462:	e66c      	b.n	801113e <_scanf_float+0x82>
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d0e4      	beq.n	8011434 <_scanf_float+0x378>
 801146a:	9905      	ldr	r1, [sp, #20]
 801146c:	230a      	movs	r3, #10
 801146e:	462a      	mov	r2, r5
 8011470:	3101      	adds	r1, #1
 8011472:	4640      	mov	r0, r8
 8011474:	f002 fdc0 	bl	8013ff8 <_strtol_r>
 8011478:	9b04      	ldr	r3, [sp, #16]
 801147a:	9e05      	ldr	r6, [sp, #20]
 801147c:	1ac2      	subs	r2, r0, r3
 801147e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011482:	429e      	cmp	r6, r3
 8011484:	bf28      	it	cs
 8011486:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801148a:	4912      	ldr	r1, [pc, #72]	; (80114d4 <_scanf_float+0x418>)
 801148c:	4630      	mov	r0, r6
 801148e:	f000 f955 	bl	801173c <siprintf>
 8011492:	e7cf      	b.n	8011434 <_scanf_float+0x378>
 8011494:	f011 0f04 	tst.w	r1, #4
 8011498:	9903      	ldr	r1, [sp, #12]
 801149a:	600a      	str	r2, [r1, #0]
 801149c:	d1db      	bne.n	8011456 <_scanf_float+0x39a>
 801149e:	f8d3 8000 	ldr.w	r8, [r3]
 80114a2:	ee10 2a10 	vmov	r2, s0
 80114a6:	ee10 0a10 	vmov	r0, s0
 80114aa:	463b      	mov	r3, r7
 80114ac:	4639      	mov	r1, r7
 80114ae:	f7f5 fbb3 	bl	8006c18 <__aeabi_dcmpun>
 80114b2:	b128      	cbz	r0, 80114c0 <_scanf_float+0x404>
 80114b4:	4808      	ldr	r0, [pc, #32]	; (80114d8 <_scanf_float+0x41c>)
 80114b6:	f000 fadb 	bl	8011a70 <nanf>
 80114ba:	ed88 0a00 	vstr	s0, [r8]
 80114be:	e7cd      	b.n	801145c <_scanf_float+0x3a0>
 80114c0:	4630      	mov	r0, r6
 80114c2:	4639      	mov	r1, r7
 80114c4:	f7f5 fc06 	bl	8006cd4 <__aeabi_d2f>
 80114c8:	f8c8 0000 	str.w	r0, [r8]
 80114cc:	e7c6      	b.n	801145c <_scanf_float+0x3a0>
 80114ce:	2500      	movs	r5, #0
 80114d0:	e635      	b.n	801113e <_scanf_float+0x82>
 80114d2:	bf00      	nop
 80114d4:	0814f628 	.word	0x0814f628
 80114d8:	0814f9bd 	.word	0x0814f9bd

080114dc <std>:
 80114dc:	2300      	movs	r3, #0
 80114de:	b510      	push	{r4, lr}
 80114e0:	4604      	mov	r4, r0
 80114e2:	e9c0 3300 	strd	r3, r3, [r0]
 80114e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114ea:	6083      	str	r3, [r0, #8]
 80114ec:	8181      	strh	r1, [r0, #12]
 80114ee:	6643      	str	r3, [r0, #100]	; 0x64
 80114f0:	81c2      	strh	r2, [r0, #14]
 80114f2:	6183      	str	r3, [r0, #24]
 80114f4:	4619      	mov	r1, r3
 80114f6:	2208      	movs	r2, #8
 80114f8:	305c      	adds	r0, #92	; 0x5c
 80114fa:	f000 fa27 	bl	801194c <memset>
 80114fe:	4b0d      	ldr	r3, [pc, #52]	; (8011534 <std+0x58>)
 8011500:	6263      	str	r3, [r4, #36]	; 0x24
 8011502:	4b0d      	ldr	r3, [pc, #52]	; (8011538 <std+0x5c>)
 8011504:	62a3      	str	r3, [r4, #40]	; 0x28
 8011506:	4b0d      	ldr	r3, [pc, #52]	; (801153c <std+0x60>)
 8011508:	62e3      	str	r3, [r4, #44]	; 0x2c
 801150a:	4b0d      	ldr	r3, [pc, #52]	; (8011540 <std+0x64>)
 801150c:	6323      	str	r3, [r4, #48]	; 0x30
 801150e:	4b0d      	ldr	r3, [pc, #52]	; (8011544 <std+0x68>)
 8011510:	6224      	str	r4, [r4, #32]
 8011512:	429c      	cmp	r4, r3
 8011514:	d006      	beq.n	8011524 <std+0x48>
 8011516:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801151a:	4294      	cmp	r4, r2
 801151c:	d002      	beq.n	8011524 <std+0x48>
 801151e:	33d0      	adds	r3, #208	; 0xd0
 8011520:	429c      	cmp	r4, r3
 8011522:	d105      	bne.n	8011530 <std+0x54>
 8011524:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801152c:	f000 ba8a 	b.w	8011a44 <__retarget_lock_init_recursive>
 8011530:	bd10      	pop	{r4, pc}
 8011532:	bf00      	nop
 8011534:	0801177d 	.word	0x0801177d
 8011538:	0801179f 	.word	0x0801179f
 801153c:	080117d7 	.word	0x080117d7
 8011540:	080117fb 	.word	0x080117fb
 8011544:	20019fe0 	.word	0x20019fe0

08011548 <stdio_exit_handler>:
 8011548:	4a02      	ldr	r2, [pc, #8]	; (8011554 <stdio_exit_handler+0xc>)
 801154a:	4903      	ldr	r1, [pc, #12]	; (8011558 <stdio_exit_handler+0x10>)
 801154c:	4803      	ldr	r0, [pc, #12]	; (801155c <stdio_exit_handler+0x14>)
 801154e:	f000 b869 	b.w	8011624 <_fwalk_sglue>
 8011552:	bf00      	nop
 8011554:	200008c8 	.word	0x200008c8
 8011558:	08014641 	.word	0x08014641
 801155c:	200008d4 	.word	0x200008d4

08011560 <cleanup_stdio>:
 8011560:	6841      	ldr	r1, [r0, #4]
 8011562:	4b0c      	ldr	r3, [pc, #48]	; (8011594 <cleanup_stdio+0x34>)
 8011564:	4299      	cmp	r1, r3
 8011566:	b510      	push	{r4, lr}
 8011568:	4604      	mov	r4, r0
 801156a:	d001      	beq.n	8011570 <cleanup_stdio+0x10>
 801156c:	f003 f868 	bl	8014640 <_fflush_r>
 8011570:	68a1      	ldr	r1, [r4, #8]
 8011572:	4b09      	ldr	r3, [pc, #36]	; (8011598 <cleanup_stdio+0x38>)
 8011574:	4299      	cmp	r1, r3
 8011576:	d002      	beq.n	801157e <cleanup_stdio+0x1e>
 8011578:	4620      	mov	r0, r4
 801157a:	f003 f861 	bl	8014640 <_fflush_r>
 801157e:	68e1      	ldr	r1, [r4, #12]
 8011580:	4b06      	ldr	r3, [pc, #24]	; (801159c <cleanup_stdio+0x3c>)
 8011582:	4299      	cmp	r1, r3
 8011584:	d004      	beq.n	8011590 <cleanup_stdio+0x30>
 8011586:	4620      	mov	r0, r4
 8011588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801158c:	f003 b858 	b.w	8014640 <_fflush_r>
 8011590:	bd10      	pop	{r4, pc}
 8011592:	bf00      	nop
 8011594:	20019fe0 	.word	0x20019fe0
 8011598:	2001a048 	.word	0x2001a048
 801159c:	2001a0b0 	.word	0x2001a0b0

080115a0 <global_stdio_init.part.0>:
 80115a0:	b510      	push	{r4, lr}
 80115a2:	4b0b      	ldr	r3, [pc, #44]	; (80115d0 <global_stdio_init.part.0+0x30>)
 80115a4:	4c0b      	ldr	r4, [pc, #44]	; (80115d4 <global_stdio_init.part.0+0x34>)
 80115a6:	4a0c      	ldr	r2, [pc, #48]	; (80115d8 <global_stdio_init.part.0+0x38>)
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	4620      	mov	r0, r4
 80115ac:	2200      	movs	r2, #0
 80115ae:	2104      	movs	r1, #4
 80115b0:	f7ff ff94 	bl	80114dc <std>
 80115b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80115b8:	2201      	movs	r2, #1
 80115ba:	2109      	movs	r1, #9
 80115bc:	f7ff ff8e 	bl	80114dc <std>
 80115c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80115c4:	2202      	movs	r2, #2
 80115c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115ca:	2112      	movs	r1, #18
 80115cc:	f7ff bf86 	b.w	80114dc <std>
 80115d0:	2001a118 	.word	0x2001a118
 80115d4:	20019fe0 	.word	0x20019fe0
 80115d8:	08011549 	.word	0x08011549

080115dc <__sfp_lock_acquire>:
 80115dc:	4801      	ldr	r0, [pc, #4]	; (80115e4 <__sfp_lock_acquire+0x8>)
 80115de:	f000 ba32 	b.w	8011a46 <__retarget_lock_acquire_recursive>
 80115e2:	bf00      	nop
 80115e4:	2001a121 	.word	0x2001a121

080115e8 <__sfp_lock_release>:
 80115e8:	4801      	ldr	r0, [pc, #4]	; (80115f0 <__sfp_lock_release+0x8>)
 80115ea:	f000 ba2d 	b.w	8011a48 <__retarget_lock_release_recursive>
 80115ee:	bf00      	nop
 80115f0:	2001a121 	.word	0x2001a121

080115f4 <__sinit>:
 80115f4:	b510      	push	{r4, lr}
 80115f6:	4604      	mov	r4, r0
 80115f8:	f7ff fff0 	bl	80115dc <__sfp_lock_acquire>
 80115fc:	6a23      	ldr	r3, [r4, #32]
 80115fe:	b11b      	cbz	r3, 8011608 <__sinit+0x14>
 8011600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011604:	f7ff bff0 	b.w	80115e8 <__sfp_lock_release>
 8011608:	4b04      	ldr	r3, [pc, #16]	; (801161c <__sinit+0x28>)
 801160a:	6223      	str	r3, [r4, #32]
 801160c:	4b04      	ldr	r3, [pc, #16]	; (8011620 <__sinit+0x2c>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1f5      	bne.n	8011600 <__sinit+0xc>
 8011614:	f7ff ffc4 	bl	80115a0 <global_stdio_init.part.0>
 8011618:	e7f2      	b.n	8011600 <__sinit+0xc>
 801161a:	bf00      	nop
 801161c:	08011561 	.word	0x08011561
 8011620:	2001a118 	.word	0x2001a118

08011624 <_fwalk_sglue>:
 8011624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011628:	4607      	mov	r7, r0
 801162a:	4688      	mov	r8, r1
 801162c:	4614      	mov	r4, r2
 801162e:	2600      	movs	r6, #0
 8011630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011634:	f1b9 0901 	subs.w	r9, r9, #1
 8011638:	d505      	bpl.n	8011646 <_fwalk_sglue+0x22>
 801163a:	6824      	ldr	r4, [r4, #0]
 801163c:	2c00      	cmp	r4, #0
 801163e:	d1f7      	bne.n	8011630 <_fwalk_sglue+0xc>
 8011640:	4630      	mov	r0, r6
 8011642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011646:	89ab      	ldrh	r3, [r5, #12]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d907      	bls.n	801165c <_fwalk_sglue+0x38>
 801164c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011650:	3301      	adds	r3, #1
 8011652:	d003      	beq.n	801165c <_fwalk_sglue+0x38>
 8011654:	4629      	mov	r1, r5
 8011656:	4638      	mov	r0, r7
 8011658:	47c0      	blx	r8
 801165a:	4306      	orrs	r6, r0
 801165c:	3568      	adds	r5, #104	; 0x68
 801165e:	e7e9      	b.n	8011634 <_fwalk_sglue+0x10>

08011660 <iprintf>:
 8011660:	b40f      	push	{r0, r1, r2, r3}
 8011662:	b507      	push	{r0, r1, r2, lr}
 8011664:	4906      	ldr	r1, [pc, #24]	; (8011680 <iprintf+0x20>)
 8011666:	ab04      	add	r3, sp, #16
 8011668:	6808      	ldr	r0, [r1, #0]
 801166a:	f853 2b04 	ldr.w	r2, [r3], #4
 801166e:	6881      	ldr	r1, [r0, #8]
 8011670:	9301      	str	r3, [sp, #4]
 8011672:	f002 fe45 	bl	8014300 <_vfiprintf_r>
 8011676:	b003      	add	sp, #12
 8011678:	f85d eb04 	ldr.w	lr, [sp], #4
 801167c:	b004      	add	sp, #16
 801167e:	4770      	bx	lr
 8011680:	20000920 	.word	0x20000920

08011684 <_puts_r>:
 8011684:	6a03      	ldr	r3, [r0, #32]
 8011686:	b570      	push	{r4, r5, r6, lr}
 8011688:	6884      	ldr	r4, [r0, #8]
 801168a:	4605      	mov	r5, r0
 801168c:	460e      	mov	r6, r1
 801168e:	b90b      	cbnz	r3, 8011694 <_puts_r+0x10>
 8011690:	f7ff ffb0 	bl	80115f4 <__sinit>
 8011694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011696:	07db      	lsls	r3, r3, #31
 8011698:	d405      	bmi.n	80116a6 <_puts_r+0x22>
 801169a:	89a3      	ldrh	r3, [r4, #12]
 801169c:	0598      	lsls	r0, r3, #22
 801169e:	d402      	bmi.n	80116a6 <_puts_r+0x22>
 80116a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116a2:	f000 f9d0 	bl	8011a46 <__retarget_lock_acquire_recursive>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	0719      	lsls	r1, r3, #28
 80116aa:	d513      	bpl.n	80116d4 <_puts_r+0x50>
 80116ac:	6923      	ldr	r3, [r4, #16]
 80116ae:	b18b      	cbz	r3, 80116d4 <_puts_r+0x50>
 80116b0:	3e01      	subs	r6, #1
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80116b8:	3b01      	subs	r3, #1
 80116ba:	60a3      	str	r3, [r4, #8]
 80116bc:	b9e9      	cbnz	r1, 80116fa <_puts_r+0x76>
 80116be:	2b00      	cmp	r3, #0
 80116c0:	da2e      	bge.n	8011720 <_puts_r+0x9c>
 80116c2:	4622      	mov	r2, r4
 80116c4:	210a      	movs	r1, #10
 80116c6:	4628      	mov	r0, r5
 80116c8:	f000 f89b 	bl	8011802 <__swbuf_r>
 80116cc:	3001      	adds	r0, #1
 80116ce:	d007      	beq.n	80116e0 <_puts_r+0x5c>
 80116d0:	250a      	movs	r5, #10
 80116d2:	e007      	b.n	80116e4 <_puts_r+0x60>
 80116d4:	4621      	mov	r1, r4
 80116d6:	4628      	mov	r0, r5
 80116d8:	f000 f8d0 	bl	801187c <__swsetup_r>
 80116dc:	2800      	cmp	r0, #0
 80116de:	d0e7      	beq.n	80116b0 <_puts_r+0x2c>
 80116e0:	f04f 35ff 	mov.w	r5, #4294967295
 80116e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116e6:	07da      	lsls	r2, r3, #31
 80116e8:	d405      	bmi.n	80116f6 <_puts_r+0x72>
 80116ea:	89a3      	ldrh	r3, [r4, #12]
 80116ec:	059b      	lsls	r3, r3, #22
 80116ee:	d402      	bmi.n	80116f6 <_puts_r+0x72>
 80116f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116f2:	f000 f9a9 	bl	8011a48 <__retarget_lock_release_recursive>
 80116f6:	4628      	mov	r0, r5
 80116f8:	bd70      	pop	{r4, r5, r6, pc}
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	da04      	bge.n	8011708 <_puts_r+0x84>
 80116fe:	69a2      	ldr	r2, [r4, #24]
 8011700:	429a      	cmp	r2, r3
 8011702:	dc06      	bgt.n	8011712 <_puts_r+0x8e>
 8011704:	290a      	cmp	r1, #10
 8011706:	d004      	beq.n	8011712 <_puts_r+0x8e>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	6022      	str	r2, [r4, #0]
 801170e:	7019      	strb	r1, [r3, #0]
 8011710:	e7cf      	b.n	80116b2 <_puts_r+0x2e>
 8011712:	4622      	mov	r2, r4
 8011714:	4628      	mov	r0, r5
 8011716:	f000 f874 	bl	8011802 <__swbuf_r>
 801171a:	3001      	adds	r0, #1
 801171c:	d1c9      	bne.n	80116b2 <_puts_r+0x2e>
 801171e:	e7df      	b.n	80116e0 <_puts_r+0x5c>
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	250a      	movs	r5, #10
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	6022      	str	r2, [r4, #0]
 8011728:	701d      	strb	r5, [r3, #0]
 801172a:	e7db      	b.n	80116e4 <_puts_r+0x60>

0801172c <puts>:
 801172c:	4b02      	ldr	r3, [pc, #8]	; (8011738 <puts+0xc>)
 801172e:	4601      	mov	r1, r0
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	f7ff bfa7 	b.w	8011684 <_puts_r>
 8011736:	bf00      	nop
 8011738:	20000920 	.word	0x20000920

0801173c <siprintf>:
 801173c:	b40e      	push	{r1, r2, r3}
 801173e:	b500      	push	{lr}
 8011740:	b09c      	sub	sp, #112	; 0x70
 8011742:	ab1d      	add	r3, sp, #116	; 0x74
 8011744:	9002      	str	r0, [sp, #8]
 8011746:	9006      	str	r0, [sp, #24]
 8011748:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801174c:	4809      	ldr	r0, [pc, #36]	; (8011774 <siprintf+0x38>)
 801174e:	9107      	str	r1, [sp, #28]
 8011750:	9104      	str	r1, [sp, #16]
 8011752:	4909      	ldr	r1, [pc, #36]	; (8011778 <siprintf+0x3c>)
 8011754:	f853 2b04 	ldr.w	r2, [r3], #4
 8011758:	9105      	str	r1, [sp, #20]
 801175a:	6800      	ldr	r0, [r0, #0]
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	a902      	add	r1, sp, #8
 8011760:	f002 fca6 	bl	80140b0 <_svfiprintf_r>
 8011764:	9b02      	ldr	r3, [sp, #8]
 8011766:	2200      	movs	r2, #0
 8011768:	701a      	strb	r2, [r3, #0]
 801176a:	b01c      	add	sp, #112	; 0x70
 801176c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011770:	b003      	add	sp, #12
 8011772:	4770      	bx	lr
 8011774:	20000920 	.word	0x20000920
 8011778:	ffff0208 	.word	0xffff0208

0801177c <__sread>:
 801177c:	b510      	push	{r4, lr}
 801177e:	460c      	mov	r4, r1
 8011780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011784:	f000 f910 	bl	80119a8 <_read_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	bfab      	itete	ge
 801178c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801178e:	89a3      	ldrhlt	r3, [r4, #12]
 8011790:	181b      	addge	r3, r3, r0
 8011792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011796:	bfac      	ite	ge
 8011798:	6563      	strge	r3, [r4, #84]	; 0x54
 801179a:	81a3      	strhlt	r3, [r4, #12]
 801179c:	bd10      	pop	{r4, pc}

0801179e <__swrite>:
 801179e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a2:	461f      	mov	r7, r3
 80117a4:	898b      	ldrh	r3, [r1, #12]
 80117a6:	05db      	lsls	r3, r3, #23
 80117a8:	4605      	mov	r5, r0
 80117aa:	460c      	mov	r4, r1
 80117ac:	4616      	mov	r6, r2
 80117ae:	d505      	bpl.n	80117bc <__swrite+0x1e>
 80117b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b4:	2302      	movs	r3, #2
 80117b6:	2200      	movs	r2, #0
 80117b8:	f000 f8e4 	bl	8011984 <_lseek_r>
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117c6:	81a3      	strh	r3, [r4, #12]
 80117c8:	4632      	mov	r2, r6
 80117ca:	463b      	mov	r3, r7
 80117cc:	4628      	mov	r0, r5
 80117ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117d2:	f000 b8fb 	b.w	80119cc <_write_r>

080117d6 <__sseek>:
 80117d6:	b510      	push	{r4, lr}
 80117d8:	460c      	mov	r4, r1
 80117da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117de:	f000 f8d1 	bl	8011984 <_lseek_r>
 80117e2:	1c43      	adds	r3, r0, #1
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	bf15      	itete	ne
 80117e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80117ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117f2:	81a3      	strheq	r3, [r4, #12]
 80117f4:	bf18      	it	ne
 80117f6:	81a3      	strhne	r3, [r4, #12]
 80117f8:	bd10      	pop	{r4, pc}

080117fa <__sclose>:
 80117fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117fe:	f000 b8b1 	b.w	8011964 <_close_r>

08011802 <__swbuf_r>:
 8011802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011804:	460e      	mov	r6, r1
 8011806:	4614      	mov	r4, r2
 8011808:	4605      	mov	r5, r0
 801180a:	b118      	cbz	r0, 8011814 <__swbuf_r+0x12>
 801180c:	6a03      	ldr	r3, [r0, #32]
 801180e:	b90b      	cbnz	r3, 8011814 <__swbuf_r+0x12>
 8011810:	f7ff fef0 	bl	80115f4 <__sinit>
 8011814:	69a3      	ldr	r3, [r4, #24]
 8011816:	60a3      	str	r3, [r4, #8]
 8011818:	89a3      	ldrh	r3, [r4, #12]
 801181a:	071a      	lsls	r2, r3, #28
 801181c:	d525      	bpl.n	801186a <__swbuf_r+0x68>
 801181e:	6923      	ldr	r3, [r4, #16]
 8011820:	b31b      	cbz	r3, 801186a <__swbuf_r+0x68>
 8011822:	6823      	ldr	r3, [r4, #0]
 8011824:	6922      	ldr	r2, [r4, #16]
 8011826:	1a98      	subs	r0, r3, r2
 8011828:	6963      	ldr	r3, [r4, #20]
 801182a:	b2f6      	uxtb	r6, r6
 801182c:	4283      	cmp	r3, r0
 801182e:	4637      	mov	r7, r6
 8011830:	dc04      	bgt.n	801183c <__swbuf_r+0x3a>
 8011832:	4621      	mov	r1, r4
 8011834:	4628      	mov	r0, r5
 8011836:	f002 ff03 	bl	8014640 <_fflush_r>
 801183a:	b9e0      	cbnz	r0, 8011876 <__swbuf_r+0x74>
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	3b01      	subs	r3, #1
 8011840:	60a3      	str	r3, [r4, #8]
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	1c5a      	adds	r2, r3, #1
 8011846:	6022      	str	r2, [r4, #0]
 8011848:	701e      	strb	r6, [r3, #0]
 801184a:	6962      	ldr	r2, [r4, #20]
 801184c:	1c43      	adds	r3, r0, #1
 801184e:	429a      	cmp	r2, r3
 8011850:	d004      	beq.n	801185c <__swbuf_r+0x5a>
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	07db      	lsls	r3, r3, #31
 8011856:	d506      	bpl.n	8011866 <__swbuf_r+0x64>
 8011858:	2e0a      	cmp	r6, #10
 801185a:	d104      	bne.n	8011866 <__swbuf_r+0x64>
 801185c:	4621      	mov	r1, r4
 801185e:	4628      	mov	r0, r5
 8011860:	f002 feee 	bl	8014640 <_fflush_r>
 8011864:	b938      	cbnz	r0, 8011876 <__swbuf_r+0x74>
 8011866:	4638      	mov	r0, r7
 8011868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801186a:	4621      	mov	r1, r4
 801186c:	4628      	mov	r0, r5
 801186e:	f000 f805 	bl	801187c <__swsetup_r>
 8011872:	2800      	cmp	r0, #0
 8011874:	d0d5      	beq.n	8011822 <__swbuf_r+0x20>
 8011876:	f04f 37ff 	mov.w	r7, #4294967295
 801187a:	e7f4      	b.n	8011866 <__swbuf_r+0x64>

0801187c <__swsetup_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4b2a      	ldr	r3, [pc, #168]	; (8011928 <__swsetup_r+0xac>)
 8011880:	4605      	mov	r5, r0
 8011882:	6818      	ldr	r0, [r3, #0]
 8011884:	460c      	mov	r4, r1
 8011886:	b118      	cbz	r0, 8011890 <__swsetup_r+0x14>
 8011888:	6a03      	ldr	r3, [r0, #32]
 801188a:	b90b      	cbnz	r3, 8011890 <__swsetup_r+0x14>
 801188c:	f7ff feb2 	bl	80115f4 <__sinit>
 8011890:	89a3      	ldrh	r3, [r4, #12]
 8011892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011896:	0718      	lsls	r0, r3, #28
 8011898:	d422      	bmi.n	80118e0 <__swsetup_r+0x64>
 801189a:	06d9      	lsls	r1, r3, #27
 801189c:	d407      	bmi.n	80118ae <__swsetup_r+0x32>
 801189e:	2309      	movs	r3, #9
 80118a0:	602b      	str	r3, [r5, #0]
 80118a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80118a6:	81a3      	strh	r3, [r4, #12]
 80118a8:	f04f 30ff 	mov.w	r0, #4294967295
 80118ac:	e034      	b.n	8011918 <__swsetup_r+0x9c>
 80118ae:	0758      	lsls	r0, r3, #29
 80118b0:	d512      	bpl.n	80118d8 <__swsetup_r+0x5c>
 80118b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118b4:	b141      	cbz	r1, 80118c8 <__swsetup_r+0x4c>
 80118b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118ba:	4299      	cmp	r1, r3
 80118bc:	d002      	beq.n	80118c4 <__swsetup_r+0x48>
 80118be:	4628      	mov	r0, r5
 80118c0:	f000 ff58 	bl	8012774 <_free_r>
 80118c4:	2300      	movs	r3, #0
 80118c6:	6363      	str	r3, [r4, #52]	; 0x34
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118ce:	81a3      	strh	r3, [r4, #12]
 80118d0:	2300      	movs	r3, #0
 80118d2:	6063      	str	r3, [r4, #4]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	f043 0308 	orr.w	r3, r3, #8
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	b94b      	cbnz	r3, 80118f8 <__swsetup_r+0x7c>
 80118e4:	89a3      	ldrh	r3, [r4, #12]
 80118e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ee:	d003      	beq.n	80118f8 <__swsetup_r+0x7c>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4628      	mov	r0, r5
 80118f4:	f002 fef2 	bl	80146dc <__smakebuf_r>
 80118f8:	89a0      	ldrh	r0, [r4, #12]
 80118fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118fe:	f010 0301 	ands.w	r3, r0, #1
 8011902:	d00a      	beq.n	801191a <__swsetup_r+0x9e>
 8011904:	2300      	movs	r3, #0
 8011906:	60a3      	str	r3, [r4, #8]
 8011908:	6963      	ldr	r3, [r4, #20]
 801190a:	425b      	negs	r3, r3
 801190c:	61a3      	str	r3, [r4, #24]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	b943      	cbnz	r3, 8011924 <__swsetup_r+0xa8>
 8011912:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011916:	d1c4      	bne.n	80118a2 <__swsetup_r+0x26>
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	0781      	lsls	r1, r0, #30
 801191c:	bf58      	it	pl
 801191e:	6963      	ldrpl	r3, [r4, #20]
 8011920:	60a3      	str	r3, [r4, #8]
 8011922:	e7f4      	b.n	801190e <__swsetup_r+0x92>
 8011924:	2000      	movs	r0, #0
 8011926:	e7f7      	b.n	8011918 <__swsetup_r+0x9c>
 8011928:	20000920 	.word	0x20000920

0801192c <memcmp>:
 801192c:	b510      	push	{r4, lr}
 801192e:	3901      	subs	r1, #1
 8011930:	4402      	add	r2, r0
 8011932:	4290      	cmp	r0, r2
 8011934:	d101      	bne.n	801193a <memcmp+0xe>
 8011936:	2000      	movs	r0, #0
 8011938:	e005      	b.n	8011946 <memcmp+0x1a>
 801193a:	7803      	ldrb	r3, [r0, #0]
 801193c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011940:	42a3      	cmp	r3, r4
 8011942:	d001      	beq.n	8011948 <memcmp+0x1c>
 8011944:	1b18      	subs	r0, r3, r4
 8011946:	bd10      	pop	{r4, pc}
 8011948:	3001      	adds	r0, #1
 801194a:	e7f2      	b.n	8011932 <memcmp+0x6>

0801194c <memset>:
 801194c:	4402      	add	r2, r0
 801194e:	4603      	mov	r3, r0
 8011950:	4293      	cmp	r3, r2
 8011952:	d100      	bne.n	8011956 <memset+0xa>
 8011954:	4770      	bx	lr
 8011956:	f803 1b01 	strb.w	r1, [r3], #1
 801195a:	e7f9      	b.n	8011950 <memset+0x4>

0801195c <_localeconv_r>:
 801195c:	4800      	ldr	r0, [pc, #0]	; (8011960 <_localeconv_r+0x4>)
 801195e:	4770      	bx	lr
 8011960:	20000a14 	.word	0x20000a14

08011964 <_close_r>:
 8011964:	b538      	push	{r3, r4, r5, lr}
 8011966:	4d06      	ldr	r5, [pc, #24]	; (8011980 <_close_r+0x1c>)
 8011968:	2300      	movs	r3, #0
 801196a:	4604      	mov	r4, r0
 801196c:	4608      	mov	r0, r1
 801196e:	602b      	str	r3, [r5, #0]
 8011970:	f7f7 f919 	bl	8008ba6 <_close>
 8011974:	1c43      	adds	r3, r0, #1
 8011976:	d102      	bne.n	801197e <_close_r+0x1a>
 8011978:	682b      	ldr	r3, [r5, #0]
 801197a:	b103      	cbz	r3, 801197e <_close_r+0x1a>
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	bd38      	pop	{r3, r4, r5, pc}
 8011980:	2001a11c 	.word	0x2001a11c

08011984 <_lseek_r>:
 8011984:	b538      	push	{r3, r4, r5, lr}
 8011986:	4d07      	ldr	r5, [pc, #28]	; (80119a4 <_lseek_r+0x20>)
 8011988:	4604      	mov	r4, r0
 801198a:	4608      	mov	r0, r1
 801198c:	4611      	mov	r1, r2
 801198e:	2200      	movs	r2, #0
 8011990:	602a      	str	r2, [r5, #0]
 8011992:	461a      	mov	r2, r3
 8011994:	f7f7 f92e 	bl	8008bf4 <_lseek>
 8011998:	1c43      	adds	r3, r0, #1
 801199a:	d102      	bne.n	80119a2 <_lseek_r+0x1e>
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	b103      	cbz	r3, 80119a2 <_lseek_r+0x1e>
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	bd38      	pop	{r3, r4, r5, pc}
 80119a4:	2001a11c 	.word	0x2001a11c

080119a8 <_read_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4d07      	ldr	r5, [pc, #28]	; (80119c8 <_read_r+0x20>)
 80119ac:	4604      	mov	r4, r0
 80119ae:	4608      	mov	r0, r1
 80119b0:	4611      	mov	r1, r2
 80119b2:	2200      	movs	r2, #0
 80119b4:	602a      	str	r2, [r5, #0]
 80119b6:	461a      	mov	r2, r3
 80119b8:	f7f7 f8d8 	bl	8008b6c <_read>
 80119bc:	1c43      	adds	r3, r0, #1
 80119be:	d102      	bne.n	80119c6 <_read_r+0x1e>
 80119c0:	682b      	ldr	r3, [r5, #0]
 80119c2:	b103      	cbz	r3, 80119c6 <_read_r+0x1e>
 80119c4:	6023      	str	r3, [r4, #0]
 80119c6:	bd38      	pop	{r3, r4, r5, pc}
 80119c8:	2001a11c 	.word	0x2001a11c

080119cc <_write_r>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	4d07      	ldr	r5, [pc, #28]	; (80119ec <_write_r+0x20>)
 80119d0:	4604      	mov	r4, r0
 80119d2:	4608      	mov	r0, r1
 80119d4:	4611      	mov	r1, r2
 80119d6:	2200      	movs	r2, #0
 80119d8:	602a      	str	r2, [r5, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	f7f6 fc64 	bl	80082a8 <_write>
 80119e0:	1c43      	adds	r3, r0, #1
 80119e2:	d102      	bne.n	80119ea <_write_r+0x1e>
 80119e4:	682b      	ldr	r3, [r5, #0]
 80119e6:	b103      	cbz	r3, 80119ea <_write_r+0x1e>
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	2001a11c 	.word	0x2001a11c

080119f0 <__errno>:
 80119f0:	4b01      	ldr	r3, [pc, #4]	; (80119f8 <__errno+0x8>)
 80119f2:	6818      	ldr	r0, [r3, #0]
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	20000920 	.word	0x20000920

080119fc <__libc_init_array>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	4d0d      	ldr	r5, [pc, #52]	; (8011a34 <__libc_init_array+0x38>)
 8011a00:	4c0d      	ldr	r4, [pc, #52]	; (8011a38 <__libc_init_array+0x3c>)
 8011a02:	1b64      	subs	r4, r4, r5
 8011a04:	10a4      	asrs	r4, r4, #2
 8011a06:	2600      	movs	r6, #0
 8011a08:	42a6      	cmp	r6, r4
 8011a0a:	d109      	bne.n	8011a20 <__libc_init_array+0x24>
 8011a0c:	4d0b      	ldr	r5, [pc, #44]	; (8011a3c <__libc_init_array+0x40>)
 8011a0e:	4c0c      	ldr	r4, [pc, #48]	; (8011a40 <__libc_init_array+0x44>)
 8011a10:	f006 fa4a 	bl	8017ea8 <_init>
 8011a14:	1b64      	subs	r4, r4, r5
 8011a16:	10a4      	asrs	r4, r4, #2
 8011a18:	2600      	movs	r6, #0
 8011a1a:	42a6      	cmp	r6, r4
 8011a1c:	d105      	bne.n	8011a2a <__libc_init_array+0x2e>
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a24:	4798      	blx	r3
 8011a26:	3601      	adds	r6, #1
 8011a28:	e7ee      	b.n	8011a08 <__libc_init_array+0xc>
 8011a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a2e:	4798      	blx	r3
 8011a30:	3601      	adds	r6, #1
 8011a32:	e7f2      	b.n	8011a1a <__libc_init_array+0x1e>
 8011a34:	0814fe50 	.word	0x0814fe50
 8011a38:	0814fe50 	.word	0x0814fe50
 8011a3c:	0814fe50 	.word	0x0814fe50
 8011a40:	0814fe54 	.word	0x0814fe54

08011a44 <__retarget_lock_init_recursive>:
 8011a44:	4770      	bx	lr

08011a46 <__retarget_lock_acquire_recursive>:
 8011a46:	4770      	bx	lr

08011a48 <__retarget_lock_release_recursive>:
 8011a48:	4770      	bx	lr

08011a4a <__aeabi_memcpy>:
 8011a4a:	f000 b803 	b.w	8011a54 <memcpy>

08011a4e <__aeabi_memclr>:
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f7f4 bc3e 	b.w	80062d0 <__aeabi_memset>

08011a54 <memcpy>:
 8011a54:	440a      	add	r2, r1
 8011a56:	4291      	cmp	r1, r2
 8011a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a5c:	d100      	bne.n	8011a60 <memcpy+0xc>
 8011a5e:	4770      	bx	lr
 8011a60:	b510      	push	{r4, lr}
 8011a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a6a:	4291      	cmp	r1, r2
 8011a6c:	d1f9      	bne.n	8011a62 <memcpy+0xe>
 8011a6e:	bd10      	pop	{r4, pc}

08011a70 <nanf>:
 8011a70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011a78 <nanf+0x8>
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	7fc00000 	.word	0x7fc00000

08011a7c <quorem>:
 8011a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a80:	6903      	ldr	r3, [r0, #16]
 8011a82:	690c      	ldr	r4, [r1, #16]
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	4607      	mov	r7, r0
 8011a88:	db7e      	blt.n	8011b88 <quorem+0x10c>
 8011a8a:	3c01      	subs	r4, #1
 8011a8c:	f101 0814 	add.w	r8, r1, #20
 8011a90:	f100 0514 	add.w	r5, r0, #20
 8011a94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011aaa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011aae:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ab2:	d331      	bcc.n	8011b18 <quorem+0x9c>
 8011ab4:	f04f 0e00 	mov.w	lr, #0
 8011ab8:	4640      	mov	r0, r8
 8011aba:	46ac      	mov	ip, r5
 8011abc:	46f2      	mov	sl, lr
 8011abe:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ac2:	b293      	uxth	r3, r2
 8011ac4:	fb06 e303 	mla	r3, r6, r3, lr
 8011ac8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011acc:	0c1a      	lsrs	r2, r3, #16
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	ebaa 0303 	sub.w	r3, sl, r3
 8011ad4:	f8dc a000 	ldr.w	sl, [ip]
 8011ad8:	fa13 f38a 	uxtah	r3, r3, sl
 8011adc:	fb06 220e 	mla	r2, r6, lr, r2
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	9b00      	ldr	r3, [sp, #0]
 8011ae4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011ae8:	b292      	uxth	r2, r2
 8011aea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011af2:	f8bd 3000 	ldrh.w	r3, [sp]
 8011af6:	4581      	cmp	r9, r0
 8011af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011afc:	f84c 3b04 	str.w	r3, [ip], #4
 8011b00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011b04:	d2db      	bcs.n	8011abe <quorem+0x42>
 8011b06:	f855 300b 	ldr.w	r3, [r5, fp]
 8011b0a:	b92b      	cbnz	r3, 8011b18 <quorem+0x9c>
 8011b0c:	9b01      	ldr	r3, [sp, #4]
 8011b0e:	3b04      	subs	r3, #4
 8011b10:	429d      	cmp	r5, r3
 8011b12:	461a      	mov	r2, r3
 8011b14:	d32c      	bcc.n	8011b70 <quorem+0xf4>
 8011b16:	613c      	str	r4, [r7, #16]
 8011b18:	4638      	mov	r0, r7
 8011b1a:	f001 f9f1 	bl	8012f00 <__mcmp>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	db22      	blt.n	8011b68 <quorem+0xec>
 8011b22:	3601      	adds	r6, #1
 8011b24:	4629      	mov	r1, r5
 8011b26:	2000      	movs	r0, #0
 8011b28:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b2c:	f8d1 c000 	ldr.w	ip, [r1]
 8011b30:	b293      	uxth	r3, r2
 8011b32:	1ac3      	subs	r3, r0, r3
 8011b34:	0c12      	lsrs	r2, r2, #16
 8011b36:	fa13 f38c 	uxtah	r3, r3, ip
 8011b3a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011b3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b48:	45c1      	cmp	r9, r8
 8011b4a:	f841 3b04 	str.w	r3, [r1], #4
 8011b4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011b52:	d2e9      	bcs.n	8011b28 <quorem+0xac>
 8011b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b5c:	b922      	cbnz	r2, 8011b68 <quorem+0xec>
 8011b5e:	3b04      	subs	r3, #4
 8011b60:	429d      	cmp	r5, r3
 8011b62:	461a      	mov	r2, r3
 8011b64:	d30a      	bcc.n	8011b7c <quorem+0x100>
 8011b66:	613c      	str	r4, [r7, #16]
 8011b68:	4630      	mov	r0, r6
 8011b6a:	b003      	add	sp, #12
 8011b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b70:	6812      	ldr	r2, [r2, #0]
 8011b72:	3b04      	subs	r3, #4
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	d1ce      	bne.n	8011b16 <quorem+0x9a>
 8011b78:	3c01      	subs	r4, #1
 8011b7a:	e7c9      	b.n	8011b10 <quorem+0x94>
 8011b7c:	6812      	ldr	r2, [r2, #0]
 8011b7e:	3b04      	subs	r3, #4
 8011b80:	2a00      	cmp	r2, #0
 8011b82:	d1f0      	bne.n	8011b66 <quorem+0xea>
 8011b84:	3c01      	subs	r4, #1
 8011b86:	e7eb      	b.n	8011b60 <quorem+0xe4>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	e7ee      	b.n	8011b6a <quorem+0xee>
 8011b8c:	0000      	movs	r0, r0
	...

08011b90 <_dtoa_r>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	ed2d 8b04 	vpush	{d8-d9}
 8011b98:	69c5      	ldr	r5, [r0, #28]
 8011b9a:	b093      	sub	sp, #76	; 0x4c
 8011b9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ba0:	ec57 6b10 	vmov	r6, r7, d0
 8011ba4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011ba8:	9107      	str	r1, [sp, #28]
 8011baa:	4604      	mov	r4, r0
 8011bac:	920a      	str	r2, [sp, #40]	; 0x28
 8011bae:	930d      	str	r3, [sp, #52]	; 0x34
 8011bb0:	b975      	cbnz	r5, 8011bd0 <_dtoa_r+0x40>
 8011bb2:	2010      	movs	r0, #16
 8011bb4:	f000 fe2a 	bl	801280c <malloc>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	61e0      	str	r0, [r4, #28]
 8011bbc:	b920      	cbnz	r0, 8011bc8 <_dtoa_r+0x38>
 8011bbe:	4bae      	ldr	r3, [pc, #696]	; (8011e78 <_dtoa_r+0x2e8>)
 8011bc0:	21ef      	movs	r1, #239	; 0xef
 8011bc2:	48ae      	ldr	r0, [pc, #696]	; (8011e7c <_dtoa_r+0x2ec>)
 8011bc4:	f002 fe2c 	bl	8014820 <__assert_func>
 8011bc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011bcc:	6005      	str	r5, [r0, #0]
 8011bce:	60c5      	str	r5, [r0, #12]
 8011bd0:	69e3      	ldr	r3, [r4, #28]
 8011bd2:	6819      	ldr	r1, [r3, #0]
 8011bd4:	b151      	cbz	r1, 8011bec <_dtoa_r+0x5c>
 8011bd6:	685a      	ldr	r2, [r3, #4]
 8011bd8:	604a      	str	r2, [r1, #4]
 8011bda:	2301      	movs	r3, #1
 8011bdc:	4093      	lsls	r3, r2
 8011bde:	608b      	str	r3, [r1, #8]
 8011be0:	4620      	mov	r0, r4
 8011be2:	f000 ff07 	bl	80129f4 <_Bfree>
 8011be6:	69e3      	ldr	r3, [r4, #28]
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	1e3b      	subs	r3, r7, #0
 8011bee:	bfbb      	ittet	lt
 8011bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011bf4:	9303      	strlt	r3, [sp, #12]
 8011bf6:	2300      	movge	r3, #0
 8011bf8:	2201      	movlt	r2, #1
 8011bfa:	bfac      	ite	ge
 8011bfc:	f8c8 3000 	strge.w	r3, [r8]
 8011c00:	f8c8 2000 	strlt.w	r2, [r8]
 8011c04:	4b9e      	ldr	r3, [pc, #632]	; (8011e80 <_dtoa_r+0x2f0>)
 8011c06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011c0a:	ea33 0308 	bics.w	r3, r3, r8
 8011c0e:	d11b      	bne.n	8011c48 <_dtoa_r+0xb8>
 8011c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011c1c:	4333      	orrs	r3, r6
 8011c1e:	f000 8593 	beq.w	8012748 <_dtoa_r+0xbb8>
 8011c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c24:	b963      	cbnz	r3, 8011c40 <_dtoa_r+0xb0>
 8011c26:	4b97      	ldr	r3, [pc, #604]	; (8011e84 <_dtoa_r+0x2f4>)
 8011c28:	e027      	b.n	8011c7a <_dtoa_r+0xea>
 8011c2a:	4b97      	ldr	r3, [pc, #604]	; (8011e88 <_dtoa_r+0x2f8>)
 8011c2c:	9300      	str	r3, [sp, #0]
 8011c2e:	3308      	adds	r3, #8
 8011c30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	9800      	ldr	r0, [sp, #0]
 8011c36:	b013      	add	sp, #76	; 0x4c
 8011c38:	ecbd 8b04 	vpop	{d8-d9}
 8011c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c40:	4b90      	ldr	r3, [pc, #576]	; (8011e84 <_dtoa_r+0x2f4>)
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	3303      	adds	r3, #3
 8011c46:	e7f3      	b.n	8011c30 <_dtoa_r+0xa0>
 8011c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	ec51 0b17 	vmov	r0, r1, d7
 8011c52:	eeb0 8a47 	vmov.f32	s16, s14
 8011c56:	eef0 8a67 	vmov.f32	s17, s15
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f7f4 ffaa 	bl	8006bb4 <__aeabi_dcmpeq>
 8011c60:	4681      	mov	r9, r0
 8011c62:	b160      	cbz	r0, 8011c7e <_dtoa_r+0xee>
 8011c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c66:	2301      	movs	r3, #1
 8011c68:	6013      	str	r3, [r2, #0]
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f000 8568 	beq.w	8012742 <_dtoa_r+0xbb2>
 8011c72:	4b86      	ldr	r3, [pc, #536]	; (8011e8c <_dtoa_r+0x2fc>)
 8011c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	e7da      	b.n	8011c34 <_dtoa_r+0xa4>
 8011c7e:	aa10      	add	r2, sp, #64	; 0x40
 8011c80:	a911      	add	r1, sp, #68	; 0x44
 8011c82:	4620      	mov	r0, r4
 8011c84:	eeb0 0a48 	vmov.f32	s0, s16
 8011c88:	eef0 0a68 	vmov.f32	s1, s17
 8011c8c:	f001 fa4e 	bl	801312c <__d2b>
 8011c90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011c94:	4682      	mov	sl, r0
 8011c96:	2d00      	cmp	r5, #0
 8011c98:	d07f      	beq.n	8011d9a <_dtoa_r+0x20a>
 8011c9a:	ee18 3a90 	vmov	r3, s17
 8011c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ca2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011ca6:	ec51 0b18 	vmov	r0, r1, d8
 8011caa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011cae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011cb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	2200      	movs	r2, #0
 8011cba:	4b75      	ldr	r3, [pc, #468]	; (8011e90 <_dtoa_r+0x300>)
 8011cbc:	f7f4 fb5a 	bl	8006374 <__aeabi_dsub>
 8011cc0:	a367      	add	r3, pc, #412	; (adr r3, 8011e60 <_dtoa_r+0x2d0>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	f7f4 fd0d 	bl	80066e4 <__aeabi_dmul>
 8011cca:	a367      	add	r3, pc, #412	; (adr r3, 8011e68 <_dtoa_r+0x2d8>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	f7f4 fb52 	bl	8006378 <__adddf3>
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	460f      	mov	r7, r1
 8011cda:	f7f4 fc99 	bl	8006610 <__aeabi_i2d>
 8011cde:	a364      	add	r3, pc, #400	; (adr r3, 8011e70 <_dtoa_r+0x2e0>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	f7f4 fcfe 	bl	80066e4 <__aeabi_dmul>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	4630      	mov	r0, r6
 8011cee:	4639      	mov	r1, r7
 8011cf0:	f7f4 fb42 	bl	8006378 <__adddf3>
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460f      	mov	r7, r1
 8011cf8:	f7f4 ffa4 	bl	8006c44 <__aeabi_d2iz>
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	4683      	mov	fp, r0
 8011d00:	2300      	movs	r3, #0
 8011d02:	4630      	mov	r0, r6
 8011d04:	4639      	mov	r1, r7
 8011d06:	f7f4 ff5f 	bl	8006bc8 <__aeabi_dcmplt>
 8011d0a:	b148      	cbz	r0, 8011d20 <_dtoa_r+0x190>
 8011d0c:	4658      	mov	r0, fp
 8011d0e:	f7f4 fc7f 	bl	8006610 <__aeabi_i2d>
 8011d12:	4632      	mov	r2, r6
 8011d14:	463b      	mov	r3, r7
 8011d16:	f7f4 ff4d 	bl	8006bb4 <__aeabi_dcmpeq>
 8011d1a:	b908      	cbnz	r0, 8011d20 <_dtoa_r+0x190>
 8011d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d20:	f1bb 0f16 	cmp.w	fp, #22
 8011d24:	d857      	bhi.n	8011dd6 <_dtoa_r+0x246>
 8011d26:	4b5b      	ldr	r3, [pc, #364]	; (8011e94 <_dtoa_r+0x304>)
 8011d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d30:	ec51 0b18 	vmov	r0, r1, d8
 8011d34:	f7f4 ff48 	bl	8006bc8 <__aeabi_dcmplt>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d04e      	beq.n	8011dda <_dtoa_r+0x24a>
 8011d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d40:	2300      	movs	r3, #0
 8011d42:	930c      	str	r3, [sp, #48]	; 0x30
 8011d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d46:	1b5b      	subs	r3, r3, r5
 8011d48:	1e5a      	subs	r2, r3, #1
 8011d4a:	bf45      	ittet	mi
 8011d4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8011d50:	9305      	strmi	r3, [sp, #20]
 8011d52:	2300      	movpl	r3, #0
 8011d54:	2300      	movmi	r3, #0
 8011d56:	9206      	str	r2, [sp, #24]
 8011d58:	bf54      	ite	pl
 8011d5a:	9305      	strpl	r3, [sp, #20]
 8011d5c:	9306      	strmi	r3, [sp, #24]
 8011d5e:	f1bb 0f00 	cmp.w	fp, #0
 8011d62:	db3c      	blt.n	8011dde <_dtoa_r+0x24e>
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011d6a:	445b      	add	r3, fp
 8011d6c:	9306      	str	r3, [sp, #24]
 8011d6e:	2300      	movs	r3, #0
 8011d70:	9308      	str	r3, [sp, #32]
 8011d72:	9b07      	ldr	r3, [sp, #28]
 8011d74:	2b09      	cmp	r3, #9
 8011d76:	d868      	bhi.n	8011e4a <_dtoa_r+0x2ba>
 8011d78:	2b05      	cmp	r3, #5
 8011d7a:	bfc4      	itt	gt
 8011d7c:	3b04      	subgt	r3, #4
 8011d7e:	9307      	strgt	r3, [sp, #28]
 8011d80:	9b07      	ldr	r3, [sp, #28]
 8011d82:	f1a3 0302 	sub.w	r3, r3, #2
 8011d86:	bfcc      	ite	gt
 8011d88:	2500      	movgt	r5, #0
 8011d8a:	2501      	movle	r5, #1
 8011d8c:	2b03      	cmp	r3, #3
 8011d8e:	f200 8085 	bhi.w	8011e9c <_dtoa_r+0x30c>
 8011d92:	e8df f003 	tbb	[pc, r3]
 8011d96:	3b2e      	.short	0x3b2e
 8011d98:	5839      	.short	0x5839
 8011d9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011d9e:	441d      	add	r5, r3
 8011da0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011da4:	2b20      	cmp	r3, #32
 8011da6:	bfc1      	itttt	gt
 8011da8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8011db0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011db4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011db8:	bfd6      	itet	le
 8011dba:	f1c3 0320 	rsble	r3, r3, #32
 8011dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8011dc2:	fa06 f003 	lslle.w	r0, r6, r3
 8011dc6:	f7f4 fc13 	bl	80065f0 <__aeabi_ui2d>
 8011dca:	2201      	movs	r2, #1
 8011dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011dd0:	3d01      	subs	r5, #1
 8011dd2:	920e      	str	r2, [sp, #56]	; 0x38
 8011dd4:	e76f      	b.n	8011cb6 <_dtoa_r+0x126>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e7b3      	b.n	8011d42 <_dtoa_r+0x1b2>
 8011dda:	900c      	str	r0, [sp, #48]	; 0x30
 8011ddc:	e7b2      	b.n	8011d44 <_dtoa_r+0x1b4>
 8011dde:	9b05      	ldr	r3, [sp, #20]
 8011de0:	eba3 030b 	sub.w	r3, r3, fp
 8011de4:	9305      	str	r3, [sp, #20]
 8011de6:	f1cb 0300 	rsb	r3, fp, #0
 8011dea:	9308      	str	r3, [sp, #32]
 8011dec:	2300      	movs	r3, #0
 8011dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8011df0:	e7bf      	b.n	8011d72 <_dtoa_r+0x1e2>
 8011df2:	2300      	movs	r3, #0
 8011df4:	9309      	str	r3, [sp, #36]	; 0x24
 8011df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	dc52      	bgt.n	8011ea2 <_dtoa_r+0x312>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	9301      	str	r3, [sp, #4]
 8011e00:	9304      	str	r3, [sp, #16]
 8011e02:	461a      	mov	r2, r3
 8011e04:	920a      	str	r2, [sp, #40]	; 0x28
 8011e06:	e00b      	b.n	8011e20 <_dtoa_r+0x290>
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e7f3      	b.n	8011df4 <_dtoa_r+0x264>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e12:	445b      	add	r3, fp
 8011e14:	9301      	str	r3, [sp, #4]
 8011e16:	3301      	adds	r3, #1
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	9304      	str	r3, [sp, #16]
 8011e1c:	bfb8      	it	lt
 8011e1e:	2301      	movlt	r3, #1
 8011e20:	69e0      	ldr	r0, [r4, #28]
 8011e22:	2100      	movs	r1, #0
 8011e24:	2204      	movs	r2, #4
 8011e26:	f102 0614 	add.w	r6, r2, #20
 8011e2a:	429e      	cmp	r6, r3
 8011e2c:	d93d      	bls.n	8011eaa <_dtoa_r+0x31a>
 8011e2e:	6041      	str	r1, [r0, #4]
 8011e30:	4620      	mov	r0, r4
 8011e32:	f000 fd9f 	bl	8012974 <_Balloc>
 8011e36:	9000      	str	r0, [sp, #0]
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	d139      	bne.n	8011eb0 <_dtoa_r+0x320>
 8011e3c:	4b16      	ldr	r3, [pc, #88]	; (8011e98 <_dtoa_r+0x308>)
 8011e3e:	4602      	mov	r2, r0
 8011e40:	f240 11af 	movw	r1, #431	; 0x1af
 8011e44:	e6bd      	b.n	8011bc2 <_dtoa_r+0x32>
 8011e46:	2301      	movs	r3, #1
 8011e48:	e7e1      	b.n	8011e0e <_dtoa_r+0x27e>
 8011e4a:	2501      	movs	r5, #1
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	9307      	str	r3, [sp, #28]
 8011e50:	9509      	str	r5, [sp, #36]	; 0x24
 8011e52:	f04f 33ff 	mov.w	r3, #4294967295
 8011e56:	9301      	str	r3, [sp, #4]
 8011e58:	9304      	str	r3, [sp, #16]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2312      	movs	r3, #18
 8011e5e:	e7d1      	b.n	8011e04 <_dtoa_r+0x274>
 8011e60:	636f4361 	.word	0x636f4361
 8011e64:	3fd287a7 	.word	0x3fd287a7
 8011e68:	8b60c8b3 	.word	0x8b60c8b3
 8011e6c:	3fc68a28 	.word	0x3fc68a28
 8011e70:	509f79fb 	.word	0x509f79fb
 8011e74:	3fd34413 	.word	0x3fd34413
 8011e78:	0814f63a 	.word	0x0814f63a
 8011e7c:	0814f651 	.word	0x0814f651
 8011e80:	7ff00000 	.word	0x7ff00000
 8011e84:	0814f636 	.word	0x0814f636
 8011e88:	0814f62d 	.word	0x0814f62d
 8011e8c:	0814f605 	.word	0x0814f605
 8011e90:	3ff80000 	.word	0x3ff80000
 8011e94:	0814f740 	.word	0x0814f740
 8011e98:	0814f6a9 	.word	0x0814f6a9
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea0:	e7d7      	b.n	8011e52 <_dtoa_r+0x2c2>
 8011ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ea4:	9301      	str	r3, [sp, #4]
 8011ea6:	9304      	str	r3, [sp, #16]
 8011ea8:	e7ba      	b.n	8011e20 <_dtoa_r+0x290>
 8011eaa:	3101      	adds	r1, #1
 8011eac:	0052      	lsls	r2, r2, #1
 8011eae:	e7ba      	b.n	8011e26 <_dtoa_r+0x296>
 8011eb0:	69e3      	ldr	r3, [r4, #28]
 8011eb2:	9a00      	ldr	r2, [sp, #0]
 8011eb4:	601a      	str	r2, [r3, #0]
 8011eb6:	9b04      	ldr	r3, [sp, #16]
 8011eb8:	2b0e      	cmp	r3, #14
 8011eba:	f200 80a8 	bhi.w	801200e <_dtoa_r+0x47e>
 8011ebe:	2d00      	cmp	r5, #0
 8011ec0:	f000 80a5 	beq.w	801200e <_dtoa_r+0x47e>
 8011ec4:	f1bb 0f00 	cmp.w	fp, #0
 8011ec8:	dd38      	ble.n	8011f3c <_dtoa_r+0x3ac>
 8011eca:	4bc0      	ldr	r3, [pc, #768]	; (80121cc <_dtoa_r+0x63c>)
 8011ecc:	f00b 020f 	and.w	r2, fp, #15
 8011ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ed4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011ed8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011edc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011ee0:	d019      	beq.n	8011f16 <_dtoa_r+0x386>
 8011ee2:	4bbb      	ldr	r3, [pc, #748]	; (80121d0 <_dtoa_r+0x640>)
 8011ee4:	ec51 0b18 	vmov	r0, r1, d8
 8011ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011eec:	f7f4 fd24 	bl	8006938 <__aeabi_ddiv>
 8011ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ef4:	f008 080f 	and.w	r8, r8, #15
 8011ef8:	2503      	movs	r5, #3
 8011efa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80121d0 <_dtoa_r+0x640>
 8011efe:	f1b8 0f00 	cmp.w	r8, #0
 8011f02:	d10a      	bne.n	8011f1a <_dtoa_r+0x38a>
 8011f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f08:	4632      	mov	r2, r6
 8011f0a:	463b      	mov	r3, r7
 8011f0c:	f7f4 fd14 	bl	8006938 <__aeabi_ddiv>
 8011f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f14:	e02b      	b.n	8011f6e <_dtoa_r+0x3de>
 8011f16:	2502      	movs	r5, #2
 8011f18:	e7ef      	b.n	8011efa <_dtoa_r+0x36a>
 8011f1a:	f018 0f01 	tst.w	r8, #1
 8011f1e:	d008      	beq.n	8011f32 <_dtoa_r+0x3a2>
 8011f20:	4630      	mov	r0, r6
 8011f22:	4639      	mov	r1, r7
 8011f24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011f28:	f7f4 fbdc 	bl	80066e4 <__aeabi_dmul>
 8011f2c:	3501      	adds	r5, #1
 8011f2e:	4606      	mov	r6, r0
 8011f30:	460f      	mov	r7, r1
 8011f32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f36:	f109 0908 	add.w	r9, r9, #8
 8011f3a:	e7e0      	b.n	8011efe <_dtoa_r+0x36e>
 8011f3c:	f000 809f 	beq.w	801207e <_dtoa_r+0x4ee>
 8011f40:	f1cb 0600 	rsb	r6, fp, #0
 8011f44:	4ba1      	ldr	r3, [pc, #644]	; (80121cc <_dtoa_r+0x63c>)
 8011f46:	4fa2      	ldr	r7, [pc, #648]	; (80121d0 <_dtoa_r+0x640>)
 8011f48:	f006 020f 	and.w	r2, r6, #15
 8011f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	ec51 0b18 	vmov	r0, r1, d8
 8011f58:	f7f4 fbc4 	bl	80066e4 <__aeabi_dmul>
 8011f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f60:	1136      	asrs	r6, r6, #4
 8011f62:	2300      	movs	r3, #0
 8011f64:	2502      	movs	r5, #2
 8011f66:	2e00      	cmp	r6, #0
 8011f68:	d17e      	bne.n	8012068 <_dtoa_r+0x4d8>
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1d0      	bne.n	8011f10 <_dtoa_r+0x380>
 8011f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f000 8084 	beq.w	8012082 <_dtoa_r+0x4f2>
 8011f7a:	4b96      	ldr	r3, [pc, #600]	; (80121d4 <_dtoa_r+0x644>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	4640      	mov	r0, r8
 8011f80:	4649      	mov	r1, r9
 8011f82:	f7f4 fe21 	bl	8006bc8 <__aeabi_dcmplt>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d07b      	beq.n	8012082 <_dtoa_r+0x4f2>
 8011f8a:	9b04      	ldr	r3, [sp, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d078      	beq.n	8012082 <_dtoa_r+0x4f2>
 8011f90:	9b01      	ldr	r3, [sp, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	dd39      	ble.n	801200a <_dtoa_r+0x47a>
 8011f96:	4b90      	ldr	r3, [pc, #576]	; (80121d8 <_dtoa_r+0x648>)
 8011f98:	2200      	movs	r2, #0
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	4649      	mov	r1, r9
 8011f9e:	f7f4 fba1 	bl	80066e4 <__aeabi_dmul>
 8011fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fa6:	9e01      	ldr	r6, [sp, #4]
 8011fa8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011fac:	3501      	adds	r5, #1
 8011fae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fb2:	4628      	mov	r0, r5
 8011fb4:	f7f4 fb2c 	bl	8006610 <__aeabi_i2d>
 8011fb8:	4642      	mov	r2, r8
 8011fba:	464b      	mov	r3, r9
 8011fbc:	f7f4 fb92 	bl	80066e4 <__aeabi_dmul>
 8011fc0:	4b86      	ldr	r3, [pc, #536]	; (80121dc <_dtoa_r+0x64c>)
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f7f4 f9d8 	bl	8006378 <__adddf3>
 8011fc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fd0:	9303      	str	r3, [sp, #12]
 8011fd2:	2e00      	cmp	r6, #0
 8011fd4:	d158      	bne.n	8012088 <_dtoa_r+0x4f8>
 8011fd6:	4b82      	ldr	r3, [pc, #520]	; (80121e0 <_dtoa_r+0x650>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	4640      	mov	r0, r8
 8011fdc:	4649      	mov	r1, r9
 8011fde:	f7f4 f9c9 	bl	8006374 <__aeabi_dsub>
 8011fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011fe6:	4680      	mov	r8, r0
 8011fe8:	4689      	mov	r9, r1
 8011fea:	f7f4 fe0b 	bl	8006c04 <__aeabi_dcmpgt>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f040 8296 	bne.w	8012520 <_dtoa_r+0x990>
 8011ff4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ffe:	4649      	mov	r1, r9
 8012000:	f7f4 fde2 	bl	8006bc8 <__aeabi_dcmplt>
 8012004:	2800      	cmp	r0, #0
 8012006:	f040 8289 	bne.w	801251c <_dtoa_r+0x98c>
 801200a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801200e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012010:	2b00      	cmp	r3, #0
 8012012:	f2c0 814e 	blt.w	80122b2 <_dtoa_r+0x722>
 8012016:	f1bb 0f0e 	cmp.w	fp, #14
 801201a:	f300 814a 	bgt.w	80122b2 <_dtoa_r+0x722>
 801201e:	4b6b      	ldr	r3, [pc, #428]	; (80121cc <_dtoa_r+0x63c>)
 8012020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801202a:	2b00      	cmp	r3, #0
 801202c:	f280 80dc 	bge.w	80121e8 <_dtoa_r+0x658>
 8012030:	9b04      	ldr	r3, [sp, #16]
 8012032:	2b00      	cmp	r3, #0
 8012034:	f300 80d8 	bgt.w	80121e8 <_dtoa_r+0x658>
 8012038:	f040 826f 	bne.w	801251a <_dtoa_r+0x98a>
 801203c:	4b68      	ldr	r3, [pc, #416]	; (80121e0 <_dtoa_r+0x650>)
 801203e:	2200      	movs	r2, #0
 8012040:	4640      	mov	r0, r8
 8012042:	4649      	mov	r1, r9
 8012044:	f7f4 fb4e 	bl	80066e4 <__aeabi_dmul>
 8012048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801204c:	f7f4 fdd0 	bl	8006bf0 <__aeabi_dcmpge>
 8012050:	9e04      	ldr	r6, [sp, #16]
 8012052:	4637      	mov	r7, r6
 8012054:	2800      	cmp	r0, #0
 8012056:	f040 8245 	bne.w	80124e4 <_dtoa_r+0x954>
 801205a:	9d00      	ldr	r5, [sp, #0]
 801205c:	2331      	movs	r3, #49	; 0x31
 801205e:	f805 3b01 	strb.w	r3, [r5], #1
 8012062:	f10b 0b01 	add.w	fp, fp, #1
 8012066:	e241      	b.n	80124ec <_dtoa_r+0x95c>
 8012068:	07f2      	lsls	r2, r6, #31
 801206a:	d505      	bpl.n	8012078 <_dtoa_r+0x4e8>
 801206c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012070:	f7f4 fb38 	bl	80066e4 <__aeabi_dmul>
 8012074:	3501      	adds	r5, #1
 8012076:	2301      	movs	r3, #1
 8012078:	1076      	asrs	r6, r6, #1
 801207a:	3708      	adds	r7, #8
 801207c:	e773      	b.n	8011f66 <_dtoa_r+0x3d6>
 801207e:	2502      	movs	r5, #2
 8012080:	e775      	b.n	8011f6e <_dtoa_r+0x3de>
 8012082:	9e04      	ldr	r6, [sp, #16]
 8012084:	465f      	mov	r7, fp
 8012086:	e792      	b.n	8011fae <_dtoa_r+0x41e>
 8012088:	9900      	ldr	r1, [sp, #0]
 801208a:	4b50      	ldr	r3, [pc, #320]	; (80121cc <_dtoa_r+0x63c>)
 801208c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012090:	4431      	add	r1, r6
 8012092:	9102      	str	r1, [sp, #8]
 8012094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012096:	eeb0 9a47 	vmov.f32	s18, s14
 801209a:	eef0 9a67 	vmov.f32	s19, s15
 801209e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80120a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80120a6:	2900      	cmp	r1, #0
 80120a8:	d044      	beq.n	8012134 <_dtoa_r+0x5a4>
 80120aa:	494e      	ldr	r1, [pc, #312]	; (80121e4 <_dtoa_r+0x654>)
 80120ac:	2000      	movs	r0, #0
 80120ae:	f7f4 fc43 	bl	8006938 <__aeabi_ddiv>
 80120b2:	ec53 2b19 	vmov	r2, r3, d9
 80120b6:	f7f4 f95d 	bl	8006374 <__aeabi_dsub>
 80120ba:	9d00      	ldr	r5, [sp, #0]
 80120bc:	ec41 0b19 	vmov	d9, r0, r1
 80120c0:	4649      	mov	r1, r9
 80120c2:	4640      	mov	r0, r8
 80120c4:	f7f4 fdbe 	bl	8006c44 <__aeabi_d2iz>
 80120c8:	4606      	mov	r6, r0
 80120ca:	f7f4 faa1 	bl	8006610 <__aeabi_i2d>
 80120ce:	4602      	mov	r2, r0
 80120d0:	460b      	mov	r3, r1
 80120d2:	4640      	mov	r0, r8
 80120d4:	4649      	mov	r1, r9
 80120d6:	f7f4 f94d 	bl	8006374 <__aeabi_dsub>
 80120da:	3630      	adds	r6, #48	; 0x30
 80120dc:	f805 6b01 	strb.w	r6, [r5], #1
 80120e0:	ec53 2b19 	vmov	r2, r3, d9
 80120e4:	4680      	mov	r8, r0
 80120e6:	4689      	mov	r9, r1
 80120e8:	f7f4 fd6e 	bl	8006bc8 <__aeabi_dcmplt>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d164      	bne.n	80121ba <_dtoa_r+0x62a>
 80120f0:	4642      	mov	r2, r8
 80120f2:	464b      	mov	r3, r9
 80120f4:	4937      	ldr	r1, [pc, #220]	; (80121d4 <_dtoa_r+0x644>)
 80120f6:	2000      	movs	r0, #0
 80120f8:	f7f4 f93c 	bl	8006374 <__aeabi_dsub>
 80120fc:	ec53 2b19 	vmov	r2, r3, d9
 8012100:	f7f4 fd62 	bl	8006bc8 <__aeabi_dcmplt>
 8012104:	2800      	cmp	r0, #0
 8012106:	f040 80b6 	bne.w	8012276 <_dtoa_r+0x6e6>
 801210a:	9b02      	ldr	r3, [sp, #8]
 801210c:	429d      	cmp	r5, r3
 801210e:	f43f af7c 	beq.w	801200a <_dtoa_r+0x47a>
 8012112:	4b31      	ldr	r3, [pc, #196]	; (80121d8 <_dtoa_r+0x648>)
 8012114:	ec51 0b19 	vmov	r0, r1, d9
 8012118:	2200      	movs	r2, #0
 801211a:	f7f4 fae3 	bl	80066e4 <__aeabi_dmul>
 801211e:	4b2e      	ldr	r3, [pc, #184]	; (80121d8 <_dtoa_r+0x648>)
 8012120:	ec41 0b19 	vmov	d9, r0, r1
 8012124:	2200      	movs	r2, #0
 8012126:	4640      	mov	r0, r8
 8012128:	4649      	mov	r1, r9
 801212a:	f7f4 fadb 	bl	80066e4 <__aeabi_dmul>
 801212e:	4680      	mov	r8, r0
 8012130:	4689      	mov	r9, r1
 8012132:	e7c5      	b.n	80120c0 <_dtoa_r+0x530>
 8012134:	ec51 0b17 	vmov	r0, r1, d7
 8012138:	f7f4 fad4 	bl	80066e4 <__aeabi_dmul>
 801213c:	9b02      	ldr	r3, [sp, #8]
 801213e:	9d00      	ldr	r5, [sp, #0]
 8012140:	930f      	str	r3, [sp, #60]	; 0x3c
 8012142:	ec41 0b19 	vmov	d9, r0, r1
 8012146:	4649      	mov	r1, r9
 8012148:	4640      	mov	r0, r8
 801214a:	f7f4 fd7b 	bl	8006c44 <__aeabi_d2iz>
 801214e:	4606      	mov	r6, r0
 8012150:	f7f4 fa5e 	bl	8006610 <__aeabi_i2d>
 8012154:	3630      	adds	r6, #48	; 0x30
 8012156:	4602      	mov	r2, r0
 8012158:	460b      	mov	r3, r1
 801215a:	4640      	mov	r0, r8
 801215c:	4649      	mov	r1, r9
 801215e:	f7f4 f909 	bl	8006374 <__aeabi_dsub>
 8012162:	f805 6b01 	strb.w	r6, [r5], #1
 8012166:	9b02      	ldr	r3, [sp, #8]
 8012168:	429d      	cmp	r5, r3
 801216a:	4680      	mov	r8, r0
 801216c:	4689      	mov	r9, r1
 801216e:	f04f 0200 	mov.w	r2, #0
 8012172:	d124      	bne.n	80121be <_dtoa_r+0x62e>
 8012174:	4b1b      	ldr	r3, [pc, #108]	; (80121e4 <_dtoa_r+0x654>)
 8012176:	ec51 0b19 	vmov	r0, r1, d9
 801217a:	f7f4 f8fd 	bl	8006378 <__adddf3>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	4640      	mov	r0, r8
 8012184:	4649      	mov	r1, r9
 8012186:	f7f4 fd3d 	bl	8006c04 <__aeabi_dcmpgt>
 801218a:	2800      	cmp	r0, #0
 801218c:	d173      	bne.n	8012276 <_dtoa_r+0x6e6>
 801218e:	ec53 2b19 	vmov	r2, r3, d9
 8012192:	4914      	ldr	r1, [pc, #80]	; (80121e4 <_dtoa_r+0x654>)
 8012194:	2000      	movs	r0, #0
 8012196:	f7f4 f8ed 	bl	8006374 <__aeabi_dsub>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	4640      	mov	r0, r8
 80121a0:	4649      	mov	r1, r9
 80121a2:	f7f4 fd11 	bl	8006bc8 <__aeabi_dcmplt>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	f43f af2f 	beq.w	801200a <_dtoa_r+0x47a>
 80121ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80121ae:	1e6b      	subs	r3, r5, #1
 80121b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80121b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80121b6:	2b30      	cmp	r3, #48	; 0x30
 80121b8:	d0f8      	beq.n	80121ac <_dtoa_r+0x61c>
 80121ba:	46bb      	mov	fp, r7
 80121bc:	e04a      	b.n	8012254 <_dtoa_r+0x6c4>
 80121be:	4b06      	ldr	r3, [pc, #24]	; (80121d8 <_dtoa_r+0x648>)
 80121c0:	f7f4 fa90 	bl	80066e4 <__aeabi_dmul>
 80121c4:	4680      	mov	r8, r0
 80121c6:	4689      	mov	r9, r1
 80121c8:	e7bd      	b.n	8012146 <_dtoa_r+0x5b6>
 80121ca:	bf00      	nop
 80121cc:	0814f740 	.word	0x0814f740
 80121d0:	0814f718 	.word	0x0814f718
 80121d4:	3ff00000 	.word	0x3ff00000
 80121d8:	40240000 	.word	0x40240000
 80121dc:	401c0000 	.word	0x401c0000
 80121e0:	40140000 	.word	0x40140000
 80121e4:	3fe00000 	.word	0x3fe00000
 80121e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80121ec:	9d00      	ldr	r5, [sp, #0]
 80121ee:	4642      	mov	r2, r8
 80121f0:	464b      	mov	r3, r9
 80121f2:	4630      	mov	r0, r6
 80121f4:	4639      	mov	r1, r7
 80121f6:	f7f4 fb9f 	bl	8006938 <__aeabi_ddiv>
 80121fa:	f7f4 fd23 	bl	8006c44 <__aeabi_d2iz>
 80121fe:	9001      	str	r0, [sp, #4]
 8012200:	f7f4 fa06 	bl	8006610 <__aeabi_i2d>
 8012204:	4642      	mov	r2, r8
 8012206:	464b      	mov	r3, r9
 8012208:	f7f4 fa6c 	bl	80066e4 <__aeabi_dmul>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	f7f4 f8ae 	bl	8006374 <__aeabi_dsub>
 8012218:	9e01      	ldr	r6, [sp, #4]
 801221a:	9f04      	ldr	r7, [sp, #16]
 801221c:	3630      	adds	r6, #48	; 0x30
 801221e:	f805 6b01 	strb.w	r6, [r5], #1
 8012222:	9e00      	ldr	r6, [sp, #0]
 8012224:	1bae      	subs	r6, r5, r6
 8012226:	42b7      	cmp	r7, r6
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	d134      	bne.n	8012298 <_dtoa_r+0x708>
 801222e:	f7f4 f8a3 	bl	8006378 <__adddf3>
 8012232:	4642      	mov	r2, r8
 8012234:	464b      	mov	r3, r9
 8012236:	4606      	mov	r6, r0
 8012238:	460f      	mov	r7, r1
 801223a:	f7f4 fce3 	bl	8006c04 <__aeabi_dcmpgt>
 801223e:	b9c8      	cbnz	r0, 8012274 <_dtoa_r+0x6e4>
 8012240:	4642      	mov	r2, r8
 8012242:	464b      	mov	r3, r9
 8012244:	4630      	mov	r0, r6
 8012246:	4639      	mov	r1, r7
 8012248:	f7f4 fcb4 	bl	8006bb4 <__aeabi_dcmpeq>
 801224c:	b110      	cbz	r0, 8012254 <_dtoa_r+0x6c4>
 801224e:	9b01      	ldr	r3, [sp, #4]
 8012250:	07db      	lsls	r3, r3, #31
 8012252:	d40f      	bmi.n	8012274 <_dtoa_r+0x6e4>
 8012254:	4651      	mov	r1, sl
 8012256:	4620      	mov	r0, r4
 8012258:	f000 fbcc 	bl	80129f4 <_Bfree>
 801225c:	2300      	movs	r3, #0
 801225e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012260:	702b      	strb	r3, [r5, #0]
 8012262:	f10b 0301 	add.w	r3, fp, #1
 8012266:	6013      	str	r3, [r2, #0]
 8012268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801226a:	2b00      	cmp	r3, #0
 801226c:	f43f ace2 	beq.w	8011c34 <_dtoa_r+0xa4>
 8012270:	601d      	str	r5, [r3, #0]
 8012272:	e4df      	b.n	8011c34 <_dtoa_r+0xa4>
 8012274:	465f      	mov	r7, fp
 8012276:	462b      	mov	r3, r5
 8012278:	461d      	mov	r5, r3
 801227a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801227e:	2a39      	cmp	r2, #57	; 0x39
 8012280:	d106      	bne.n	8012290 <_dtoa_r+0x700>
 8012282:	9a00      	ldr	r2, [sp, #0]
 8012284:	429a      	cmp	r2, r3
 8012286:	d1f7      	bne.n	8012278 <_dtoa_r+0x6e8>
 8012288:	9900      	ldr	r1, [sp, #0]
 801228a:	2230      	movs	r2, #48	; 0x30
 801228c:	3701      	adds	r7, #1
 801228e:	700a      	strb	r2, [r1, #0]
 8012290:	781a      	ldrb	r2, [r3, #0]
 8012292:	3201      	adds	r2, #1
 8012294:	701a      	strb	r2, [r3, #0]
 8012296:	e790      	b.n	80121ba <_dtoa_r+0x62a>
 8012298:	4ba3      	ldr	r3, [pc, #652]	; (8012528 <_dtoa_r+0x998>)
 801229a:	2200      	movs	r2, #0
 801229c:	f7f4 fa22 	bl	80066e4 <__aeabi_dmul>
 80122a0:	2200      	movs	r2, #0
 80122a2:	2300      	movs	r3, #0
 80122a4:	4606      	mov	r6, r0
 80122a6:	460f      	mov	r7, r1
 80122a8:	f7f4 fc84 	bl	8006bb4 <__aeabi_dcmpeq>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d09e      	beq.n	80121ee <_dtoa_r+0x65e>
 80122b0:	e7d0      	b.n	8012254 <_dtoa_r+0x6c4>
 80122b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122b4:	2a00      	cmp	r2, #0
 80122b6:	f000 80ca 	beq.w	801244e <_dtoa_r+0x8be>
 80122ba:	9a07      	ldr	r2, [sp, #28]
 80122bc:	2a01      	cmp	r2, #1
 80122be:	f300 80ad 	bgt.w	801241c <_dtoa_r+0x88c>
 80122c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122c4:	2a00      	cmp	r2, #0
 80122c6:	f000 80a5 	beq.w	8012414 <_dtoa_r+0x884>
 80122ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80122ce:	9e08      	ldr	r6, [sp, #32]
 80122d0:	9d05      	ldr	r5, [sp, #20]
 80122d2:	9a05      	ldr	r2, [sp, #20]
 80122d4:	441a      	add	r2, r3
 80122d6:	9205      	str	r2, [sp, #20]
 80122d8:	9a06      	ldr	r2, [sp, #24]
 80122da:	2101      	movs	r1, #1
 80122dc:	441a      	add	r2, r3
 80122de:	4620      	mov	r0, r4
 80122e0:	9206      	str	r2, [sp, #24]
 80122e2:	f000 fc87 	bl	8012bf4 <__i2b>
 80122e6:	4607      	mov	r7, r0
 80122e8:	b165      	cbz	r5, 8012304 <_dtoa_r+0x774>
 80122ea:	9b06      	ldr	r3, [sp, #24]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	dd09      	ble.n	8012304 <_dtoa_r+0x774>
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	9a05      	ldr	r2, [sp, #20]
 80122f4:	bfa8      	it	ge
 80122f6:	462b      	movge	r3, r5
 80122f8:	1ad2      	subs	r2, r2, r3
 80122fa:	9205      	str	r2, [sp, #20]
 80122fc:	9a06      	ldr	r2, [sp, #24]
 80122fe:	1aed      	subs	r5, r5, r3
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	9306      	str	r3, [sp, #24]
 8012304:	9b08      	ldr	r3, [sp, #32]
 8012306:	b1f3      	cbz	r3, 8012346 <_dtoa_r+0x7b6>
 8012308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801230a:	2b00      	cmp	r3, #0
 801230c:	f000 80a3 	beq.w	8012456 <_dtoa_r+0x8c6>
 8012310:	2e00      	cmp	r6, #0
 8012312:	dd10      	ble.n	8012336 <_dtoa_r+0x7a6>
 8012314:	4639      	mov	r1, r7
 8012316:	4632      	mov	r2, r6
 8012318:	4620      	mov	r0, r4
 801231a:	f000 fd2b 	bl	8012d74 <__pow5mult>
 801231e:	4652      	mov	r2, sl
 8012320:	4601      	mov	r1, r0
 8012322:	4607      	mov	r7, r0
 8012324:	4620      	mov	r0, r4
 8012326:	f000 fc7b 	bl	8012c20 <__multiply>
 801232a:	4651      	mov	r1, sl
 801232c:	4680      	mov	r8, r0
 801232e:	4620      	mov	r0, r4
 8012330:	f000 fb60 	bl	80129f4 <_Bfree>
 8012334:	46c2      	mov	sl, r8
 8012336:	9b08      	ldr	r3, [sp, #32]
 8012338:	1b9a      	subs	r2, r3, r6
 801233a:	d004      	beq.n	8012346 <_dtoa_r+0x7b6>
 801233c:	4651      	mov	r1, sl
 801233e:	4620      	mov	r0, r4
 8012340:	f000 fd18 	bl	8012d74 <__pow5mult>
 8012344:	4682      	mov	sl, r0
 8012346:	2101      	movs	r1, #1
 8012348:	4620      	mov	r0, r4
 801234a:	f000 fc53 	bl	8012bf4 <__i2b>
 801234e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012350:	2b00      	cmp	r3, #0
 8012352:	4606      	mov	r6, r0
 8012354:	f340 8081 	ble.w	801245a <_dtoa_r+0x8ca>
 8012358:	461a      	mov	r2, r3
 801235a:	4601      	mov	r1, r0
 801235c:	4620      	mov	r0, r4
 801235e:	f000 fd09 	bl	8012d74 <__pow5mult>
 8012362:	9b07      	ldr	r3, [sp, #28]
 8012364:	2b01      	cmp	r3, #1
 8012366:	4606      	mov	r6, r0
 8012368:	dd7a      	ble.n	8012460 <_dtoa_r+0x8d0>
 801236a:	f04f 0800 	mov.w	r8, #0
 801236e:	6933      	ldr	r3, [r6, #16]
 8012370:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012374:	6918      	ldr	r0, [r3, #16]
 8012376:	f000 fbef 	bl	8012b58 <__hi0bits>
 801237a:	f1c0 0020 	rsb	r0, r0, #32
 801237e:	9b06      	ldr	r3, [sp, #24]
 8012380:	4418      	add	r0, r3
 8012382:	f010 001f 	ands.w	r0, r0, #31
 8012386:	f000 8094 	beq.w	80124b2 <_dtoa_r+0x922>
 801238a:	f1c0 0320 	rsb	r3, r0, #32
 801238e:	2b04      	cmp	r3, #4
 8012390:	f340 8085 	ble.w	801249e <_dtoa_r+0x90e>
 8012394:	9b05      	ldr	r3, [sp, #20]
 8012396:	f1c0 001c 	rsb	r0, r0, #28
 801239a:	4403      	add	r3, r0
 801239c:	9305      	str	r3, [sp, #20]
 801239e:	9b06      	ldr	r3, [sp, #24]
 80123a0:	4403      	add	r3, r0
 80123a2:	4405      	add	r5, r0
 80123a4:	9306      	str	r3, [sp, #24]
 80123a6:	9b05      	ldr	r3, [sp, #20]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	dd05      	ble.n	80123b8 <_dtoa_r+0x828>
 80123ac:	4651      	mov	r1, sl
 80123ae:	461a      	mov	r2, r3
 80123b0:	4620      	mov	r0, r4
 80123b2:	f000 fd39 	bl	8012e28 <__lshift>
 80123b6:	4682      	mov	sl, r0
 80123b8:	9b06      	ldr	r3, [sp, #24]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	dd05      	ble.n	80123ca <_dtoa_r+0x83a>
 80123be:	4631      	mov	r1, r6
 80123c0:	461a      	mov	r2, r3
 80123c2:	4620      	mov	r0, r4
 80123c4:	f000 fd30 	bl	8012e28 <__lshift>
 80123c8:	4606      	mov	r6, r0
 80123ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d072      	beq.n	80124b6 <_dtoa_r+0x926>
 80123d0:	4631      	mov	r1, r6
 80123d2:	4650      	mov	r0, sl
 80123d4:	f000 fd94 	bl	8012f00 <__mcmp>
 80123d8:	2800      	cmp	r0, #0
 80123da:	da6c      	bge.n	80124b6 <_dtoa_r+0x926>
 80123dc:	2300      	movs	r3, #0
 80123de:	4651      	mov	r1, sl
 80123e0:	220a      	movs	r2, #10
 80123e2:	4620      	mov	r0, r4
 80123e4:	f000 fb28 	bl	8012a38 <__multadd>
 80123e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123ee:	4682      	mov	sl, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f000 81b0 	beq.w	8012756 <_dtoa_r+0xbc6>
 80123f6:	2300      	movs	r3, #0
 80123f8:	4639      	mov	r1, r7
 80123fa:	220a      	movs	r2, #10
 80123fc:	4620      	mov	r0, r4
 80123fe:	f000 fb1b 	bl	8012a38 <__multadd>
 8012402:	9b01      	ldr	r3, [sp, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	4607      	mov	r7, r0
 8012408:	f300 8096 	bgt.w	8012538 <_dtoa_r+0x9a8>
 801240c:	9b07      	ldr	r3, [sp, #28]
 801240e:	2b02      	cmp	r3, #2
 8012410:	dc59      	bgt.n	80124c6 <_dtoa_r+0x936>
 8012412:	e091      	b.n	8012538 <_dtoa_r+0x9a8>
 8012414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801241a:	e758      	b.n	80122ce <_dtoa_r+0x73e>
 801241c:	9b04      	ldr	r3, [sp, #16]
 801241e:	1e5e      	subs	r6, r3, #1
 8012420:	9b08      	ldr	r3, [sp, #32]
 8012422:	42b3      	cmp	r3, r6
 8012424:	bfbf      	itttt	lt
 8012426:	9b08      	ldrlt	r3, [sp, #32]
 8012428:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801242a:	9608      	strlt	r6, [sp, #32]
 801242c:	1af3      	sublt	r3, r6, r3
 801242e:	bfb4      	ite	lt
 8012430:	18d2      	addlt	r2, r2, r3
 8012432:	1b9e      	subge	r6, r3, r6
 8012434:	9b04      	ldr	r3, [sp, #16]
 8012436:	bfbc      	itt	lt
 8012438:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801243a:	2600      	movlt	r6, #0
 801243c:	2b00      	cmp	r3, #0
 801243e:	bfb7      	itett	lt
 8012440:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012444:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012448:	1a9d      	sublt	r5, r3, r2
 801244a:	2300      	movlt	r3, #0
 801244c:	e741      	b.n	80122d2 <_dtoa_r+0x742>
 801244e:	9e08      	ldr	r6, [sp, #32]
 8012450:	9d05      	ldr	r5, [sp, #20]
 8012452:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012454:	e748      	b.n	80122e8 <_dtoa_r+0x758>
 8012456:	9a08      	ldr	r2, [sp, #32]
 8012458:	e770      	b.n	801233c <_dtoa_r+0x7ac>
 801245a:	9b07      	ldr	r3, [sp, #28]
 801245c:	2b01      	cmp	r3, #1
 801245e:	dc19      	bgt.n	8012494 <_dtoa_r+0x904>
 8012460:	9b02      	ldr	r3, [sp, #8]
 8012462:	b9bb      	cbnz	r3, 8012494 <_dtoa_r+0x904>
 8012464:	9b03      	ldr	r3, [sp, #12]
 8012466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801246a:	b99b      	cbnz	r3, 8012494 <_dtoa_r+0x904>
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012472:	0d1b      	lsrs	r3, r3, #20
 8012474:	051b      	lsls	r3, r3, #20
 8012476:	b183      	cbz	r3, 801249a <_dtoa_r+0x90a>
 8012478:	9b05      	ldr	r3, [sp, #20]
 801247a:	3301      	adds	r3, #1
 801247c:	9305      	str	r3, [sp, #20]
 801247e:	9b06      	ldr	r3, [sp, #24]
 8012480:	3301      	adds	r3, #1
 8012482:	9306      	str	r3, [sp, #24]
 8012484:	f04f 0801 	mov.w	r8, #1
 8012488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801248a:	2b00      	cmp	r3, #0
 801248c:	f47f af6f 	bne.w	801236e <_dtoa_r+0x7de>
 8012490:	2001      	movs	r0, #1
 8012492:	e774      	b.n	801237e <_dtoa_r+0x7ee>
 8012494:	f04f 0800 	mov.w	r8, #0
 8012498:	e7f6      	b.n	8012488 <_dtoa_r+0x8f8>
 801249a:	4698      	mov	r8, r3
 801249c:	e7f4      	b.n	8012488 <_dtoa_r+0x8f8>
 801249e:	d082      	beq.n	80123a6 <_dtoa_r+0x816>
 80124a0:	9a05      	ldr	r2, [sp, #20]
 80124a2:	331c      	adds	r3, #28
 80124a4:	441a      	add	r2, r3
 80124a6:	9205      	str	r2, [sp, #20]
 80124a8:	9a06      	ldr	r2, [sp, #24]
 80124aa:	441a      	add	r2, r3
 80124ac:	441d      	add	r5, r3
 80124ae:	9206      	str	r2, [sp, #24]
 80124b0:	e779      	b.n	80123a6 <_dtoa_r+0x816>
 80124b2:	4603      	mov	r3, r0
 80124b4:	e7f4      	b.n	80124a0 <_dtoa_r+0x910>
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	dc37      	bgt.n	801252c <_dtoa_r+0x99c>
 80124bc:	9b07      	ldr	r3, [sp, #28]
 80124be:	2b02      	cmp	r3, #2
 80124c0:	dd34      	ble.n	801252c <_dtoa_r+0x99c>
 80124c2:	9b04      	ldr	r3, [sp, #16]
 80124c4:	9301      	str	r3, [sp, #4]
 80124c6:	9b01      	ldr	r3, [sp, #4]
 80124c8:	b963      	cbnz	r3, 80124e4 <_dtoa_r+0x954>
 80124ca:	4631      	mov	r1, r6
 80124cc:	2205      	movs	r2, #5
 80124ce:	4620      	mov	r0, r4
 80124d0:	f000 fab2 	bl	8012a38 <__multadd>
 80124d4:	4601      	mov	r1, r0
 80124d6:	4606      	mov	r6, r0
 80124d8:	4650      	mov	r0, sl
 80124da:	f000 fd11 	bl	8012f00 <__mcmp>
 80124de:	2800      	cmp	r0, #0
 80124e0:	f73f adbb 	bgt.w	801205a <_dtoa_r+0x4ca>
 80124e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124e6:	9d00      	ldr	r5, [sp, #0]
 80124e8:	ea6f 0b03 	mvn.w	fp, r3
 80124ec:	f04f 0800 	mov.w	r8, #0
 80124f0:	4631      	mov	r1, r6
 80124f2:	4620      	mov	r0, r4
 80124f4:	f000 fa7e 	bl	80129f4 <_Bfree>
 80124f8:	2f00      	cmp	r7, #0
 80124fa:	f43f aeab 	beq.w	8012254 <_dtoa_r+0x6c4>
 80124fe:	f1b8 0f00 	cmp.w	r8, #0
 8012502:	d005      	beq.n	8012510 <_dtoa_r+0x980>
 8012504:	45b8      	cmp	r8, r7
 8012506:	d003      	beq.n	8012510 <_dtoa_r+0x980>
 8012508:	4641      	mov	r1, r8
 801250a:	4620      	mov	r0, r4
 801250c:	f000 fa72 	bl	80129f4 <_Bfree>
 8012510:	4639      	mov	r1, r7
 8012512:	4620      	mov	r0, r4
 8012514:	f000 fa6e 	bl	80129f4 <_Bfree>
 8012518:	e69c      	b.n	8012254 <_dtoa_r+0x6c4>
 801251a:	2600      	movs	r6, #0
 801251c:	4637      	mov	r7, r6
 801251e:	e7e1      	b.n	80124e4 <_dtoa_r+0x954>
 8012520:	46bb      	mov	fp, r7
 8012522:	4637      	mov	r7, r6
 8012524:	e599      	b.n	801205a <_dtoa_r+0x4ca>
 8012526:	bf00      	nop
 8012528:	40240000 	.word	0x40240000
 801252c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801252e:	2b00      	cmp	r3, #0
 8012530:	f000 80c8 	beq.w	80126c4 <_dtoa_r+0xb34>
 8012534:	9b04      	ldr	r3, [sp, #16]
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	2d00      	cmp	r5, #0
 801253a:	dd05      	ble.n	8012548 <_dtoa_r+0x9b8>
 801253c:	4639      	mov	r1, r7
 801253e:	462a      	mov	r2, r5
 8012540:	4620      	mov	r0, r4
 8012542:	f000 fc71 	bl	8012e28 <__lshift>
 8012546:	4607      	mov	r7, r0
 8012548:	f1b8 0f00 	cmp.w	r8, #0
 801254c:	d05b      	beq.n	8012606 <_dtoa_r+0xa76>
 801254e:	6879      	ldr	r1, [r7, #4]
 8012550:	4620      	mov	r0, r4
 8012552:	f000 fa0f 	bl	8012974 <_Balloc>
 8012556:	4605      	mov	r5, r0
 8012558:	b928      	cbnz	r0, 8012566 <_dtoa_r+0x9d6>
 801255a:	4b83      	ldr	r3, [pc, #524]	; (8012768 <_dtoa_r+0xbd8>)
 801255c:	4602      	mov	r2, r0
 801255e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012562:	f7ff bb2e 	b.w	8011bc2 <_dtoa_r+0x32>
 8012566:	693a      	ldr	r2, [r7, #16]
 8012568:	3202      	adds	r2, #2
 801256a:	0092      	lsls	r2, r2, #2
 801256c:	f107 010c 	add.w	r1, r7, #12
 8012570:	300c      	adds	r0, #12
 8012572:	f7ff fa6f 	bl	8011a54 <memcpy>
 8012576:	2201      	movs	r2, #1
 8012578:	4629      	mov	r1, r5
 801257a:	4620      	mov	r0, r4
 801257c:	f000 fc54 	bl	8012e28 <__lshift>
 8012580:	9b00      	ldr	r3, [sp, #0]
 8012582:	3301      	adds	r3, #1
 8012584:	9304      	str	r3, [sp, #16]
 8012586:	e9dd 2300 	ldrd	r2, r3, [sp]
 801258a:	4413      	add	r3, r2
 801258c:	9308      	str	r3, [sp, #32]
 801258e:	9b02      	ldr	r3, [sp, #8]
 8012590:	f003 0301 	and.w	r3, r3, #1
 8012594:	46b8      	mov	r8, r7
 8012596:	9306      	str	r3, [sp, #24]
 8012598:	4607      	mov	r7, r0
 801259a:	9b04      	ldr	r3, [sp, #16]
 801259c:	4631      	mov	r1, r6
 801259e:	3b01      	subs	r3, #1
 80125a0:	4650      	mov	r0, sl
 80125a2:	9301      	str	r3, [sp, #4]
 80125a4:	f7ff fa6a 	bl	8011a7c <quorem>
 80125a8:	4641      	mov	r1, r8
 80125aa:	9002      	str	r0, [sp, #8]
 80125ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80125b0:	4650      	mov	r0, sl
 80125b2:	f000 fca5 	bl	8012f00 <__mcmp>
 80125b6:	463a      	mov	r2, r7
 80125b8:	9005      	str	r0, [sp, #20]
 80125ba:	4631      	mov	r1, r6
 80125bc:	4620      	mov	r0, r4
 80125be:	f000 fcbb 	bl	8012f38 <__mdiff>
 80125c2:	68c2      	ldr	r2, [r0, #12]
 80125c4:	4605      	mov	r5, r0
 80125c6:	bb02      	cbnz	r2, 801260a <_dtoa_r+0xa7a>
 80125c8:	4601      	mov	r1, r0
 80125ca:	4650      	mov	r0, sl
 80125cc:	f000 fc98 	bl	8012f00 <__mcmp>
 80125d0:	4602      	mov	r2, r0
 80125d2:	4629      	mov	r1, r5
 80125d4:	4620      	mov	r0, r4
 80125d6:	9209      	str	r2, [sp, #36]	; 0x24
 80125d8:	f000 fa0c 	bl	80129f4 <_Bfree>
 80125dc:	9b07      	ldr	r3, [sp, #28]
 80125de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125e0:	9d04      	ldr	r5, [sp, #16]
 80125e2:	ea43 0102 	orr.w	r1, r3, r2
 80125e6:	9b06      	ldr	r3, [sp, #24]
 80125e8:	4319      	orrs	r1, r3
 80125ea:	d110      	bne.n	801260e <_dtoa_r+0xa7e>
 80125ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80125f0:	d029      	beq.n	8012646 <_dtoa_r+0xab6>
 80125f2:	9b05      	ldr	r3, [sp, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	dd02      	ble.n	80125fe <_dtoa_r+0xa6e>
 80125f8:	9b02      	ldr	r3, [sp, #8]
 80125fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80125fe:	9b01      	ldr	r3, [sp, #4]
 8012600:	f883 9000 	strb.w	r9, [r3]
 8012604:	e774      	b.n	80124f0 <_dtoa_r+0x960>
 8012606:	4638      	mov	r0, r7
 8012608:	e7ba      	b.n	8012580 <_dtoa_r+0x9f0>
 801260a:	2201      	movs	r2, #1
 801260c:	e7e1      	b.n	80125d2 <_dtoa_r+0xa42>
 801260e:	9b05      	ldr	r3, [sp, #20]
 8012610:	2b00      	cmp	r3, #0
 8012612:	db04      	blt.n	801261e <_dtoa_r+0xa8e>
 8012614:	9907      	ldr	r1, [sp, #28]
 8012616:	430b      	orrs	r3, r1
 8012618:	9906      	ldr	r1, [sp, #24]
 801261a:	430b      	orrs	r3, r1
 801261c:	d120      	bne.n	8012660 <_dtoa_r+0xad0>
 801261e:	2a00      	cmp	r2, #0
 8012620:	dded      	ble.n	80125fe <_dtoa_r+0xa6e>
 8012622:	4651      	mov	r1, sl
 8012624:	2201      	movs	r2, #1
 8012626:	4620      	mov	r0, r4
 8012628:	f000 fbfe 	bl	8012e28 <__lshift>
 801262c:	4631      	mov	r1, r6
 801262e:	4682      	mov	sl, r0
 8012630:	f000 fc66 	bl	8012f00 <__mcmp>
 8012634:	2800      	cmp	r0, #0
 8012636:	dc03      	bgt.n	8012640 <_dtoa_r+0xab0>
 8012638:	d1e1      	bne.n	80125fe <_dtoa_r+0xa6e>
 801263a:	f019 0f01 	tst.w	r9, #1
 801263e:	d0de      	beq.n	80125fe <_dtoa_r+0xa6e>
 8012640:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012644:	d1d8      	bne.n	80125f8 <_dtoa_r+0xa68>
 8012646:	9a01      	ldr	r2, [sp, #4]
 8012648:	2339      	movs	r3, #57	; 0x39
 801264a:	7013      	strb	r3, [r2, #0]
 801264c:	462b      	mov	r3, r5
 801264e:	461d      	mov	r5, r3
 8012650:	3b01      	subs	r3, #1
 8012652:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012656:	2a39      	cmp	r2, #57	; 0x39
 8012658:	d06c      	beq.n	8012734 <_dtoa_r+0xba4>
 801265a:	3201      	adds	r2, #1
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	e747      	b.n	80124f0 <_dtoa_r+0x960>
 8012660:	2a00      	cmp	r2, #0
 8012662:	dd07      	ble.n	8012674 <_dtoa_r+0xae4>
 8012664:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012668:	d0ed      	beq.n	8012646 <_dtoa_r+0xab6>
 801266a:	9a01      	ldr	r2, [sp, #4]
 801266c:	f109 0301 	add.w	r3, r9, #1
 8012670:	7013      	strb	r3, [r2, #0]
 8012672:	e73d      	b.n	80124f0 <_dtoa_r+0x960>
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	9a08      	ldr	r2, [sp, #32]
 8012678:	f803 9c01 	strb.w	r9, [r3, #-1]
 801267c:	4293      	cmp	r3, r2
 801267e:	d043      	beq.n	8012708 <_dtoa_r+0xb78>
 8012680:	4651      	mov	r1, sl
 8012682:	2300      	movs	r3, #0
 8012684:	220a      	movs	r2, #10
 8012686:	4620      	mov	r0, r4
 8012688:	f000 f9d6 	bl	8012a38 <__multadd>
 801268c:	45b8      	cmp	r8, r7
 801268e:	4682      	mov	sl, r0
 8012690:	f04f 0300 	mov.w	r3, #0
 8012694:	f04f 020a 	mov.w	r2, #10
 8012698:	4641      	mov	r1, r8
 801269a:	4620      	mov	r0, r4
 801269c:	d107      	bne.n	80126ae <_dtoa_r+0xb1e>
 801269e:	f000 f9cb 	bl	8012a38 <__multadd>
 80126a2:	4680      	mov	r8, r0
 80126a4:	4607      	mov	r7, r0
 80126a6:	9b04      	ldr	r3, [sp, #16]
 80126a8:	3301      	adds	r3, #1
 80126aa:	9304      	str	r3, [sp, #16]
 80126ac:	e775      	b.n	801259a <_dtoa_r+0xa0a>
 80126ae:	f000 f9c3 	bl	8012a38 <__multadd>
 80126b2:	4639      	mov	r1, r7
 80126b4:	4680      	mov	r8, r0
 80126b6:	2300      	movs	r3, #0
 80126b8:	220a      	movs	r2, #10
 80126ba:	4620      	mov	r0, r4
 80126bc:	f000 f9bc 	bl	8012a38 <__multadd>
 80126c0:	4607      	mov	r7, r0
 80126c2:	e7f0      	b.n	80126a6 <_dtoa_r+0xb16>
 80126c4:	9b04      	ldr	r3, [sp, #16]
 80126c6:	9301      	str	r3, [sp, #4]
 80126c8:	9d00      	ldr	r5, [sp, #0]
 80126ca:	4631      	mov	r1, r6
 80126cc:	4650      	mov	r0, sl
 80126ce:	f7ff f9d5 	bl	8011a7c <quorem>
 80126d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80126d6:	9b00      	ldr	r3, [sp, #0]
 80126d8:	f805 9b01 	strb.w	r9, [r5], #1
 80126dc:	1aea      	subs	r2, r5, r3
 80126de:	9b01      	ldr	r3, [sp, #4]
 80126e0:	4293      	cmp	r3, r2
 80126e2:	dd07      	ble.n	80126f4 <_dtoa_r+0xb64>
 80126e4:	4651      	mov	r1, sl
 80126e6:	2300      	movs	r3, #0
 80126e8:	220a      	movs	r2, #10
 80126ea:	4620      	mov	r0, r4
 80126ec:	f000 f9a4 	bl	8012a38 <__multadd>
 80126f0:	4682      	mov	sl, r0
 80126f2:	e7ea      	b.n	80126ca <_dtoa_r+0xb3a>
 80126f4:	9b01      	ldr	r3, [sp, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	bfc8      	it	gt
 80126fa:	461d      	movgt	r5, r3
 80126fc:	9b00      	ldr	r3, [sp, #0]
 80126fe:	bfd8      	it	le
 8012700:	2501      	movle	r5, #1
 8012702:	441d      	add	r5, r3
 8012704:	f04f 0800 	mov.w	r8, #0
 8012708:	4651      	mov	r1, sl
 801270a:	2201      	movs	r2, #1
 801270c:	4620      	mov	r0, r4
 801270e:	f000 fb8b 	bl	8012e28 <__lshift>
 8012712:	4631      	mov	r1, r6
 8012714:	4682      	mov	sl, r0
 8012716:	f000 fbf3 	bl	8012f00 <__mcmp>
 801271a:	2800      	cmp	r0, #0
 801271c:	dc96      	bgt.n	801264c <_dtoa_r+0xabc>
 801271e:	d102      	bne.n	8012726 <_dtoa_r+0xb96>
 8012720:	f019 0f01 	tst.w	r9, #1
 8012724:	d192      	bne.n	801264c <_dtoa_r+0xabc>
 8012726:	462b      	mov	r3, r5
 8012728:	461d      	mov	r5, r3
 801272a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801272e:	2a30      	cmp	r2, #48	; 0x30
 8012730:	d0fa      	beq.n	8012728 <_dtoa_r+0xb98>
 8012732:	e6dd      	b.n	80124f0 <_dtoa_r+0x960>
 8012734:	9a00      	ldr	r2, [sp, #0]
 8012736:	429a      	cmp	r2, r3
 8012738:	d189      	bne.n	801264e <_dtoa_r+0xabe>
 801273a:	f10b 0b01 	add.w	fp, fp, #1
 801273e:	2331      	movs	r3, #49	; 0x31
 8012740:	e796      	b.n	8012670 <_dtoa_r+0xae0>
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <_dtoa_r+0xbdc>)
 8012744:	f7ff ba99 	b.w	8011c7a <_dtoa_r+0xea>
 8012748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801274a:	2b00      	cmp	r3, #0
 801274c:	f47f aa6d 	bne.w	8011c2a <_dtoa_r+0x9a>
 8012750:	4b07      	ldr	r3, [pc, #28]	; (8012770 <_dtoa_r+0xbe0>)
 8012752:	f7ff ba92 	b.w	8011c7a <_dtoa_r+0xea>
 8012756:	9b01      	ldr	r3, [sp, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	dcb5      	bgt.n	80126c8 <_dtoa_r+0xb38>
 801275c:	9b07      	ldr	r3, [sp, #28]
 801275e:	2b02      	cmp	r3, #2
 8012760:	f73f aeb1 	bgt.w	80124c6 <_dtoa_r+0x936>
 8012764:	e7b0      	b.n	80126c8 <_dtoa_r+0xb38>
 8012766:	bf00      	nop
 8012768:	0814f6a9 	.word	0x0814f6a9
 801276c:	0814f604 	.word	0x0814f604
 8012770:	0814f62d 	.word	0x0814f62d

08012774 <_free_r>:
 8012774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012776:	2900      	cmp	r1, #0
 8012778:	d044      	beq.n	8012804 <_free_r+0x90>
 801277a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801277e:	9001      	str	r0, [sp, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	f1a1 0404 	sub.w	r4, r1, #4
 8012786:	bfb8      	it	lt
 8012788:	18e4      	addlt	r4, r4, r3
 801278a:	f000 f8e7 	bl	801295c <__malloc_lock>
 801278e:	4a1e      	ldr	r2, [pc, #120]	; (8012808 <_free_r+0x94>)
 8012790:	9801      	ldr	r0, [sp, #4]
 8012792:	6813      	ldr	r3, [r2, #0]
 8012794:	b933      	cbnz	r3, 80127a4 <_free_r+0x30>
 8012796:	6063      	str	r3, [r4, #4]
 8012798:	6014      	str	r4, [r2, #0]
 801279a:	b003      	add	sp, #12
 801279c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127a0:	f000 b8e2 	b.w	8012968 <__malloc_unlock>
 80127a4:	42a3      	cmp	r3, r4
 80127a6:	d908      	bls.n	80127ba <_free_r+0x46>
 80127a8:	6825      	ldr	r5, [r4, #0]
 80127aa:	1961      	adds	r1, r4, r5
 80127ac:	428b      	cmp	r3, r1
 80127ae:	bf01      	itttt	eq
 80127b0:	6819      	ldreq	r1, [r3, #0]
 80127b2:	685b      	ldreq	r3, [r3, #4]
 80127b4:	1949      	addeq	r1, r1, r5
 80127b6:	6021      	streq	r1, [r4, #0]
 80127b8:	e7ed      	b.n	8012796 <_free_r+0x22>
 80127ba:	461a      	mov	r2, r3
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	b10b      	cbz	r3, 80127c4 <_free_r+0x50>
 80127c0:	42a3      	cmp	r3, r4
 80127c2:	d9fa      	bls.n	80127ba <_free_r+0x46>
 80127c4:	6811      	ldr	r1, [r2, #0]
 80127c6:	1855      	adds	r5, r2, r1
 80127c8:	42a5      	cmp	r5, r4
 80127ca:	d10b      	bne.n	80127e4 <_free_r+0x70>
 80127cc:	6824      	ldr	r4, [r4, #0]
 80127ce:	4421      	add	r1, r4
 80127d0:	1854      	adds	r4, r2, r1
 80127d2:	42a3      	cmp	r3, r4
 80127d4:	6011      	str	r1, [r2, #0]
 80127d6:	d1e0      	bne.n	801279a <_free_r+0x26>
 80127d8:	681c      	ldr	r4, [r3, #0]
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	6053      	str	r3, [r2, #4]
 80127de:	440c      	add	r4, r1
 80127e0:	6014      	str	r4, [r2, #0]
 80127e2:	e7da      	b.n	801279a <_free_r+0x26>
 80127e4:	d902      	bls.n	80127ec <_free_r+0x78>
 80127e6:	230c      	movs	r3, #12
 80127e8:	6003      	str	r3, [r0, #0]
 80127ea:	e7d6      	b.n	801279a <_free_r+0x26>
 80127ec:	6825      	ldr	r5, [r4, #0]
 80127ee:	1961      	adds	r1, r4, r5
 80127f0:	428b      	cmp	r3, r1
 80127f2:	bf04      	itt	eq
 80127f4:	6819      	ldreq	r1, [r3, #0]
 80127f6:	685b      	ldreq	r3, [r3, #4]
 80127f8:	6063      	str	r3, [r4, #4]
 80127fa:	bf04      	itt	eq
 80127fc:	1949      	addeq	r1, r1, r5
 80127fe:	6021      	streq	r1, [r4, #0]
 8012800:	6054      	str	r4, [r2, #4]
 8012802:	e7ca      	b.n	801279a <_free_r+0x26>
 8012804:	b003      	add	sp, #12
 8012806:	bd30      	pop	{r4, r5, pc}
 8012808:	2001a124 	.word	0x2001a124

0801280c <malloc>:
 801280c:	4b02      	ldr	r3, [pc, #8]	; (8012818 <malloc+0xc>)
 801280e:	4601      	mov	r1, r0
 8012810:	6818      	ldr	r0, [r3, #0]
 8012812:	f000 b823 	b.w	801285c <_malloc_r>
 8012816:	bf00      	nop
 8012818:	20000920 	.word	0x20000920

0801281c <sbrk_aligned>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	4e0e      	ldr	r6, [pc, #56]	; (8012858 <sbrk_aligned+0x3c>)
 8012820:	460c      	mov	r4, r1
 8012822:	6831      	ldr	r1, [r6, #0]
 8012824:	4605      	mov	r5, r0
 8012826:	b911      	cbnz	r1, 801282e <sbrk_aligned+0x12>
 8012828:	f001 ffe2 	bl	80147f0 <_sbrk_r>
 801282c:	6030      	str	r0, [r6, #0]
 801282e:	4621      	mov	r1, r4
 8012830:	4628      	mov	r0, r5
 8012832:	f001 ffdd 	bl	80147f0 <_sbrk_r>
 8012836:	1c43      	adds	r3, r0, #1
 8012838:	d00a      	beq.n	8012850 <sbrk_aligned+0x34>
 801283a:	1cc4      	adds	r4, r0, #3
 801283c:	f024 0403 	bic.w	r4, r4, #3
 8012840:	42a0      	cmp	r0, r4
 8012842:	d007      	beq.n	8012854 <sbrk_aligned+0x38>
 8012844:	1a21      	subs	r1, r4, r0
 8012846:	4628      	mov	r0, r5
 8012848:	f001 ffd2 	bl	80147f0 <_sbrk_r>
 801284c:	3001      	adds	r0, #1
 801284e:	d101      	bne.n	8012854 <sbrk_aligned+0x38>
 8012850:	f04f 34ff 	mov.w	r4, #4294967295
 8012854:	4620      	mov	r0, r4
 8012856:	bd70      	pop	{r4, r5, r6, pc}
 8012858:	2001a128 	.word	0x2001a128

0801285c <_malloc_r>:
 801285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012860:	1ccd      	adds	r5, r1, #3
 8012862:	f025 0503 	bic.w	r5, r5, #3
 8012866:	3508      	adds	r5, #8
 8012868:	2d0c      	cmp	r5, #12
 801286a:	bf38      	it	cc
 801286c:	250c      	movcc	r5, #12
 801286e:	2d00      	cmp	r5, #0
 8012870:	4607      	mov	r7, r0
 8012872:	db01      	blt.n	8012878 <_malloc_r+0x1c>
 8012874:	42a9      	cmp	r1, r5
 8012876:	d905      	bls.n	8012884 <_malloc_r+0x28>
 8012878:	230c      	movs	r3, #12
 801287a:	603b      	str	r3, [r7, #0]
 801287c:	2600      	movs	r6, #0
 801287e:	4630      	mov	r0, r6
 8012880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012958 <_malloc_r+0xfc>
 8012888:	f000 f868 	bl	801295c <__malloc_lock>
 801288c:	f8d8 3000 	ldr.w	r3, [r8]
 8012890:	461c      	mov	r4, r3
 8012892:	bb5c      	cbnz	r4, 80128ec <_malloc_r+0x90>
 8012894:	4629      	mov	r1, r5
 8012896:	4638      	mov	r0, r7
 8012898:	f7ff ffc0 	bl	801281c <sbrk_aligned>
 801289c:	1c43      	adds	r3, r0, #1
 801289e:	4604      	mov	r4, r0
 80128a0:	d155      	bne.n	801294e <_malloc_r+0xf2>
 80128a2:	f8d8 4000 	ldr.w	r4, [r8]
 80128a6:	4626      	mov	r6, r4
 80128a8:	2e00      	cmp	r6, #0
 80128aa:	d145      	bne.n	8012938 <_malloc_r+0xdc>
 80128ac:	2c00      	cmp	r4, #0
 80128ae:	d048      	beq.n	8012942 <_malloc_r+0xe6>
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	4631      	mov	r1, r6
 80128b4:	4638      	mov	r0, r7
 80128b6:	eb04 0903 	add.w	r9, r4, r3
 80128ba:	f001 ff99 	bl	80147f0 <_sbrk_r>
 80128be:	4581      	cmp	r9, r0
 80128c0:	d13f      	bne.n	8012942 <_malloc_r+0xe6>
 80128c2:	6821      	ldr	r1, [r4, #0]
 80128c4:	1a6d      	subs	r5, r5, r1
 80128c6:	4629      	mov	r1, r5
 80128c8:	4638      	mov	r0, r7
 80128ca:	f7ff ffa7 	bl	801281c <sbrk_aligned>
 80128ce:	3001      	adds	r0, #1
 80128d0:	d037      	beq.n	8012942 <_malloc_r+0xe6>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	442b      	add	r3, r5
 80128d6:	6023      	str	r3, [r4, #0]
 80128d8:	f8d8 3000 	ldr.w	r3, [r8]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d038      	beq.n	8012952 <_malloc_r+0xf6>
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	42a2      	cmp	r2, r4
 80128e4:	d12b      	bne.n	801293e <_malloc_r+0xe2>
 80128e6:	2200      	movs	r2, #0
 80128e8:	605a      	str	r2, [r3, #4]
 80128ea:	e00f      	b.n	801290c <_malloc_r+0xb0>
 80128ec:	6822      	ldr	r2, [r4, #0]
 80128ee:	1b52      	subs	r2, r2, r5
 80128f0:	d41f      	bmi.n	8012932 <_malloc_r+0xd6>
 80128f2:	2a0b      	cmp	r2, #11
 80128f4:	d917      	bls.n	8012926 <_malloc_r+0xca>
 80128f6:	1961      	adds	r1, r4, r5
 80128f8:	42a3      	cmp	r3, r4
 80128fa:	6025      	str	r5, [r4, #0]
 80128fc:	bf18      	it	ne
 80128fe:	6059      	strne	r1, [r3, #4]
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	bf08      	it	eq
 8012904:	f8c8 1000 	streq.w	r1, [r8]
 8012908:	5162      	str	r2, [r4, r5]
 801290a:	604b      	str	r3, [r1, #4]
 801290c:	4638      	mov	r0, r7
 801290e:	f104 060b 	add.w	r6, r4, #11
 8012912:	f000 f829 	bl	8012968 <__malloc_unlock>
 8012916:	f026 0607 	bic.w	r6, r6, #7
 801291a:	1d23      	adds	r3, r4, #4
 801291c:	1af2      	subs	r2, r6, r3
 801291e:	d0ae      	beq.n	801287e <_malloc_r+0x22>
 8012920:	1b9b      	subs	r3, r3, r6
 8012922:	50a3      	str	r3, [r4, r2]
 8012924:	e7ab      	b.n	801287e <_malloc_r+0x22>
 8012926:	42a3      	cmp	r3, r4
 8012928:	6862      	ldr	r2, [r4, #4]
 801292a:	d1dd      	bne.n	80128e8 <_malloc_r+0x8c>
 801292c:	f8c8 2000 	str.w	r2, [r8]
 8012930:	e7ec      	b.n	801290c <_malloc_r+0xb0>
 8012932:	4623      	mov	r3, r4
 8012934:	6864      	ldr	r4, [r4, #4]
 8012936:	e7ac      	b.n	8012892 <_malloc_r+0x36>
 8012938:	4634      	mov	r4, r6
 801293a:	6876      	ldr	r6, [r6, #4]
 801293c:	e7b4      	b.n	80128a8 <_malloc_r+0x4c>
 801293e:	4613      	mov	r3, r2
 8012940:	e7cc      	b.n	80128dc <_malloc_r+0x80>
 8012942:	230c      	movs	r3, #12
 8012944:	603b      	str	r3, [r7, #0]
 8012946:	4638      	mov	r0, r7
 8012948:	f000 f80e 	bl	8012968 <__malloc_unlock>
 801294c:	e797      	b.n	801287e <_malloc_r+0x22>
 801294e:	6025      	str	r5, [r4, #0]
 8012950:	e7dc      	b.n	801290c <_malloc_r+0xb0>
 8012952:	605b      	str	r3, [r3, #4]
 8012954:	deff      	udf	#255	; 0xff
 8012956:	bf00      	nop
 8012958:	2001a124 	.word	0x2001a124

0801295c <__malloc_lock>:
 801295c:	4801      	ldr	r0, [pc, #4]	; (8012964 <__malloc_lock+0x8>)
 801295e:	f7ff b872 	b.w	8011a46 <__retarget_lock_acquire_recursive>
 8012962:	bf00      	nop
 8012964:	2001a120 	.word	0x2001a120

08012968 <__malloc_unlock>:
 8012968:	4801      	ldr	r0, [pc, #4]	; (8012970 <__malloc_unlock+0x8>)
 801296a:	f7ff b86d 	b.w	8011a48 <__retarget_lock_release_recursive>
 801296e:	bf00      	nop
 8012970:	2001a120 	.word	0x2001a120

08012974 <_Balloc>:
 8012974:	b570      	push	{r4, r5, r6, lr}
 8012976:	69c6      	ldr	r6, [r0, #28]
 8012978:	4604      	mov	r4, r0
 801297a:	460d      	mov	r5, r1
 801297c:	b976      	cbnz	r6, 801299c <_Balloc+0x28>
 801297e:	2010      	movs	r0, #16
 8012980:	f7ff ff44 	bl	801280c <malloc>
 8012984:	4602      	mov	r2, r0
 8012986:	61e0      	str	r0, [r4, #28]
 8012988:	b920      	cbnz	r0, 8012994 <_Balloc+0x20>
 801298a:	4b18      	ldr	r3, [pc, #96]	; (80129ec <_Balloc+0x78>)
 801298c:	4818      	ldr	r0, [pc, #96]	; (80129f0 <_Balloc+0x7c>)
 801298e:	216b      	movs	r1, #107	; 0x6b
 8012990:	f001 ff46 	bl	8014820 <__assert_func>
 8012994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012998:	6006      	str	r6, [r0, #0]
 801299a:	60c6      	str	r6, [r0, #12]
 801299c:	69e6      	ldr	r6, [r4, #28]
 801299e:	68f3      	ldr	r3, [r6, #12]
 80129a0:	b183      	cbz	r3, 80129c4 <_Balloc+0x50>
 80129a2:	69e3      	ldr	r3, [r4, #28]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80129aa:	b9b8      	cbnz	r0, 80129dc <_Balloc+0x68>
 80129ac:	2101      	movs	r1, #1
 80129ae:	fa01 f605 	lsl.w	r6, r1, r5
 80129b2:	1d72      	adds	r2, r6, #5
 80129b4:	0092      	lsls	r2, r2, #2
 80129b6:	4620      	mov	r0, r4
 80129b8:	f001 ff50 	bl	801485c <_calloc_r>
 80129bc:	b160      	cbz	r0, 80129d8 <_Balloc+0x64>
 80129be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80129c2:	e00e      	b.n	80129e2 <_Balloc+0x6e>
 80129c4:	2221      	movs	r2, #33	; 0x21
 80129c6:	2104      	movs	r1, #4
 80129c8:	4620      	mov	r0, r4
 80129ca:	f001 ff47 	bl	801485c <_calloc_r>
 80129ce:	69e3      	ldr	r3, [r4, #28]
 80129d0:	60f0      	str	r0, [r6, #12]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1e4      	bne.n	80129a2 <_Balloc+0x2e>
 80129d8:	2000      	movs	r0, #0
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	6802      	ldr	r2, [r0, #0]
 80129de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80129e2:	2300      	movs	r3, #0
 80129e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129e8:	e7f7      	b.n	80129da <_Balloc+0x66>
 80129ea:	bf00      	nop
 80129ec:	0814f63a 	.word	0x0814f63a
 80129f0:	0814f6ba 	.word	0x0814f6ba

080129f4 <_Bfree>:
 80129f4:	b570      	push	{r4, r5, r6, lr}
 80129f6:	69c6      	ldr	r6, [r0, #28]
 80129f8:	4605      	mov	r5, r0
 80129fa:	460c      	mov	r4, r1
 80129fc:	b976      	cbnz	r6, 8012a1c <_Bfree+0x28>
 80129fe:	2010      	movs	r0, #16
 8012a00:	f7ff ff04 	bl	801280c <malloc>
 8012a04:	4602      	mov	r2, r0
 8012a06:	61e8      	str	r0, [r5, #28]
 8012a08:	b920      	cbnz	r0, 8012a14 <_Bfree+0x20>
 8012a0a:	4b09      	ldr	r3, [pc, #36]	; (8012a30 <_Bfree+0x3c>)
 8012a0c:	4809      	ldr	r0, [pc, #36]	; (8012a34 <_Bfree+0x40>)
 8012a0e:	218f      	movs	r1, #143	; 0x8f
 8012a10:	f001 ff06 	bl	8014820 <__assert_func>
 8012a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a18:	6006      	str	r6, [r0, #0]
 8012a1a:	60c6      	str	r6, [r0, #12]
 8012a1c:	b13c      	cbz	r4, 8012a2e <_Bfree+0x3a>
 8012a1e:	69eb      	ldr	r3, [r5, #28]
 8012a20:	6862      	ldr	r2, [r4, #4]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a28:	6021      	str	r1, [r4, #0]
 8012a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012a2e:	bd70      	pop	{r4, r5, r6, pc}
 8012a30:	0814f63a 	.word	0x0814f63a
 8012a34:	0814f6ba 	.word	0x0814f6ba

08012a38 <__multadd>:
 8012a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a3c:	690d      	ldr	r5, [r1, #16]
 8012a3e:	4607      	mov	r7, r0
 8012a40:	460c      	mov	r4, r1
 8012a42:	461e      	mov	r6, r3
 8012a44:	f101 0c14 	add.w	ip, r1, #20
 8012a48:	2000      	movs	r0, #0
 8012a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8012a4e:	b299      	uxth	r1, r3
 8012a50:	fb02 6101 	mla	r1, r2, r1, r6
 8012a54:	0c1e      	lsrs	r6, r3, #16
 8012a56:	0c0b      	lsrs	r3, r1, #16
 8012a58:	fb02 3306 	mla	r3, r2, r6, r3
 8012a5c:	b289      	uxth	r1, r1
 8012a5e:	3001      	adds	r0, #1
 8012a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012a64:	4285      	cmp	r5, r0
 8012a66:	f84c 1b04 	str.w	r1, [ip], #4
 8012a6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012a6e:	dcec      	bgt.n	8012a4a <__multadd+0x12>
 8012a70:	b30e      	cbz	r6, 8012ab6 <__multadd+0x7e>
 8012a72:	68a3      	ldr	r3, [r4, #8]
 8012a74:	42ab      	cmp	r3, r5
 8012a76:	dc19      	bgt.n	8012aac <__multadd+0x74>
 8012a78:	6861      	ldr	r1, [r4, #4]
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	3101      	adds	r1, #1
 8012a7e:	f7ff ff79 	bl	8012974 <_Balloc>
 8012a82:	4680      	mov	r8, r0
 8012a84:	b928      	cbnz	r0, 8012a92 <__multadd+0x5a>
 8012a86:	4602      	mov	r2, r0
 8012a88:	4b0c      	ldr	r3, [pc, #48]	; (8012abc <__multadd+0x84>)
 8012a8a:	480d      	ldr	r0, [pc, #52]	; (8012ac0 <__multadd+0x88>)
 8012a8c:	21ba      	movs	r1, #186	; 0xba
 8012a8e:	f001 fec7 	bl	8014820 <__assert_func>
 8012a92:	6922      	ldr	r2, [r4, #16]
 8012a94:	3202      	adds	r2, #2
 8012a96:	f104 010c 	add.w	r1, r4, #12
 8012a9a:	0092      	lsls	r2, r2, #2
 8012a9c:	300c      	adds	r0, #12
 8012a9e:	f7fe ffd9 	bl	8011a54 <memcpy>
 8012aa2:	4621      	mov	r1, r4
 8012aa4:	4638      	mov	r0, r7
 8012aa6:	f7ff ffa5 	bl	80129f4 <_Bfree>
 8012aaa:	4644      	mov	r4, r8
 8012aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ab0:	3501      	adds	r5, #1
 8012ab2:	615e      	str	r6, [r3, #20]
 8012ab4:	6125      	str	r5, [r4, #16]
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012abc:	0814f6a9 	.word	0x0814f6a9
 8012ac0:	0814f6ba 	.word	0x0814f6ba

08012ac4 <__s2b>:
 8012ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ac8:	460c      	mov	r4, r1
 8012aca:	4615      	mov	r5, r2
 8012acc:	461f      	mov	r7, r3
 8012ace:	2209      	movs	r2, #9
 8012ad0:	3308      	adds	r3, #8
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ad8:	2100      	movs	r1, #0
 8012ada:	2201      	movs	r2, #1
 8012adc:	429a      	cmp	r2, r3
 8012ade:	db09      	blt.n	8012af4 <__s2b+0x30>
 8012ae0:	4630      	mov	r0, r6
 8012ae2:	f7ff ff47 	bl	8012974 <_Balloc>
 8012ae6:	b940      	cbnz	r0, 8012afa <__s2b+0x36>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	4b19      	ldr	r3, [pc, #100]	; (8012b50 <__s2b+0x8c>)
 8012aec:	4819      	ldr	r0, [pc, #100]	; (8012b54 <__s2b+0x90>)
 8012aee:	21d3      	movs	r1, #211	; 0xd3
 8012af0:	f001 fe96 	bl	8014820 <__assert_func>
 8012af4:	0052      	lsls	r2, r2, #1
 8012af6:	3101      	adds	r1, #1
 8012af8:	e7f0      	b.n	8012adc <__s2b+0x18>
 8012afa:	9b08      	ldr	r3, [sp, #32]
 8012afc:	6143      	str	r3, [r0, #20]
 8012afe:	2d09      	cmp	r5, #9
 8012b00:	f04f 0301 	mov.w	r3, #1
 8012b04:	6103      	str	r3, [r0, #16]
 8012b06:	dd16      	ble.n	8012b36 <__s2b+0x72>
 8012b08:	f104 0909 	add.w	r9, r4, #9
 8012b0c:	46c8      	mov	r8, r9
 8012b0e:	442c      	add	r4, r5
 8012b10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b14:	4601      	mov	r1, r0
 8012b16:	3b30      	subs	r3, #48	; 0x30
 8012b18:	220a      	movs	r2, #10
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f7ff ff8c 	bl	8012a38 <__multadd>
 8012b20:	45a0      	cmp	r8, r4
 8012b22:	d1f5      	bne.n	8012b10 <__s2b+0x4c>
 8012b24:	f1a5 0408 	sub.w	r4, r5, #8
 8012b28:	444c      	add	r4, r9
 8012b2a:	1b2d      	subs	r5, r5, r4
 8012b2c:	1963      	adds	r3, r4, r5
 8012b2e:	42bb      	cmp	r3, r7
 8012b30:	db04      	blt.n	8012b3c <__s2b+0x78>
 8012b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b36:	340a      	adds	r4, #10
 8012b38:	2509      	movs	r5, #9
 8012b3a:	e7f6      	b.n	8012b2a <__s2b+0x66>
 8012b3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012b40:	4601      	mov	r1, r0
 8012b42:	3b30      	subs	r3, #48	; 0x30
 8012b44:	220a      	movs	r2, #10
 8012b46:	4630      	mov	r0, r6
 8012b48:	f7ff ff76 	bl	8012a38 <__multadd>
 8012b4c:	e7ee      	b.n	8012b2c <__s2b+0x68>
 8012b4e:	bf00      	nop
 8012b50:	0814f6a9 	.word	0x0814f6a9
 8012b54:	0814f6ba 	.word	0x0814f6ba

08012b58 <__hi0bits>:
 8012b58:	0c03      	lsrs	r3, r0, #16
 8012b5a:	041b      	lsls	r3, r3, #16
 8012b5c:	b9d3      	cbnz	r3, 8012b94 <__hi0bits+0x3c>
 8012b5e:	0400      	lsls	r0, r0, #16
 8012b60:	2310      	movs	r3, #16
 8012b62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012b66:	bf04      	itt	eq
 8012b68:	0200      	lsleq	r0, r0, #8
 8012b6a:	3308      	addeq	r3, #8
 8012b6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012b70:	bf04      	itt	eq
 8012b72:	0100      	lsleq	r0, r0, #4
 8012b74:	3304      	addeq	r3, #4
 8012b76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012b7a:	bf04      	itt	eq
 8012b7c:	0080      	lsleq	r0, r0, #2
 8012b7e:	3302      	addeq	r3, #2
 8012b80:	2800      	cmp	r0, #0
 8012b82:	db05      	blt.n	8012b90 <__hi0bits+0x38>
 8012b84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012b88:	f103 0301 	add.w	r3, r3, #1
 8012b8c:	bf08      	it	eq
 8012b8e:	2320      	moveq	r3, #32
 8012b90:	4618      	mov	r0, r3
 8012b92:	4770      	bx	lr
 8012b94:	2300      	movs	r3, #0
 8012b96:	e7e4      	b.n	8012b62 <__hi0bits+0xa>

08012b98 <__lo0bits>:
 8012b98:	6803      	ldr	r3, [r0, #0]
 8012b9a:	f013 0207 	ands.w	r2, r3, #7
 8012b9e:	d00c      	beq.n	8012bba <__lo0bits+0x22>
 8012ba0:	07d9      	lsls	r1, r3, #31
 8012ba2:	d422      	bmi.n	8012bea <__lo0bits+0x52>
 8012ba4:	079a      	lsls	r2, r3, #30
 8012ba6:	bf49      	itett	mi
 8012ba8:	085b      	lsrmi	r3, r3, #1
 8012baa:	089b      	lsrpl	r3, r3, #2
 8012bac:	6003      	strmi	r3, [r0, #0]
 8012bae:	2201      	movmi	r2, #1
 8012bb0:	bf5c      	itt	pl
 8012bb2:	6003      	strpl	r3, [r0, #0]
 8012bb4:	2202      	movpl	r2, #2
 8012bb6:	4610      	mov	r0, r2
 8012bb8:	4770      	bx	lr
 8012bba:	b299      	uxth	r1, r3
 8012bbc:	b909      	cbnz	r1, 8012bc2 <__lo0bits+0x2a>
 8012bbe:	0c1b      	lsrs	r3, r3, #16
 8012bc0:	2210      	movs	r2, #16
 8012bc2:	b2d9      	uxtb	r1, r3
 8012bc4:	b909      	cbnz	r1, 8012bca <__lo0bits+0x32>
 8012bc6:	3208      	adds	r2, #8
 8012bc8:	0a1b      	lsrs	r3, r3, #8
 8012bca:	0719      	lsls	r1, r3, #28
 8012bcc:	bf04      	itt	eq
 8012bce:	091b      	lsreq	r3, r3, #4
 8012bd0:	3204      	addeq	r2, #4
 8012bd2:	0799      	lsls	r1, r3, #30
 8012bd4:	bf04      	itt	eq
 8012bd6:	089b      	lsreq	r3, r3, #2
 8012bd8:	3202      	addeq	r2, #2
 8012bda:	07d9      	lsls	r1, r3, #31
 8012bdc:	d403      	bmi.n	8012be6 <__lo0bits+0x4e>
 8012bde:	085b      	lsrs	r3, r3, #1
 8012be0:	f102 0201 	add.w	r2, r2, #1
 8012be4:	d003      	beq.n	8012bee <__lo0bits+0x56>
 8012be6:	6003      	str	r3, [r0, #0]
 8012be8:	e7e5      	b.n	8012bb6 <__lo0bits+0x1e>
 8012bea:	2200      	movs	r2, #0
 8012bec:	e7e3      	b.n	8012bb6 <__lo0bits+0x1e>
 8012bee:	2220      	movs	r2, #32
 8012bf0:	e7e1      	b.n	8012bb6 <__lo0bits+0x1e>
	...

08012bf4 <__i2b>:
 8012bf4:	b510      	push	{r4, lr}
 8012bf6:	460c      	mov	r4, r1
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	f7ff febb 	bl	8012974 <_Balloc>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	b928      	cbnz	r0, 8012c0e <__i2b+0x1a>
 8012c02:	4b05      	ldr	r3, [pc, #20]	; (8012c18 <__i2b+0x24>)
 8012c04:	4805      	ldr	r0, [pc, #20]	; (8012c1c <__i2b+0x28>)
 8012c06:	f240 1145 	movw	r1, #325	; 0x145
 8012c0a:	f001 fe09 	bl	8014820 <__assert_func>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	6144      	str	r4, [r0, #20]
 8012c12:	6103      	str	r3, [r0, #16]
 8012c14:	bd10      	pop	{r4, pc}
 8012c16:	bf00      	nop
 8012c18:	0814f6a9 	.word	0x0814f6a9
 8012c1c:	0814f6ba 	.word	0x0814f6ba

08012c20 <__multiply>:
 8012c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	4691      	mov	r9, r2
 8012c26:	690a      	ldr	r2, [r1, #16]
 8012c28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	bfb8      	it	lt
 8012c30:	460b      	movlt	r3, r1
 8012c32:	460c      	mov	r4, r1
 8012c34:	bfbc      	itt	lt
 8012c36:	464c      	movlt	r4, r9
 8012c38:	4699      	movlt	r9, r3
 8012c3a:	6927      	ldr	r7, [r4, #16]
 8012c3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012c40:	68a3      	ldr	r3, [r4, #8]
 8012c42:	6861      	ldr	r1, [r4, #4]
 8012c44:	eb07 060a 	add.w	r6, r7, sl
 8012c48:	42b3      	cmp	r3, r6
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	bfb8      	it	lt
 8012c4e:	3101      	addlt	r1, #1
 8012c50:	f7ff fe90 	bl	8012974 <_Balloc>
 8012c54:	b930      	cbnz	r0, 8012c64 <__multiply+0x44>
 8012c56:	4602      	mov	r2, r0
 8012c58:	4b44      	ldr	r3, [pc, #272]	; (8012d6c <__multiply+0x14c>)
 8012c5a:	4845      	ldr	r0, [pc, #276]	; (8012d70 <__multiply+0x150>)
 8012c5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012c60:	f001 fdde 	bl	8014820 <__assert_func>
 8012c64:	f100 0514 	add.w	r5, r0, #20
 8012c68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	2200      	movs	r2, #0
 8012c70:	4543      	cmp	r3, r8
 8012c72:	d321      	bcc.n	8012cb8 <__multiply+0x98>
 8012c74:	f104 0314 	add.w	r3, r4, #20
 8012c78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012c7c:	f109 0314 	add.w	r3, r9, #20
 8012c80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012c84:	9202      	str	r2, [sp, #8]
 8012c86:	1b3a      	subs	r2, r7, r4
 8012c88:	3a15      	subs	r2, #21
 8012c8a:	f022 0203 	bic.w	r2, r2, #3
 8012c8e:	3204      	adds	r2, #4
 8012c90:	f104 0115 	add.w	r1, r4, #21
 8012c94:	428f      	cmp	r7, r1
 8012c96:	bf38      	it	cc
 8012c98:	2204      	movcc	r2, #4
 8012c9a:	9201      	str	r2, [sp, #4]
 8012c9c:	9a02      	ldr	r2, [sp, #8]
 8012c9e:	9303      	str	r3, [sp, #12]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d80c      	bhi.n	8012cbe <__multiply+0x9e>
 8012ca4:	2e00      	cmp	r6, #0
 8012ca6:	dd03      	ble.n	8012cb0 <__multiply+0x90>
 8012ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d05b      	beq.n	8012d68 <__multiply+0x148>
 8012cb0:	6106      	str	r6, [r0, #16]
 8012cb2:	b005      	add	sp, #20
 8012cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb8:	f843 2b04 	str.w	r2, [r3], #4
 8012cbc:	e7d8      	b.n	8012c70 <__multiply+0x50>
 8012cbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8012cc2:	f1ba 0f00 	cmp.w	sl, #0
 8012cc6:	d024      	beq.n	8012d12 <__multiply+0xf2>
 8012cc8:	f104 0e14 	add.w	lr, r4, #20
 8012ccc:	46a9      	mov	r9, r5
 8012cce:	f04f 0c00 	mov.w	ip, #0
 8012cd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012cd6:	f8d9 1000 	ldr.w	r1, [r9]
 8012cda:	fa1f fb82 	uxth.w	fp, r2
 8012cde:	b289      	uxth	r1, r1
 8012ce0:	fb0a 110b 	mla	r1, sl, fp, r1
 8012ce4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8012cec:	4461      	add	r1, ip
 8012cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012cf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8012cf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012cfa:	b289      	uxth	r1, r1
 8012cfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d00:	4577      	cmp	r7, lr
 8012d02:	f849 1b04 	str.w	r1, [r9], #4
 8012d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d0a:	d8e2      	bhi.n	8012cd2 <__multiply+0xb2>
 8012d0c:	9a01      	ldr	r2, [sp, #4]
 8012d0e:	f845 c002 	str.w	ip, [r5, r2]
 8012d12:	9a03      	ldr	r2, [sp, #12]
 8012d14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d18:	3304      	adds	r3, #4
 8012d1a:	f1b9 0f00 	cmp.w	r9, #0
 8012d1e:	d021      	beq.n	8012d64 <__multiply+0x144>
 8012d20:	6829      	ldr	r1, [r5, #0]
 8012d22:	f104 0c14 	add.w	ip, r4, #20
 8012d26:	46ae      	mov	lr, r5
 8012d28:	f04f 0a00 	mov.w	sl, #0
 8012d2c:	f8bc b000 	ldrh.w	fp, [ip]
 8012d30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012d34:	fb09 220b 	mla	r2, r9, fp, r2
 8012d38:	4452      	add	r2, sl
 8012d3a:	b289      	uxth	r1, r1
 8012d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d40:	f84e 1b04 	str.w	r1, [lr], #4
 8012d44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012d48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012d4c:	f8be 1000 	ldrh.w	r1, [lr]
 8012d50:	fb09 110a 	mla	r1, r9, sl, r1
 8012d54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012d58:	4567      	cmp	r7, ip
 8012d5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012d5e:	d8e5      	bhi.n	8012d2c <__multiply+0x10c>
 8012d60:	9a01      	ldr	r2, [sp, #4]
 8012d62:	50a9      	str	r1, [r5, r2]
 8012d64:	3504      	adds	r5, #4
 8012d66:	e799      	b.n	8012c9c <__multiply+0x7c>
 8012d68:	3e01      	subs	r6, #1
 8012d6a:	e79b      	b.n	8012ca4 <__multiply+0x84>
 8012d6c:	0814f6a9 	.word	0x0814f6a9
 8012d70:	0814f6ba 	.word	0x0814f6ba

08012d74 <__pow5mult>:
 8012d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d78:	4615      	mov	r5, r2
 8012d7a:	f012 0203 	ands.w	r2, r2, #3
 8012d7e:	4606      	mov	r6, r0
 8012d80:	460f      	mov	r7, r1
 8012d82:	d007      	beq.n	8012d94 <__pow5mult+0x20>
 8012d84:	4c25      	ldr	r4, [pc, #148]	; (8012e1c <__pow5mult+0xa8>)
 8012d86:	3a01      	subs	r2, #1
 8012d88:	2300      	movs	r3, #0
 8012d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d8e:	f7ff fe53 	bl	8012a38 <__multadd>
 8012d92:	4607      	mov	r7, r0
 8012d94:	10ad      	asrs	r5, r5, #2
 8012d96:	d03d      	beq.n	8012e14 <__pow5mult+0xa0>
 8012d98:	69f4      	ldr	r4, [r6, #28]
 8012d9a:	b97c      	cbnz	r4, 8012dbc <__pow5mult+0x48>
 8012d9c:	2010      	movs	r0, #16
 8012d9e:	f7ff fd35 	bl	801280c <malloc>
 8012da2:	4602      	mov	r2, r0
 8012da4:	61f0      	str	r0, [r6, #28]
 8012da6:	b928      	cbnz	r0, 8012db4 <__pow5mult+0x40>
 8012da8:	4b1d      	ldr	r3, [pc, #116]	; (8012e20 <__pow5mult+0xac>)
 8012daa:	481e      	ldr	r0, [pc, #120]	; (8012e24 <__pow5mult+0xb0>)
 8012dac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012db0:	f001 fd36 	bl	8014820 <__assert_func>
 8012db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012db8:	6004      	str	r4, [r0, #0]
 8012dba:	60c4      	str	r4, [r0, #12]
 8012dbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012dc4:	b94c      	cbnz	r4, 8012dda <__pow5mult+0x66>
 8012dc6:	f240 2171 	movw	r1, #625	; 0x271
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f7ff ff12 	bl	8012bf4 <__i2b>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	6003      	str	r3, [r0, #0]
 8012dda:	f04f 0900 	mov.w	r9, #0
 8012dde:	07eb      	lsls	r3, r5, #31
 8012de0:	d50a      	bpl.n	8012df8 <__pow5mult+0x84>
 8012de2:	4639      	mov	r1, r7
 8012de4:	4622      	mov	r2, r4
 8012de6:	4630      	mov	r0, r6
 8012de8:	f7ff ff1a 	bl	8012c20 <__multiply>
 8012dec:	4639      	mov	r1, r7
 8012dee:	4680      	mov	r8, r0
 8012df0:	4630      	mov	r0, r6
 8012df2:	f7ff fdff 	bl	80129f4 <_Bfree>
 8012df6:	4647      	mov	r7, r8
 8012df8:	106d      	asrs	r5, r5, #1
 8012dfa:	d00b      	beq.n	8012e14 <__pow5mult+0xa0>
 8012dfc:	6820      	ldr	r0, [r4, #0]
 8012dfe:	b938      	cbnz	r0, 8012e10 <__pow5mult+0x9c>
 8012e00:	4622      	mov	r2, r4
 8012e02:	4621      	mov	r1, r4
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7ff ff0b 	bl	8012c20 <__multiply>
 8012e0a:	6020      	str	r0, [r4, #0]
 8012e0c:	f8c0 9000 	str.w	r9, [r0]
 8012e10:	4604      	mov	r4, r0
 8012e12:	e7e4      	b.n	8012dde <__pow5mult+0x6a>
 8012e14:	4638      	mov	r0, r7
 8012e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e1a:	bf00      	nop
 8012e1c:	0814f808 	.word	0x0814f808
 8012e20:	0814f63a 	.word	0x0814f63a
 8012e24:	0814f6ba 	.word	0x0814f6ba

08012e28 <__lshift>:
 8012e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e2c:	460c      	mov	r4, r1
 8012e2e:	6849      	ldr	r1, [r1, #4]
 8012e30:	6923      	ldr	r3, [r4, #16]
 8012e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012e36:	68a3      	ldr	r3, [r4, #8]
 8012e38:	4607      	mov	r7, r0
 8012e3a:	4691      	mov	r9, r2
 8012e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012e40:	f108 0601 	add.w	r6, r8, #1
 8012e44:	42b3      	cmp	r3, r6
 8012e46:	db0b      	blt.n	8012e60 <__lshift+0x38>
 8012e48:	4638      	mov	r0, r7
 8012e4a:	f7ff fd93 	bl	8012974 <_Balloc>
 8012e4e:	4605      	mov	r5, r0
 8012e50:	b948      	cbnz	r0, 8012e66 <__lshift+0x3e>
 8012e52:	4602      	mov	r2, r0
 8012e54:	4b28      	ldr	r3, [pc, #160]	; (8012ef8 <__lshift+0xd0>)
 8012e56:	4829      	ldr	r0, [pc, #164]	; (8012efc <__lshift+0xd4>)
 8012e58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012e5c:	f001 fce0 	bl	8014820 <__assert_func>
 8012e60:	3101      	adds	r1, #1
 8012e62:	005b      	lsls	r3, r3, #1
 8012e64:	e7ee      	b.n	8012e44 <__lshift+0x1c>
 8012e66:	2300      	movs	r3, #0
 8012e68:	f100 0114 	add.w	r1, r0, #20
 8012e6c:	f100 0210 	add.w	r2, r0, #16
 8012e70:	4618      	mov	r0, r3
 8012e72:	4553      	cmp	r3, sl
 8012e74:	db33      	blt.n	8012ede <__lshift+0xb6>
 8012e76:	6920      	ldr	r0, [r4, #16]
 8012e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e7c:	f104 0314 	add.w	r3, r4, #20
 8012e80:	f019 091f 	ands.w	r9, r9, #31
 8012e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012e8c:	d02b      	beq.n	8012ee6 <__lshift+0xbe>
 8012e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8012e92:	468a      	mov	sl, r1
 8012e94:	2200      	movs	r2, #0
 8012e96:	6818      	ldr	r0, [r3, #0]
 8012e98:	fa00 f009 	lsl.w	r0, r0, r9
 8012e9c:	4310      	orrs	r0, r2
 8012e9e:	f84a 0b04 	str.w	r0, [sl], #4
 8012ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ea6:	459c      	cmp	ip, r3
 8012ea8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012eac:	d8f3      	bhi.n	8012e96 <__lshift+0x6e>
 8012eae:	ebac 0304 	sub.w	r3, ip, r4
 8012eb2:	3b15      	subs	r3, #21
 8012eb4:	f023 0303 	bic.w	r3, r3, #3
 8012eb8:	3304      	adds	r3, #4
 8012eba:	f104 0015 	add.w	r0, r4, #21
 8012ebe:	4584      	cmp	ip, r0
 8012ec0:	bf38      	it	cc
 8012ec2:	2304      	movcc	r3, #4
 8012ec4:	50ca      	str	r2, [r1, r3]
 8012ec6:	b10a      	cbz	r2, 8012ecc <__lshift+0xa4>
 8012ec8:	f108 0602 	add.w	r6, r8, #2
 8012ecc:	3e01      	subs	r6, #1
 8012ece:	4638      	mov	r0, r7
 8012ed0:	612e      	str	r6, [r5, #16]
 8012ed2:	4621      	mov	r1, r4
 8012ed4:	f7ff fd8e 	bl	80129f4 <_Bfree>
 8012ed8:	4628      	mov	r0, r5
 8012eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ede:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	e7c5      	b.n	8012e72 <__lshift+0x4a>
 8012ee6:	3904      	subs	r1, #4
 8012ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eec:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ef0:	459c      	cmp	ip, r3
 8012ef2:	d8f9      	bhi.n	8012ee8 <__lshift+0xc0>
 8012ef4:	e7ea      	b.n	8012ecc <__lshift+0xa4>
 8012ef6:	bf00      	nop
 8012ef8:	0814f6a9 	.word	0x0814f6a9
 8012efc:	0814f6ba 	.word	0x0814f6ba

08012f00 <__mcmp>:
 8012f00:	b530      	push	{r4, r5, lr}
 8012f02:	6902      	ldr	r2, [r0, #16]
 8012f04:	690c      	ldr	r4, [r1, #16]
 8012f06:	1b12      	subs	r2, r2, r4
 8012f08:	d10e      	bne.n	8012f28 <__mcmp+0x28>
 8012f0a:	f100 0314 	add.w	r3, r0, #20
 8012f0e:	3114      	adds	r1, #20
 8012f10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012f20:	42a5      	cmp	r5, r4
 8012f22:	d003      	beq.n	8012f2c <__mcmp+0x2c>
 8012f24:	d305      	bcc.n	8012f32 <__mcmp+0x32>
 8012f26:	2201      	movs	r2, #1
 8012f28:	4610      	mov	r0, r2
 8012f2a:	bd30      	pop	{r4, r5, pc}
 8012f2c:	4283      	cmp	r3, r0
 8012f2e:	d3f3      	bcc.n	8012f18 <__mcmp+0x18>
 8012f30:	e7fa      	b.n	8012f28 <__mcmp+0x28>
 8012f32:	f04f 32ff 	mov.w	r2, #4294967295
 8012f36:	e7f7      	b.n	8012f28 <__mcmp+0x28>

08012f38 <__mdiff>:
 8012f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3c:	460c      	mov	r4, r1
 8012f3e:	4606      	mov	r6, r0
 8012f40:	4611      	mov	r1, r2
 8012f42:	4620      	mov	r0, r4
 8012f44:	4690      	mov	r8, r2
 8012f46:	f7ff ffdb 	bl	8012f00 <__mcmp>
 8012f4a:	1e05      	subs	r5, r0, #0
 8012f4c:	d110      	bne.n	8012f70 <__mdiff+0x38>
 8012f4e:	4629      	mov	r1, r5
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7ff fd0f 	bl	8012974 <_Balloc>
 8012f56:	b930      	cbnz	r0, 8012f66 <__mdiff+0x2e>
 8012f58:	4b3a      	ldr	r3, [pc, #232]	; (8013044 <__mdiff+0x10c>)
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	f240 2137 	movw	r1, #567	; 0x237
 8012f60:	4839      	ldr	r0, [pc, #228]	; (8013048 <__mdiff+0x110>)
 8012f62:	f001 fc5d 	bl	8014820 <__assert_func>
 8012f66:	2301      	movs	r3, #1
 8012f68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f70:	bfa4      	itt	ge
 8012f72:	4643      	movge	r3, r8
 8012f74:	46a0      	movge	r8, r4
 8012f76:	4630      	mov	r0, r6
 8012f78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012f7c:	bfa6      	itte	ge
 8012f7e:	461c      	movge	r4, r3
 8012f80:	2500      	movge	r5, #0
 8012f82:	2501      	movlt	r5, #1
 8012f84:	f7ff fcf6 	bl	8012974 <_Balloc>
 8012f88:	b920      	cbnz	r0, 8012f94 <__mdiff+0x5c>
 8012f8a:	4b2e      	ldr	r3, [pc, #184]	; (8013044 <__mdiff+0x10c>)
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	f240 2145 	movw	r1, #581	; 0x245
 8012f92:	e7e5      	b.n	8012f60 <__mdiff+0x28>
 8012f94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f98:	6926      	ldr	r6, [r4, #16]
 8012f9a:	60c5      	str	r5, [r0, #12]
 8012f9c:	f104 0914 	add.w	r9, r4, #20
 8012fa0:	f108 0514 	add.w	r5, r8, #20
 8012fa4:	f100 0e14 	add.w	lr, r0, #20
 8012fa8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012fac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012fb0:	f108 0210 	add.w	r2, r8, #16
 8012fb4:	46f2      	mov	sl, lr
 8012fb6:	2100      	movs	r1, #0
 8012fb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012fbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012fc0:	fa11 f88b 	uxtah	r8, r1, fp
 8012fc4:	b299      	uxth	r1, r3
 8012fc6:	0c1b      	lsrs	r3, r3, #16
 8012fc8:	eba8 0801 	sub.w	r8, r8, r1
 8012fcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012fd0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012fd4:	fa1f f888 	uxth.w	r8, r8
 8012fd8:	1419      	asrs	r1, r3, #16
 8012fda:	454e      	cmp	r6, r9
 8012fdc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012fe0:	f84a 3b04 	str.w	r3, [sl], #4
 8012fe4:	d8e8      	bhi.n	8012fb8 <__mdiff+0x80>
 8012fe6:	1b33      	subs	r3, r6, r4
 8012fe8:	3b15      	subs	r3, #21
 8012fea:	f023 0303 	bic.w	r3, r3, #3
 8012fee:	3304      	adds	r3, #4
 8012ff0:	3415      	adds	r4, #21
 8012ff2:	42a6      	cmp	r6, r4
 8012ff4:	bf38      	it	cc
 8012ff6:	2304      	movcc	r3, #4
 8012ff8:	441d      	add	r5, r3
 8012ffa:	4473      	add	r3, lr
 8012ffc:	469e      	mov	lr, r3
 8012ffe:	462e      	mov	r6, r5
 8013000:	4566      	cmp	r6, ip
 8013002:	d30e      	bcc.n	8013022 <__mdiff+0xea>
 8013004:	f10c 0203 	add.w	r2, ip, #3
 8013008:	1b52      	subs	r2, r2, r5
 801300a:	f022 0203 	bic.w	r2, r2, #3
 801300e:	3d03      	subs	r5, #3
 8013010:	45ac      	cmp	ip, r5
 8013012:	bf38      	it	cc
 8013014:	2200      	movcc	r2, #0
 8013016:	4413      	add	r3, r2
 8013018:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801301c:	b17a      	cbz	r2, 801303e <__mdiff+0x106>
 801301e:	6107      	str	r7, [r0, #16]
 8013020:	e7a4      	b.n	8012f6c <__mdiff+0x34>
 8013022:	f856 8b04 	ldr.w	r8, [r6], #4
 8013026:	fa11 f288 	uxtah	r2, r1, r8
 801302a:	1414      	asrs	r4, r2, #16
 801302c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013030:	b292      	uxth	r2, r2
 8013032:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013036:	f84e 2b04 	str.w	r2, [lr], #4
 801303a:	1421      	asrs	r1, r4, #16
 801303c:	e7e0      	b.n	8013000 <__mdiff+0xc8>
 801303e:	3f01      	subs	r7, #1
 8013040:	e7ea      	b.n	8013018 <__mdiff+0xe0>
 8013042:	bf00      	nop
 8013044:	0814f6a9 	.word	0x0814f6a9
 8013048:	0814f6ba 	.word	0x0814f6ba

0801304c <__ulp>:
 801304c:	b082      	sub	sp, #8
 801304e:	ed8d 0b00 	vstr	d0, [sp]
 8013052:	9a01      	ldr	r2, [sp, #4]
 8013054:	4b0f      	ldr	r3, [pc, #60]	; (8013094 <__ulp+0x48>)
 8013056:	4013      	ands	r3, r2
 8013058:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801305c:	2b00      	cmp	r3, #0
 801305e:	dc08      	bgt.n	8013072 <__ulp+0x26>
 8013060:	425b      	negs	r3, r3
 8013062:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8013066:	ea4f 5223 	mov.w	r2, r3, asr #20
 801306a:	da04      	bge.n	8013076 <__ulp+0x2a>
 801306c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013070:	4113      	asrs	r3, r2
 8013072:	2200      	movs	r2, #0
 8013074:	e008      	b.n	8013088 <__ulp+0x3c>
 8013076:	f1a2 0314 	sub.w	r3, r2, #20
 801307a:	2b1e      	cmp	r3, #30
 801307c:	bfda      	itte	le
 801307e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013082:	40da      	lsrle	r2, r3
 8013084:	2201      	movgt	r2, #1
 8013086:	2300      	movs	r3, #0
 8013088:	4619      	mov	r1, r3
 801308a:	4610      	mov	r0, r2
 801308c:	ec41 0b10 	vmov	d0, r0, r1
 8013090:	b002      	add	sp, #8
 8013092:	4770      	bx	lr
 8013094:	7ff00000 	.word	0x7ff00000

08013098 <__b2d>:
 8013098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801309c:	6906      	ldr	r6, [r0, #16]
 801309e:	f100 0814 	add.w	r8, r0, #20
 80130a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80130a6:	1f37      	subs	r7, r6, #4
 80130a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80130ac:	4610      	mov	r0, r2
 80130ae:	f7ff fd53 	bl	8012b58 <__hi0bits>
 80130b2:	f1c0 0320 	rsb	r3, r0, #32
 80130b6:	280a      	cmp	r0, #10
 80130b8:	600b      	str	r3, [r1, #0]
 80130ba:	491b      	ldr	r1, [pc, #108]	; (8013128 <__b2d+0x90>)
 80130bc:	dc15      	bgt.n	80130ea <__b2d+0x52>
 80130be:	f1c0 0c0b 	rsb	ip, r0, #11
 80130c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80130c6:	45b8      	cmp	r8, r7
 80130c8:	ea43 0501 	orr.w	r5, r3, r1
 80130cc:	bf34      	ite	cc
 80130ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80130d2:	2300      	movcs	r3, #0
 80130d4:	3015      	adds	r0, #21
 80130d6:	fa02 f000 	lsl.w	r0, r2, r0
 80130da:	fa23 f30c 	lsr.w	r3, r3, ip
 80130de:	4303      	orrs	r3, r0
 80130e0:	461c      	mov	r4, r3
 80130e2:	ec45 4b10 	vmov	d0, r4, r5
 80130e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ea:	45b8      	cmp	r8, r7
 80130ec:	bf3a      	itte	cc
 80130ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80130f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80130f6:	2300      	movcs	r3, #0
 80130f8:	380b      	subs	r0, #11
 80130fa:	d012      	beq.n	8013122 <__b2d+0x8a>
 80130fc:	f1c0 0120 	rsb	r1, r0, #32
 8013100:	fa23 f401 	lsr.w	r4, r3, r1
 8013104:	4082      	lsls	r2, r0
 8013106:	4322      	orrs	r2, r4
 8013108:	4547      	cmp	r7, r8
 801310a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801310e:	bf8c      	ite	hi
 8013110:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013114:	2200      	movls	r2, #0
 8013116:	4083      	lsls	r3, r0
 8013118:	40ca      	lsrs	r2, r1
 801311a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801311e:	4313      	orrs	r3, r2
 8013120:	e7de      	b.n	80130e0 <__b2d+0x48>
 8013122:	ea42 0501 	orr.w	r5, r2, r1
 8013126:	e7db      	b.n	80130e0 <__b2d+0x48>
 8013128:	3ff00000 	.word	0x3ff00000

0801312c <__d2b>:
 801312c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013130:	460f      	mov	r7, r1
 8013132:	2101      	movs	r1, #1
 8013134:	ec59 8b10 	vmov	r8, r9, d0
 8013138:	4616      	mov	r6, r2
 801313a:	f7ff fc1b 	bl	8012974 <_Balloc>
 801313e:	4604      	mov	r4, r0
 8013140:	b930      	cbnz	r0, 8013150 <__d2b+0x24>
 8013142:	4602      	mov	r2, r0
 8013144:	4b24      	ldr	r3, [pc, #144]	; (80131d8 <__d2b+0xac>)
 8013146:	4825      	ldr	r0, [pc, #148]	; (80131dc <__d2b+0xb0>)
 8013148:	f240 310f 	movw	r1, #783	; 0x30f
 801314c:	f001 fb68 	bl	8014820 <__assert_func>
 8013150:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013154:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013158:	bb2d      	cbnz	r5, 80131a6 <__d2b+0x7a>
 801315a:	9301      	str	r3, [sp, #4]
 801315c:	f1b8 0300 	subs.w	r3, r8, #0
 8013160:	d026      	beq.n	80131b0 <__d2b+0x84>
 8013162:	4668      	mov	r0, sp
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	f7ff fd17 	bl	8012b98 <__lo0bits>
 801316a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801316e:	b1e8      	cbz	r0, 80131ac <__d2b+0x80>
 8013170:	f1c0 0320 	rsb	r3, r0, #32
 8013174:	fa02 f303 	lsl.w	r3, r2, r3
 8013178:	430b      	orrs	r3, r1
 801317a:	40c2      	lsrs	r2, r0
 801317c:	6163      	str	r3, [r4, #20]
 801317e:	9201      	str	r2, [sp, #4]
 8013180:	9b01      	ldr	r3, [sp, #4]
 8013182:	61a3      	str	r3, [r4, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	bf14      	ite	ne
 8013188:	2202      	movne	r2, #2
 801318a:	2201      	moveq	r2, #1
 801318c:	6122      	str	r2, [r4, #16]
 801318e:	b1bd      	cbz	r5, 80131c0 <__d2b+0x94>
 8013190:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013194:	4405      	add	r5, r0
 8013196:	603d      	str	r5, [r7, #0]
 8013198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801319c:	6030      	str	r0, [r6, #0]
 801319e:	4620      	mov	r0, r4
 80131a0:	b003      	add	sp, #12
 80131a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80131aa:	e7d6      	b.n	801315a <__d2b+0x2e>
 80131ac:	6161      	str	r1, [r4, #20]
 80131ae:	e7e7      	b.n	8013180 <__d2b+0x54>
 80131b0:	a801      	add	r0, sp, #4
 80131b2:	f7ff fcf1 	bl	8012b98 <__lo0bits>
 80131b6:	9b01      	ldr	r3, [sp, #4]
 80131b8:	6163      	str	r3, [r4, #20]
 80131ba:	3020      	adds	r0, #32
 80131bc:	2201      	movs	r2, #1
 80131be:	e7e5      	b.n	801318c <__d2b+0x60>
 80131c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80131c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80131c8:	6038      	str	r0, [r7, #0]
 80131ca:	6918      	ldr	r0, [r3, #16]
 80131cc:	f7ff fcc4 	bl	8012b58 <__hi0bits>
 80131d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80131d4:	e7e2      	b.n	801319c <__d2b+0x70>
 80131d6:	bf00      	nop
 80131d8:	0814f6a9 	.word	0x0814f6a9
 80131dc:	0814f6ba 	.word	0x0814f6ba

080131e0 <__ratio>:
 80131e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e4:	4688      	mov	r8, r1
 80131e6:	4669      	mov	r1, sp
 80131e8:	4681      	mov	r9, r0
 80131ea:	f7ff ff55 	bl	8013098 <__b2d>
 80131ee:	a901      	add	r1, sp, #4
 80131f0:	4640      	mov	r0, r8
 80131f2:	ec55 4b10 	vmov	r4, r5, d0
 80131f6:	f7ff ff4f 	bl	8013098 <__b2d>
 80131fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80131fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013202:	eba3 0c02 	sub.w	ip, r3, r2
 8013206:	e9dd 3200 	ldrd	r3, r2, [sp]
 801320a:	1a9b      	subs	r3, r3, r2
 801320c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013210:	ec51 0b10 	vmov	r0, r1, d0
 8013214:	2b00      	cmp	r3, #0
 8013216:	bfd6      	itet	le
 8013218:	460a      	movle	r2, r1
 801321a:	462a      	movgt	r2, r5
 801321c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013220:	468b      	mov	fp, r1
 8013222:	462f      	mov	r7, r5
 8013224:	bfd4      	ite	le
 8013226:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801322a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801322e:	4620      	mov	r0, r4
 8013230:	ee10 2a10 	vmov	r2, s0
 8013234:	465b      	mov	r3, fp
 8013236:	4639      	mov	r1, r7
 8013238:	f7f3 fb7e 	bl	8006938 <__aeabi_ddiv>
 801323c:	ec41 0b10 	vmov	d0, r0, r1
 8013240:	b003      	add	sp, #12
 8013242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013246 <__copybits>:
 8013246:	3901      	subs	r1, #1
 8013248:	b570      	push	{r4, r5, r6, lr}
 801324a:	1149      	asrs	r1, r1, #5
 801324c:	6914      	ldr	r4, [r2, #16]
 801324e:	3101      	adds	r1, #1
 8013250:	f102 0314 	add.w	r3, r2, #20
 8013254:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013258:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801325c:	1f05      	subs	r5, r0, #4
 801325e:	42a3      	cmp	r3, r4
 8013260:	d30c      	bcc.n	801327c <__copybits+0x36>
 8013262:	1aa3      	subs	r3, r4, r2
 8013264:	3b11      	subs	r3, #17
 8013266:	f023 0303 	bic.w	r3, r3, #3
 801326a:	3211      	adds	r2, #17
 801326c:	42a2      	cmp	r2, r4
 801326e:	bf88      	it	hi
 8013270:	2300      	movhi	r3, #0
 8013272:	4418      	add	r0, r3
 8013274:	2300      	movs	r3, #0
 8013276:	4288      	cmp	r0, r1
 8013278:	d305      	bcc.n	8013286 <__copybits+0x40>
 801327a:	bd70      	pop	{r4, r5, r6, pc}
 801327c:	f853 6b04 	ldr.w	r6, [r3], #4
 8013280:	f845 6f04 	str.w	r6, [r5, #4]!
 8013284:	e7eb      	b.n	801325e <__copybits+0x18>
 8013286:	f840 3b04 	str.w	r3, [r0], #4
 801328a:	e7f4      	b.n	8013276 <__copybits+0x30>

0801328c <__any_on>:
 801328c:	f100 0214 	add.w	r2, r0, #20
 8013290:	6900      	ldr	r0, [r0, #16]
 8013292:	114b      	asrs	r3, r1, #5
 8013294:	4298      	cmp	r0, r3
 8013296:	b510      	push	{r4, lr}
 8013298:	db11      	blt.n	80132be <__any_on+0x32>
 801329a:	dd0a      	ble.n	80132b2 <__any_on+0x26>
 801329c:	f011 011f 	ands.w	r1, r1, #31
 80132a0:	d007      	beq.n	80132b2 <__any_on+0x26>
 80132a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80132a6:	fa24 f001 	lsr.w	r0, r4, r1
 80132aa:	fa00 f101 	lsl.w	r1, r0, r1
 80132ae:	428c      	cmp	r4, r1
 80132b0:	d10b      	bne.n	80132ca <__any_on+0x3e>
 80132b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d803      	bhi.n	80132c2 <__any_on+0x36>
 80132ba:	2000      	movs	r0, #0
 80132bc:	bd10      	pop	{r4, pc}
 80132be:	4603      	mov	r3, r0
 80132c0:	e7f7      	b.n	80132b2 <__any_on+0x26>
 80132c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80132c6:	2900      	cmp	r1, #0
 80132c8:	d0f5      	beq.n	80132b6 <__any_on+0x2a>
 80132ca:	2001      	movs	r0, #1
 80132cc:	e7f6      	b.n	80132bc <__any_on+0x30>

080132ce <sulp>:
 80132ce:	b570      	push	{r4, r5, r6, lr}
 80132d0:	4604      	mov	r4, r0
 80132d2:	460d      	mov	r5, r1
 80132d4:	ec45 4b10 	vmov	d0, r4, r5
 80132d8:	4616      	mov	r6, r2
 80132da:	f7ff feb7 	bl	801304c <__ulp>
 80132de:	ec51 0b10 	vmov	r0, r1, d0
 80132e2:	b17e      	cbz	r6, 8013304 <sulp+0x36>
 80132e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	dd09      	ble.n	8013304 <sulp+0x36>
 80132f0:	051b      	lsls	r3, r3, #20
 80132f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80132f6:	2400      	movs	r4, #0
 80132f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80132fc:	4622      	mov	r2, r4
 80132fe:	462b      	mov	r3, r5
 8013300:	f7f3 f9f0 	bl	80066e4 <__aeabi_dmul>
 8013304:	bd70      	pop	{r4, r5, r6, pc}
	...

08013308 <_strtod_l>:
 8013308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801330c:	ed2d 8b02 	vpush	{d8}
 8013310:	b09b      	sub	sp, #108	; 0x6c
 8013312:	4604      	mov	r4, r0
 8013314:	9213      	str	r2, [sp, #76]	; 0x4c
 8013316:	2200      	movs	r2, #0
 8013318:	9216      	str	r2, [sp, #88]	; 0x58
 801331a:	460d      	mov	r5, r1
 801331c:	f04f 0800 	mov.w	r8, #0
 8013320:	f04f 0900 	mov.w	r9, #0
 8013324:	460a      	mov	r2, r1
 8013326:	9215      	str	r2, [sp, #84]	; 0x54
 8013328:	7811      	ldrb	r1, [r2, #0]
 801332a:	292b      	cmp	r1, #43	; 0x2b
 801332c:	d04c      	beq.n	80133c8 <_strtod_l+0xc0>
 801332e:	d83a      	bhi.n	80133a6 <_strtod_l+0x9e>
 8013330:	290d      	cmp	r1, #13
 8013332:	d834      	bhi.n	801339e <_strtod_l+0x96>
 8013334:	2908      	cmp	r1, #8
 8013336:	d834      	bhi.n	80133a2 <_strtod_l+0x9a>
 8013338:	2900      	cmp	r1, #0
 801333a:	d03d      	beq.n	80133b8 <_strtod_l+0xb0>
 801333c:	2200      	movs	r2, #0
 801333e:	920a      	str	r2, [sp, #40]	; 0x28
 8013340:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013342:	7832      	ldrb	r2, [r6, #0]
 8013344:	2a30      	cmp	r2, #48	; 0x30
 8013346:	f040 80b4 	bne.w	80134b2 <_strtod_l+0x1aa>
 801334a:	7872      	ldrb	r2, [r6, #1]
 801334c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013350:	2a58      	cmp	r2, #88	; 0x58
 8013352:	d170      	bne.n	8013436 <_strtod_l+0x12e>
 8013354:	9302      	str	r3, [sp, #8]
 8013356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	ab16      	add	r3, sp, #88	; 0x58
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	4a8e      	ldr	r2, [pc, #568]	; (8013598 <_strtod_l+0x290>)
 8013360:	ab17      	add	r3, sp, #92	; 0x5c
 8013362:	a915      	add	r1, sp, #84	; 0x54
 8013364:	4620      	mov	r0, r4
 8013366:	f001 faf7 	bl	8014958 <__gethex>
 801336a:	f010 070f 	ands.w	r7, r0, #15
 801336e:	4605      	mov	r5, r0
 8013370:	d005      	beq.n	801337e <_strtod_l+0x76>
 8013372:	2f06      	cmp	r7, #6
 8013374:	d12a      	bne.n	80133cc <_strtod_l+0xc4>
 8013376:	3601      	adds	r6, #1
 8013378:	2300      	movs	r3, #0
 801337a:	9615      	str	r6, [sp, #84]	; 0x54
 801337c:	930a      	str	r3, [sp, #40]	; 0x28
 801337e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013380:	2b00      	cmp	r3, #0
 8013382:	f040 857f 	bne.w	8013e84 <_strtod_l+0xb7c>
 8013386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013388:	b1db      	cbz	r3, 80133c2 <_strtod_l+0xba>
 801338a:	4642      	mov	r2, r8
 801338c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013390:	ec43 2b10 	vmov	d0, r2, r3
 8013394:	b01b      	add	sp, #108	; 0x6c
 8013396:	ecbd 8b02 	vpop	{d8}
 801339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339e:	2920      	cmp	r1, #32
 80133a0:	d1cc      	bne.n	801333c <_strtod_l+0x34>
 80133a2:	3201      	adds	r2, #1
 80133a4:	e7bf      	b.n	8013326 <_strtod_l+0x1e>
 80133a6:	292d      	cmp	r1, #45	; 0x2d
 80133a8:	d1c8      	bne.n	801333c <_strtod_l+0x34>
 80133aa:	2101      	movs	r1, #1
 80133ac:	910a      	str	r1, [sp, #40]	; 0x28
 80133ae:	1c51      	adds	r1, r2, #1
 80133b0:	9115      	str	r1, [sp, #84]	; 0x54
 80133b2:	7852      	ldrb	r2, [r2, #1]
 80133b4:	2a00      	cmp	r2, #0
 80133b6:	d1c3      	bne.n	8013340 <_strtod_l+0x38>
 80133b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133ba:	9515      	str	r5, [sp, #84]	; 0x54
 80133bc:	2b00      	cmp	r3, #0
 80133be:	f040 855f 	bne.w	8013e80 <_strtod_l+0xb78>
 80133c2:	4642      	mov	r2, r8
 80133c4:	464b      	mov	r3, r9
 80133c6:	e7e3      	b.n	8013390 <_strtod_l+0x88>
 80133c8:	2100      	movs	r1, #0
 80133ca:	e7ef      	b.n	80133ac <_strtod_l+0xa4>
 80133cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80133ce:	b13a      	cbz	r2, 80133e0 <_strtod_l+0xd8>
 80133d0:	2135      	movs	r1, #53	; 0x35
 80133d2:	a818      	add	r0, sp, #96	; 0x60
 80133d4:	f7ff ff37 	bl	8013246 <__copybits>
 80133d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80133da:	4620      	mov	r0, r4
 80133dc:	f7ff fb0a 	bl	80129f4 <_Bfree>
 80133e0:	3f01      	subs	r7, #1
 80133e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80133e4:	2f04      	cmp	r7, #4
 80133e6:	d806      	bhi.n	80133f6 <_strtod_l+0xee>
 80133e8:	e8df f007 	tbb	[pc, r7]
 80133ec:	201d0314 	.word	0x201d0314
 80133f0:	14          	.byte	0x14
 80133f1:	00          	.byte	0x00
 80133f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80133f6:	05e9      	lsls	r1, r5, #23
 80133f8:	bf48      	it	mi
 80133fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80133fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013402:	0d1b      	lsrs	r3, r3, #20
 8013404:	051b      	lsls	r3, r3, #20
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1b9      	bne.n	801337e <_strtod_l+0x76>
 801340a:	f7fe faf1 	bl	80119f0 <__errno>
 801340e:	2322      	movs	r3, #34	; 0x22
 8013410:	6003      	str	r3, [r0, #0]
 8013412:	e7b4      	b.n	801337e <_strtod_l+0x76>
 8013414:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013418:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801341c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013420:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013424:	e7e7      	b.n	80133f6 <_strtod_l+0xee>
 8013426:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80135a0 <_strtod_l+0x298>
 801342a:	e7e4      	b.n	80133f6 <_strtod_l+0xee>
 801342c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013430:	f04f 38ff 	mov.w	r8, #4294967295
 8013434:	e7df      	b.n	80133f6 <_strtod_l+0xee>
 8013436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013438:	1c5a      	adds	r2, r3, #1
 801343a:	9215      	str	r2, [sp, #84]	; 0x54
 801343c:	785b      	ldrb	r3, [r3, #1]
 801343e:	2b30      	cmp	r3, #48	; 0x30
 8013440:	d0f9      	beq.n	8013436 <_strtod_l+0x12e>
 8013442:	2b00      	cmp	r3, #0
 8013444:	d09b      	beq.n	801337e <_strtod_l+0x76>
 8013446:	2301      	movs	r3, #1
 8013448:	f04f 0a00 	mov.w	sl, #0
 801344c:	9304      	str	r3, [sp, #16]
 801344e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013450:	930b      	str	r3, [sp, #44]	; 0x2c
 8013452:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013456:	46d3      	mov	fp, sl
 8013458:	220a      	movs	r2, #10
 801345a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801345c:	7806      	ldrb	r6, [r0, #0]
 801345e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013462:	b2d9      	uxtb	r1, r3
 8013464:	2909      	cmp	r1, #9
 8013466:	d926      	bls.n	80134b6 <_strtod_l+0x1ae>
 8013468:	494c      	ldr	r1, [pc, #304]	; (801359c <_strtod_l+0x294>)
 801346a:	2201      	movs	r2, #1
 801346c:	f001 f98c 	bl	8014788 <strncmp>
 8013470:	2800      	cmp	r0, #0
 8013472:	d030      	beq.n	80134d6 <_strtod_l+0x1ce>
 8013474:	2000      	movs	r0, #0
 8013476:	4632      	mov	r2, r6
 8013478:	9005      	str	r0, [sp, #20]
 801347a:	465e      	mov	r6, fp
 801347c:	4603      	mov	r3, r0
 801347e:	2a65      	cmp	r2, #101	; 0x65
 8013480:	d001      	beq.n	8013486 <_strtod_l+0x17e>
 8013482:	2a45      	cmp	r2, #69	; 0x45
 8013484:	d113      	bne.n	80134ae <_strtod_l+0x1a6>
 8013486:	b91e      	cbnz	r6, 8013490 <_strtod_l+0x188>
 8013488:	9a04      	ldr	r2, [sp, #16]
 801348a:	4302      	orrs	r2, r0
 801348c:	d094      	beq.n	80133b8 <_strtod_l+0xb0>
 801348e:	2600      	movs	r6, #0
 8013490:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013492:	1c6a      	adds	r2, r5, #1
 8013494:	9215      	str	r2, [sp, #84]	; 0x54
 8013496:	786a      	ldrb	r2, [r5, #1]
 8013498:	2a2b      	cmp	r2, #43	; 0x2b
 801349a:	d074      	beq.n	8013586 <_strtod_l+0x27e>
 801349c:	2a2d      	cmp	r2, #45	; 0x2d
 801349e:	d078      	beq.n	8013592 <_strtod_l+0x28a>
 80134a0:	f04f 0c00 	mov.w	ip, #0
 80134a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80134a8:	2909      	cmp	r1, #9
 80134aa:	d97f      	bls.n	80135ac <_strtod_l+0x2a4>
 80134ac:	9515      	str	r5, [sp, #84]	; 0x54
 80134ae:	2700      	movs	r7, #0
 80134b0:	e09e      	b.n	80135f0 <_strtod_l+0x2e8>
 80134b2:	2300      	movs	r3, #0
 80134b4:	e7c8      	b.n	8013448 <_strtod_l+0x140>
 80134b6:	f1bb 0f08 	cmp.w	fp, #8
 80134ba:	bfd8      	it	le
 80134bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80134be:	f100 0001 	add.w	r0, r0, #1
 80134c2:	bfda      	itte	le
 80134c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80134c8:	9309      	strle	r3, [sp, #36]	; 0x24
 80134ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80134ce:	f10b 0b01 	add.w	fp, fp, #1
 80134d2:	9015      	str	r0, [sp, #84]	; 0x54
 80134d4:	e7c1      	b.n	801345a <_strtod_l+0x152>
 80134d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134d8:	1c5a      	adds	r2, r3, #1
 80134da:	9215      	str	r2, [sp, #84]	; 0x54
 80134dc:	785a      	ldrb	r2, [r3, #1]
 80134de:	f1bb 0f00 	cmp.w	fp, #0
 80134e2:	d037      	beq.n	8013554 <_strtod_l+0x24c>
 80134e4:	9005      	str	r0, [sp, #20]
 80134e6:	465e      	mov	r6, fp
 80134e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80134ec:	2b09      	cmp	r3, #9
 80134ee:	d912      	bls.n	8013516 <_strtod_l+0x20e>
 80134f0:	2301      	movs	r3, #1
 80134f2:	e7c4      	b.n	801347e <_strtod_l+0x176>
 80134f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	9215      	str	r2, [sp, #84]	; 0x54
 80134fa:	785a      	ldrb	r2, [r3, #1]
 80134fc:	3001      	adds	r0, #1
 80134fe:	2a30      	cmp	r2, #48	; 0x30
 8013500:	d0f8      	beq.n	80134f4 <_strtod_l+0x1ec>
 8013502:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013506:	2b08      	cmp	r3, #8
 8013508:	f200 84c1 	bhi.w	8013e8e <_strtod_l+0xb86>
 801350c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801350e:	9005      	str	r0, [sp, #20]
 8013510:	2000      	movs	r0, #0
 8013512:	930b      	str	r3, [sp, #44]	; 0x2c
 8013514:	4606      	mov	r6, r0
 8013516:	3a30      	subs	r2, #48	; 0x30
 8013518:	f100 0301 	add.w	r3, r0, #1
 801351c:	d014      	beq.n	8013548 <_strtod_l+0x240>
 801351e:	9905      	ldr	r1, [sp, #20]
 8013520:	4419      	add	r1, r3
 8013522:	9105      	str	r1, [sp, #20]
 8013524:	4633      	mov	r3, r6
 8013526:	eb00 0c06 	add.w	ip, r0, r6
 801352a:	210a      	movs	r1, #10
 801352c:	4563      	cmp	r3, ip
 801352e:	d113      	bne.n	8013558 <_strtod_l+0x250>
 8013530:	1833      	adds	r3, r6, r0
 8013532:	2b08      	cmp	r3, #8
 8013534:	f106 0601 	add.w	r6, r6, #1
 8013538:	4406      	add	r6, r0
 801353a:	dc1a      	bgt.n	8013572 <_strtod_l+0x26a>
 801353c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801353e:	230a      	movs	r3, #10
 8013540:	fb03 2301 	mla	r3, r3, r1, r2
 8013544:	9309      	str	r3, [sp, #36]	; 0x24
 8013546:	2300      	movs	r3, #0
 8013548:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801354a:	1c51      	adds	r1, r2, #1
 801354c:	9115      	str	r1, [sp, #84]	; 0x54
 801354e:	7852      	ldrb	r2, [r2, #1]
 8013550:	4618      	mov	r0, r3
 8013552:	e7c9      	b.n	80134e8 <_strtod_l+0x1e0>
 8013554:	4658      	mov	r0, fp
 8013556:	e7d2      	b.n	80134fe <_strtod_l+0x1f6>
 8013558:	2b08      	cmp	r3, #8
 801355a:	f103 0301 	add.w	r3, r3, #1
 801355e:	dc03      	bgt.n	8013568 <_strtod_l+0x260>
 8013560:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013562:	434f      	muls	r7, r1
 8013564:	9709      	str	r7, [sp, #36]	; 0x24
 8013566:	e7e1      	b.n	801352c <_strtod_l+0x224>
 8013568:	2b10      	cmp	r3, #16
 801356a:	bfd8      	it	le
 801356c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013570:	e7dc      	b.n	801352c <_strtod_l+0x224>
 8013572:	2e10      	cmp	r6, #16
 8013574:	bfdc      	itt	le
 8013576:	230a      	movle	r3, #10
 8013578:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801357c:	e7e3      	b.n	8013546 <_strtod_l+0x23e>
 801357e:	2300      	movs	r3, #0
 8013580:	9305      	str	r3, [sp, #20]
 8013582:	2301      	movs	r3, #1
 8013584:	e780      	b.n	8013488 <_strtod_l+0x180>
 8013586:	f04f 0c00 	mov.w	ip, #0
 801358a:	1caa      	adds	r2, r5, #2
 801358c:	9215      	str	r2, [sp, #84]	; 0x54
 801358e:	78aa      	ldrb	r2, [r5, #2]
 8013590:	e788      	b.n	80134a4 <_strtod_l+0x19c>
 8013592:	f04f 0c01 	mov.w	ip, #1
 8013596:	e7f8      	b.n	801358a <_strtod_l+0x282>
 8013598:	0814f818 	.word	0x0814f818
 801359c:	0814f814 	.word	0x0814f814
 80135a0:	7ff00000 	.word	0x7ff00000
 80135a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135a6:	1c51      	adds	r1, r2, #1
 80135a8:	9115      	str	r1, [sp, #84]	; 0x54
 80135aa:	7852      	ldrb	r2, [r2, #1]
 80135ac:	2a30      	cmp	r2, #48	; 0x30
 80135ae:	d0f9      	beq.n	80135a4 <_strtod_l+0x29c>
 80135b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80135b4:	2908      	cmp	r1, #8
 80135b6:	f63f af7a 	bhi.w	80134ae <_strtod_l+0x1a6>
 80135ba:	3a30      	subs	r2, #48	; 0x30
 80135bc:	9208      	str	r2, [sp, #32]
 80135be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135c0:	920c      	str	r2, [sp, #48]	; 0x30
 80135c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135c4:	1c57      	adds	r7, r2, #1
 80135c6:	9715      	str	r7, [sp, #84]	; 0x54
 80135c8:	7852      	ldrb	r2, [r2, #1]
 80135ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80135ce:	f1be 0f09 	cmp.w	lr, #9
 80135d2:	d938      	bls.n	8013646 <_strtod_l+0x33e>
 80135d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80135d6:	1a7f      	subs	r7, r7, r1
 80135d8:	2f08      	cmp	r7, #8
 80135da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80135de:	dc03      	bgt.n	80135e8 <_strtod_l+0x2e0>
 80135e0:	9908      	ldr	r1, [sp, #32]
 80135e2:	428f      	cmp	r7, r1
 80135e4:	bfa8      	it	ge
 80135e6:	460f      	movge	r7, r1
 80135e8:	f1bc 0f00 	cmp.w	ip, #0
 80135ec:	d000      	beq.n	80135f0 <_strtod_l+0x2e8>
 80135ee:	427f      	negs	r7, r7
 80135f0:	2e00      	cmp	r6, #0
 80135f2:	d14f      	bne.n	8013694 <_strtod_l+0x38c>
 80135f4:	9904      	ldr	r1, [sp, #16]
 80135f6:	4301      	orrs	r1, r0
 80135f8:	f47f aec1 	bne.w	801337e <_strtod_l+0x76>
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f47f aedb 	bne.w	80133b8 <_strtod_l+0xb0>
 8013602:	2a69      	cmp	r2, #105	; 0x69
 8013604:	d029      	beq.n	801365a <_strtod_l+0x352>
 8013606:	dc26      	bgt.n	8013656 <_strtod_l+0x34e>
 8013608:	2a49      	cmp	r2, #73	; 0x49
 801360a:	d026      	beq.n	801365a <_strtod_l+0x352>
 801360c:	2a4e      	cmp	r2, #78	; 0x4e
 801360e:	f47f aed3 	bne.w	80133b8 <_strtod_l+0xb0>
 8013612:	499b      	ldr	r1, [pc, #620]	; (8013880 <_strtod_l+0x578>)
 8013614:	a815      	add	r0, sp, #84	; 0x54
 8013616:	f001 fbdf 	bl	8014dd8 <__match>
 801361a:	2800      	cmp	r0, #0
 801361c:	f43f aecc 	beq.w	80133b8 <_strtod_l+0xb0>
 8013620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b28      	cmp	r3, #40	; 0x28
 8013626:	d12f      	bne.n	8013688 <_strtod_l+0x380>
 8013628:	4996      	ldr	r1, [pc, #600]	; (8013884 <_strtod_l+0x57c>)
 801362a:	aa18      	add	r2, sp, #96	; 0x60
 801362c:	a815      	add	r0, sp, #84	; 0x54
 801362e:	f001 fbe7 	bl	8014e00 <__hexnan>
 8013632:	2805      	cmp	r0, #5
 8013634:	d128      	bne.n	8013688 <_strtod_l+0x380>
 8013636:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801363c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013640:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013644:	e69b      	b.n	801337e <_strtod_l+0x76>
 8013646:	9f08      	ldr	r7, [sp, #32]
 8013648:	210a      	movs	r1, #10
 801364a:	fb01 2107 	mla	r1, r1, r7, r2
 801364e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8013652:	9208      	str	r2, [sp, #32]
 8013654:	e7b5      	b.n	80135c2 <_strtod_l+0x2ba>
 8013656:	2a6e      	cmp	r2, #110	; 0x6e
 8013658:	e7d9      	b.n	801360e <_strtod_l+0x306>
 801365a:	498b      	ldr	r1, [pc, #556]	; (8013888 <_strtod_l+0x580>)
 801365c:	a815      	add	r0, sp, #84	; 0x54
 801365e:	f001 fbbb 	bl	8014dd8 <__match>
 8013662:	2800      	cmp	r0, #0
 8013664:	f43f aea8 	beq.w	80133b8 <_strtod_l+0xb0>
 8013668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801366a:	4988      	ldr	r1, [pc, #544]	; (801388c <_strtod_l+0x584>)
 801366c:	3b01      	subs	r3, #1
 801366e:	a815      	add	r0, sp, #84	; 0x54
 8013670:	9315      	str	r3, [sp, #84]	; 0x54
 8013672:	f001 fbb1 	bl	8014dd8 <__match>
 8013676:	b910      	cbnz	r0, 801367e <_strtod_l+0x376>
 8013678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801367a:	3301      	adds	r3, #1
 801367c:	9315      	str	r3, [sp, #84]	; 0x54
 801367e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801389c <_strtod_l+0x594>
 8013682:	f04f 0800 	mov.w	r8, #0
 8013686:	e67a      	b.n	801337e <_strtod_l+0x76>
 8013688:	4881      	ldr	r0, [pc, #516]	; (8013890 <_strtod_l+0x588>)
 801368a:	f001 f8c1 	bl	8014810 <nan>
 801368e:	ec59 8b10 	vmov	r8, r9, d0
 8013692:	e674      	b.n	801337e <_strtod_l+0x76>
 8013694:	9b05      	ldr	r3, [sp, #20]
 8013696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013698:	1afb      	subs	r3, r7, r3
 801369a:	f1bb 0f00 	cmp.w	fp, #0
 801369e:	bf08      	it	eq
 80136a0:	46b3      	moveq	fp, r6
 80136a2:	2e10      	cmp	r6, #16
 80136a4:	9308      	str	r3, [sp, #32]
 80136a6:	4635      	mov	r5, r6
 80136a8:	bfa8      	it	ge
 80136aa:	2510      	movge	r5, #16
 80136ac:	f7f2 ffa0 	bl	80065f0 <__aeabi_ui2d>
 80136b0:	2e09      	cmp	r6, #9
 80136b2:	4680      	mov	r8, r0
 80136b4:	4689      	mov	r9, r1
 80136b6:	dd13      	ble.n	80136e0 <_strtod_l+0x3d8>
 80136b8:	4b76      	ldr	r3, [pc, #472]	; (8013894 <_strtod_l+0x58c>)
 80136ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80136be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80136c2:	f7f3 f80f 	bl	80066e4 <__aeabi_dmul>
 80136c6:	4680      	mov	r8, r0
 80136c8:	4650      	mov	r0, sl
 80136ca:	4689      	mov	r9, r1
 80136cc:	f7f2 ff90 	bl	80065f0 <__aeabi_ui2d>
 80136d0:	4602      	mov	r2, r0
 80136d2:	460b      	mov	r3, r1
 80136d4:	4640      	mov	r0, r8
 80136d6:	4649      	mov	r1, r9
 80136d8:	f7f2 fe4e 	bl	8006378 <__adddf3>
 80136dc:	4680      	mov	r8, r0
 80136de:	4689      	mov	r9, r1
 80136e0:	2e0f      	cmp	r6, #15
 80136e2:	dc38      	bgt.n	8013756 <_strtod_l+0x44e>
 80136e4:	9b08      	ldr	r3, [sp, #32]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f43f ae49 	beq.w	801337e <_strtod_l+0x76>
 80136ec:	dd24      	ble.n	8013738 <_strtod_l+0x430>
 80136ee:	2b16      	cmp	r3, #22
 80136f0:	dc0b      	bgt.n	801370a <_strtod_l+0x402>
 80136f2:	4968      	ldr	r1, [pc, #416]	; (8013894 <_strtod_l+0x58c>)
 80136f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80136f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136fc:	4642      	mov	r2, r8
 80136fe:	464b      	mov	r3, r9
 8013700:	f7f2 fff0 	bl	80066e4 <__aeabi_dmul>
 8013704:	4680      	mov	r8, r0
 8013706:	4689      	mov	r9, r1
 8013708:	e639      	b.n	801337e <_strtod_l+0x76>
 801370a:	9a08      	ldr	r2, [sp, #32]
 801370c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013710:	4293      	cmp	r3, r2
 8013712:	db20      	blt.n	8013756 <_strtod_l+0x44e>
 8013714:	4c5f      	ldr	r4, [pc, #380]	; (8013894 <_strtod_l+0x58c>)
 8013716:	f1c6 060f 	rsb	r6, r6, #15
 801371a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801371e:	4642      	mov	r2, r8
 8013720:	464b      	mov	r3, r9
 8013722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013726:	f7f2 ffdd 	bl	80066e4 <__aeabi_dmul>
 801372a:	9b08      	ldr	r3, [sp, #32]
 801372c:	1b9e      	subs	r6, r3, r6
 801372e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013732:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013736:	e7e3      	b.n	8013700 <_strtod_l+0x3f8>
 8013738:	9b08      	ldr	r3, [sp, #32]
 801373a:	3316      	adds	r3, #22
 801373c:	db0b      	blt.n	8013756 <_strtod_l+0x44e>
 801373e:	9b05      	ldr	r3, [sp, #20]
 8013740:	1bdf      	subs	r7, r3, r7
 8013742:	4b54      	ldr	r3, [pc, #336]	; (8013894 <_strtod_l+0x58c>)
 8013744:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013748:	e9d7 2300 	ldrd	r2, r3, [r7]
 801374c:	4640      	mov	r0, r8
 801374e:	4649      	mov	r1, r9
 8013750:	f7f3 f8f2 	bl	8006938 <__aeabi_ddiv>
 8013754:	e7d6      	b.n	8013704 <_strtod_l+0x3fc>
 8013756:	9b08      	ldr	r3, [sp, #32]
 8013758:	1b75      	subs	r5, r6, r5
 801375a:	441d      	add	r5, r3
 801375c:	2d00      	cmp	r5, #0
 801375e:	dd70      	ble.n	8013842 <_strtod_l+0x53a>
 8013760:	f015 030f 	ands.w	r3, r5, #15
 8013764:	d00a      	beq.n	801377c <_strtod_l+0x474>
 8013766:	494b      	ldr	r1, [pc, #300]	; (8013894 <_strtod_l+0x58c>)
 8013768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801376c:	4642      	mov	r2, r8
 801376e:	464b      	mov	r3, r9
 8013770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013774:	f7f2 ffb6 	bl	80066e4 <__aeabi_dmul>
 8013778:	4680      	mov	r8, r0
 801377a:	4689      	mov	r9, r1
 801377c:	f035 050f 	bics.w	r5, r5, #15
 8013780:	d04d      	beq.n	801381e <_strtod_l+0x516>
 8013782:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013786:	dd22      	ble.n	80137ce <_strtod_l+0x4c6>
 8013788:	2500      	movs	r5, #0
 801378a:	46ab      	mov	fp, r5
 801378c:	9509      	str	r5, [sp, #36]	; 0x24
 801378e:	9505      	str	r5, [sp, #20]
 8013790:	2322      	movs	r3, #34	; 0x22
 8013792:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801389c <_strtod_l+0x594>
 8013796:	6023      	str	r3, [r4, #0]
 8013798:	f04f 0800 	mov.w	r8, #0
 801379c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f43f aded 	beq.w	801337e <_strtod_l+0x76>
 80137a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80137a6:	4620      	mov	r0, r4
 80137a8:	f7ff f924 	bl	80129f4 <_Bfree>
 80137ac:	9905      	ldr	r1, [sp, #20]
 80137ae:	4620      	mov	r0, r4
 80137b0:	f7ff f920 	bl	80129f4 <_Bfree>
 80137b4:	4659      	mov	r1, fp
 80137b6:	4620      	mov	r0, r4
 80137b8:	f7ff f91c 	bl	80129f4 <_Bfree>
 80137bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137be:	4620      	mov	r0, r4
 80137c0:	f7ff f918 	bl	80129f4 <_Bfree>
 80137c4:	4629      	mov	r1, r5
 80137c6:	4620      	mov	r0, r4
 80137c8:	f7ff f914 	bl	80129f4 <_Bfree>
 80137cc:	e5d7      	b.n	801337e <_strtod_l+0x76>
 80137ce:	4b32      	ldr	r3, [pc, #200]	; (8013898 <_strtod_l+0x590>)
 80137d0:	9304      	str	r3, [sp, #16]
 80137d2:	2300      	movs	r3, #0
 80137d4:	112d      	asrs	r5, r5, #4
 80137d6:	4640      	mov	r0, r8
 80137d8:	4649      	mov	r1, r9
 80137da:	469a      	mov	sl, r3
 80137dc:	2d01      	cmp	r5, #1
 80137de:	dc21      	bgt.n	8013824 <_strtod_l+0x51c>
 80137e0:	b10b      	cbz	r3, 80137e6 <_strtod_l+0x4de>
 80137e2:	4680      	mov	r8, r0
 80137e4:	4689      	mov	r9, r1
 80137e6:	492c      	ldr	r1, [pc, #176]	; (8013898 <_strtod_l+0x590>)
 80137e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80137ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80137f0:	4642      	mov	r2, r8
 80137f2:	464b      	mov	r3, r9
 80137f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137f8:	f7f2 ff74 	bl	80066e4 <__aeabi_dmul>
 80137fc:	4b27      	ldr	r3, [pc, #156]	; (801389c <_strtod_l+0x594>)
 80137fe:	460a      	mov	r2, r1
 8013800:	400b      	ands	r3, r1
 8013802:	4927      	ldr	r1, [pc, #156]	; (80138a0 <_strtod_l+0x598>)
 8013804:	428b      	cmp	r3, r1
 8013806:	4680      	mov	r8, r0
 8013808:	d8be      	bhi.n	8013788 <_strtod_l+0x480>
 801380a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801380e:	428b      	cmp	r3, r1
 8013810:	bf86      	itte	hi
 8013812:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80138a4 <_strtod_l+0x59c>
 8013816:	f04f 38ff 	movhi.w	r8, #4294967295
 801381a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801381e:	2300      	movs	r3, #0
 8013820:	9304      	str	r3, [sp, #16]
 8013822:	e07b      	b.n	801391c <_strtod_l+0x614>
 8013824:	07ea      	lsls	r2, r5, #31
 8013826:	d505      	bpl.n	8013834 <_strtod_l+0x52c>
 8013828:	9b04      	ldr	r3, [sp, #16]
 801382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382e:	f7f2 ff59 	bl	80066e4 <__aeabi_dmul>
 8013832:	2301      	movs	r3, #1
 8013834:	9a04      	ldr	r2, [sp, #16]
 8013836:	3208      	adds	r2, #8
 8013838:	f10a 0a01 	add.w	sl, sl, #1
 801383c:	106d      	asrs	r5, r5, #1
 801383e:	9204      	str	r2, [sp, #16]
 8013840:	e7cc      	b.n	80137dc <_strtod_l+0x4d4>
 8013842:	d0ec      	beq.n	801381e <_strtod_l+0x516>
 8013844:	426d      	negs	r5, r5
 8013846:	f015 020f 	ands.w	r2, r5, #15
 801384a:	d00a      	beq.n	8013862 <_strtod_l+0x55a>
 801384c:	4b11      	ldr	r3, [pc, #68]	; (8013894 <_strtod_l+0x58c>)
 801384e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013852:	4640      	mov	r0, r8
 8013854:	4649      	mov	r1, r9
 8013856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385a:	f7f3 f86d 	bl	8006938 <__aeabi_ddiv>
 801385e:	4680      	mov	r8, r0
 8013860:	4689      	mov	r9, r1
 8013862:	112d      	asrs	r5, r5, #4
 8013864:	d0db      	beq.n	801381e <_strtod_l+0x516>
 8013866:	2d1f      	cmp	r5, #31
 8013868:	dd1e      	ble.n	80138a8 <_strtod_l+0x5a0>
 801386a:	2500      	movs	r5, #0
 801386c:	46ab      	mov	fp, r5
 801386e:	9509      	str	r5, [sp, #36]	; 0x24
 8013870:	9505      	str	r5, [sp, #20]
 8013872:	2322      	movs	r3, #34	; 0x22
 8013874:	f04f 0800 	mov.w	r8, #0
 8013878:	f04f 0900 	mov.w	r9, #0
 801387c:	6023      	str	r3, [r4, #0]
 801387e:	e78d      	b.n	801379c <_strtod_l+0x494>
 8013880:	0814f601 	.word	0x0814f601
 8013884:	0814f82c 	.word	0x0814f82c
 8013888:	0814f5f9 	.word	0x0814f5f9
 801388c:	0814f630 	.word	0x0814f630
 8013890:	0814f9bd 	.word	0x0814f9bd
 8013894:	0814f740 	.word	0x0814f740
 8013898:	0814f718 	.word	0x0814f718
 801389c:	7ff00000 	.word	0x7ff00000
 80138a0:	7ca00000 	.word	0x7ca00000
 80138a4:	7fefffff 	.word	0x7fefffff
 80138a8:	f015 0310 	ands.w	r3, r5, #16
 80138ac:	bf18      	it	ne
 80138ae:	236a      	movne	r3, #106	; 0x6a
 80138b0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013c54 <_strtod_l+0x94c>
 80138b4:	9304      	str	r3, [sp, #16]
 80138b6:	4640      	mov	r0, r8
 80138b8:	4649      	mov	r1, r9
 80138ba:	2300      	movs	r3, #0
 80138bc:	07ea      	lsls	r2, r5, #31
 80138be:	d504      	bpl.n	80138ca <_strtod_l+0x5c2>
 80138c0:	e9da 2300 	ldrd	r2, r3, [sl]
 80138c4:	f7f2 ff0e 	bl	80066e4 <__aeabi_dmul>
 80138c8:	2301      	movs	r3, #1
 80138ca:	106d      	asrs	r5, r5, #1
 80138cc:	f10a 0a08 	add.w	sl, sl, #8
 80138d0:	d1f4      	bne.n	80138bc <_strtod_l+0x5b4>
 80138d2:	b10b      	cbz	r3, 80138d8 <_strtod_l+0x5d0>
 80138d4:	4680      	mov	r8, r0
 80138d6:	4689      	mov	r9, r1
 80138d8:	9b04      	ldr	r3, [sp, #16]
 80138da:	b1bb      	cbz	r3, 801390c <_strtod_l+0x604>
 80138dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80138e0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	4649      	mov	r1, r9
 80138e8:	dd10      	ble.n	801390c <_strtod_l+0x604>
 80138ea:	2b1f      	cmp	r3, #31
 80138ec:	f340 811e 	ble.w	8013b2c <_strtod_l+0x824>
 80138f0:	2b34      	cmp	r3, #52	; 0x34
 80138f2:	bfde      	ittt	le
 80138f4:	f04f 33ff 	movle.w	r3, #4294967295
 80138f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80138fc:	4093      	lslle	r3, r2
 80138fe:	f04f 0800 	mov.w	r8, #0
 8013902:	bfcc      	ite	gt
 8013904:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013908:	ea03 0901 	andle.w	r9, r3, r1
 801390c:	2200      	movs	r2, #0
 801390e:	2300      	movs	r3, #0
 8013910:	4640      	mov	r0, r8
 8013912:	4649      	mov	r1, r9
 8013914:	f7f3 f94e 	bl	8006bb4 <__aeabi_dcmpeq>
 8013918:	2800      	cmp	r0, #0
 801391a:	d1a6      	bne.n	801386a <_strtod_l+0x562>
 801391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801391e:	9300      	str	r3, [sp, #0]
 8013920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013922:	4633      	mov	r3, r6
 8013924:	465a      	mov	r2, fp
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff f8cc 	bl	8012ac4 <__s2b>
 801392c:	9009      	str	r0, [sp, #36]	; 0x24
 801392e:	2800      	cmp	r0, #0
 8013930:	f43f af2a 	beq.w	8013788 <_strtod_l+0x480>
 8013934:	9a08      	ldr	r2, [sp, #32]
 8013936:	9b05      	ldr	r3, [sp, #20]
 8013938:	2a00      	cmp	r2, #0
 801393a:	eba3 0307 	sub.w	r3, r3, r7
 801393e:	bfa8      	it	ge
 8013940:	2300      	movge	r3, #0
 8013942:	930c      	str	r3, [sp, #48]	; 0x30
 8013944:	2500      	movs	r5, #0
 8013946:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801394a:	9312      	str	r3, [sp, #72]	; 0x48
 801394c:	46ab      	mov	fp, r5
 801394e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013950:	4620      	mov	r0, r4
 8013952:	6859      	ldr	r1, [r3, #4]
 8013954:	f7ff f80e 	bl	8012974 <_Balloc>
 8013958:	9005      	str	r0, [sp, #20]
 801395a:	2800      	cmp	r0, #0
 801395c:	f43f af18 	beq.w	8013790 <_strtod_l+0x488>
 8013960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013962:	691a      	ldr	r2, [r3, #16]
 8013964:	3202      	adds	r2, #2
 8013966:	f103 010c 	add.w	r1, r3, #12
 801396a:	0092      	lsls	r2, r2, #2
 801396c:	300c      	adds	r0, #12
 801396e:	f7fe f871 	bl	8011a54 <memcpy>
 8013972:	ec49 8b10 	vmov	d0, r8, r9
 8013976:	aa18      	add	r2, sp, #96	; 0x60
 8013978:	a917      	add	r1, sp, #92	; 0x5c
 801397a:	4620      	mov	r0, r4
 801397c:	f7ff fbd6 	bl	801312c <__d2b>
 8013980:	ec49 8b18 	vmov	d8, r8, r9
 8013984:	9016      	str	r0, [sp, #88]	; 0x58
 8013986:	2800      	cmp	r0, #0
 8013988:	f43f af02 	beq.w	8013790 <_strtod_l+0x488>
 801398c:	2101      	movs	r1, #1
 801398e:	4620      	mov	r0, r4
 8013990:	f7ff f930 	bl	8012bf4 <__i2b>
 8013994:	4683      	mov	fp, r0
 8013996:	2800      	cmp	r0, #0
 8013998:	f43f aefa 	beq.w	8013790 <_strtod_l+0x488>
 801399c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801399e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80139a0:	2e00      	cmp	r6, #0
 80139a2:	bfab      	itete	ge
 80139a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80139a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80139a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80139aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80139ae:	bfac      	ite	ge
 80139b0:	eb06 0a03 	addge.w	sl, r6, r3
 80139b4:	1b9f      	sublt	r7, r3, r6
 80139b6:	9b04      	ldr	r3, [sp, #16]
 80139b8:	1af6      	subs	r6, r6, r3
 80139ba:	4416      	add	r6, r2
 80139bc:	4ba0      	ldr	r3, [pc, #640]	; (8013c40 <_strtod_l+0x938>)
 80139be:	3e01      	subs	r6, #1
 80139c0:	429e      	cmp	r6, r3
 80139c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80139c6:	f280 80c4 	bge.w	8013b52 <_strtod_l+0x84a>
 80139ca:	1b9b      	subs	r3, r3, r6
 80139cc:	2b1f      	cmp	r3, #31
 80139ce:	eba2 0203 	sub.w	r2, r2, r3
 80139d2:	f04f 0101 	mov.w	r1, #1
 80139d6:	f300 80b0 	bgt.w	8013b3a <_strtod_l+0x832>
 80139da:	fa01 f303 	lsl.w	r3, r1, r3
 80139de:	930e      	str	r3, [sp, #56]	; 0x38
 80139e0:	2300      	movs	r3, #0
 80139e2:	930d      	str	r3, [sp, #52]	; 0x34
 80139e4:	eb0a 0602 	add.w	r6, sl, r2
 80139e8:	9b04      	ldr	r3, [sp, #16]
 80139ea:	45b2      	cmp	sl, r6
 80139ec:	4417      	add	r7, r2
 80139ee:	441f      	add	r7, r3
 80139f0:	4653      	mov	r3, sl
 80139f2:	bfa8      	it	ge
 80139f4:	4633      	movge	r3, r6
 80139f6:	42bb      	cmp	r3, r7
 80139f8:	bfa8      	it	ge
 80139fa:	463b      	movge	r3, r7
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	bfc2      	ittt	gt
 8013a00:	1af6      	subgt	r6, r6, r3
 8013a02:	1aff      	subgt	r7, r7, r3
 8013a04:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	dd17      	ble.n	8013a3e <_strtod_l+0x736>
 8013a0e:	4659      	mov	r1, fp
 8013a10:	461a      	mov	r2, r3
 8013a12:	4620      	mov	r0, r4
 8013a14:	f7ff f9ae 	bl	8012d74 <__pow5mult>
 8013a18:	4683      	mov	fp, r0
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	f43f aeb8 	beq.w	8013790 <_strtod_l+0x488>
 8013a20:	4601      	mov	r1, r0
 8013a22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013a24:	4620      	mov	r0, r4
 8013a26:	f7ff f8fb 	bl	8012c20 <__multiply>
 8013a2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	f43f aeaf 	beq.w	8013790 <_strtod_l+0x488>
 8013a32:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a34:	4620      	mov	r0, r4
 8013a36:	f7fe ffdd 	bl	80129f4 <_Bfree>
 8013a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a3c:	9316      	str	r3, [sp, #88]	; 0x58
 8013a3e:	2e00      	cmp	r6, #0
 8013a40:	f300 808c 	bgt.w	8013b5c <_strtod_l+0x854>
 8013a44:	9b08      	ldr	r3, [sp, #32]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	dd08      	ble.n	8013a5c <_strtod_l+0x754>
 8013a4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a4c:	9905      	ldr	r1, [sp, #20]
 8013a4e:	4620      	mov	r0, r4
 8013a50:	f7ff f990 	bl	8012d74 <__pow5mult>
 8013a54:	9005      	str	r0, [sp, #20]
 8013a56:	2800      	cmp	r0, #0
 8013a58:	f43f ae9a 	beq.w	8013790 <_strtod_l+0x488>
 8013a5c:	2f00      	cmp	r7, #0
 8013a5e:	dd08      	ble.n	8013a72 <_strtod_l+0x76a>
 8013a60:	9905      	ldr	r1, [sp, #20]
 8013a62:	463a      	mov	r2, r7
 8013a64:	4620      	mov	r0, r4
 8013a66:	f7ff f9df 	bl	8012e28 <__lshift>
 8013a6a:	9005      	str	r0, [sp, #20]
 8013a6c:	2800      	cmp	r0, #0
 8013a6e:	f43f ae8f 	beq.w	8013790 <_strtod_l+0x488>
 8013a72:	f1ba 0f00 	cmp.w	sl, #0
 8013a76:	dd08      	ble.n	8013a8a <_strtod_l+0x782>
 8013a78:	4659      	mov	r1, fp
 8013a7a:	4652      	mov	r2, sl
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f7ff f9d3 	bl	8012e28 <__lshift>
 8013a82:	4683      	mov	fp, r0
 8013a84:	2800      	cmp	r0, #0
 8013a86:	f43f ae83 	beq.w	8013790 <_strtod_l+0x488>
 8013a8a:	9a05      	ldr	r2, [sp, #20]
 8013a8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a8e:	4620      	mov	r0, r4
 8013a90:	f7ff fa52 	bl	8012f38 <__mdiff>
 8013a94:	4605      	mov	r5, r0
 8013a96:	2800      	cmp	r0, #0
 8013a98:	f43f ae7a 	beq.w	8013790 <_strtod_l+0x488>
 8013a9c:	68c3      	ldr	r3, [r0, #12]
 8013a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	60c3      	str	r3, [r0, #12]
 8013aa4:	4659      	mov	r1, fp
 8013aa6:	f7ff fa2b 	bl	8012f00 <__mcmp>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	da60      	bge.n	8013b70 <_strtod_l+0x868>
 8013aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ab0:	ea53 0308 	orrs.w	r3, r3, r8
 8013ab4:	f040 8084 	bne.w	8013bc0 <_strtod_l+0x8b8>
 8013ab8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d17f      	bne.n	8013bc0 <_strtod_l+0x8b8>
 8013ac0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ac4:	0d1b      	lsrs	r3, r3, #20
 8013ac6:	051b      	lsls	r3, r3, #20
 8013ac8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013acc:	d978      	bls.n	8013bc0 <_strtod_l+0x8b8>
 8013ace:	696b      	ldr	r3, [r5, #20]
 8013ad0:	b913      	cbnz	r3, 8013ad8 <_strtod_l+0x7d0>
 8013ad2:	692b      	ldr	r3, [r5, #16]
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	dd73      	ble.n	8013bc0 <_strtod_l+0x8b8>
 8013ad8:	4629      	mov	r1, r5
 8013ada:	2201      	movs	r2, #1
 8013adc:	4620      	mov	r0, r4
 8013ade:	f7ff f9a3 	bl	8012e28 <__lshift>
 8013ae2:	4659      	mov	r1, fp
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	f7ff fa0b 	bl	8012f00 <__mcmp>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	dd68      	ble.n	8013bc0 <_strtod_l+0x8b8>
 8013aee:	9904      	ldr	r1, [sp, #16]
 8013af0:	4a54      	ldr	r2, [pc, #336]	; (8013c44 <_strtod_l+0x93c>)
 8013af2:	464b      	mov	r3, r9
 8013af4:	2900      	cmp	r1, #0
 8013af6:	f000 8084 	beq.w	8013c02 <_strtod_l+0x8fa>
 8013afa:	ea02 0109 	and.w	r1, r2, r9
 8013afe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b02:	dc7e      	bgt.n	8013c02 <_strtod_l+0x8fa>
 8013b04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b08:	f77f aeb3 	ble.w	8013872 <_strtod_l+0x56a>
 8013b0c:	4b4e      	ldr	r3, [pc, #312]	; (8013c48 <_strtod_l+0x940>)
 8013b0e:	4640      	mov	r0, r8
 8013b10:	4649      	mov	r1, r9
 8013b12:	2200      	movs	r2, #0
 8013b14:	f7f2 fde6 	bl	80066e4 <__aeabi_dmul>
 8013b18:	4b4a      	ldr	r3, [pc, #296]	; (8013c44 <_strtod_l+0x93c>)
 8013b1a:	400b      	ands	r3, r1
 8013b1c:	4680      	mov	r8, r0
 8013b1e:	4689      	mov	r9, r1
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f47f ae3f 	bne.w	80137a4 <_strtod_l+0x49c>
 8013b26:	2322      	movs	r3, #34	; 0x22
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	e63b      	b.n	80137a4 <_strtod_l+0x49c>
 8013b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8013b30:	fa02 f303 	lsl.w	r3, r2, r3
 8013b34:	ea03 0808 	and.w	r8, r3, r8
 8013b38:	e6e8      	b.n	801390c <_strtod_l+0x604>
 8013b3a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013b3e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013b42:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013b46:	36e2      	adds	r6, #226	; 0xe2
 8013b48:	fa01 f306 	lsl.w	r3, r1, r6
 8013b4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013b50:	e748      	b.n	80139e4 <_strtod_l+0x6dc>
 8013b52:	2100      	movs	r1, #0
 8013b54:	2301      	movs	r3, #1
 8013b56:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013b5a:	e743      	b.n	80139e4 <_strtod_l+0x6dc>
 8013b5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b5e:	4632      	mov	r2, r6
 8013b60:	4620      	mov	r0, r4
 8013b62:	f7ff f961 	bl	8012e28 <__lshift>
 8013b66:	9016      	str	r0, [sp, #88]	; 0x58
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	f47f af6b 	bne.w	8013a44 <_strtod_l+0x73c>
 8013b6e:	e60f      	b.n	8013790 <_strtod_l+0x488>
 8013b70:	46ca      	mov	sl, r9
 8013b72:	d171      	bne.n	8013c58 <_strtod_l+0x950>
 8013b74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b7a:	b352      	cbz	r2, 8013bd2 <_strtod_l+0x8ca>
 8013b7c:	4a33      	ldr	r2, [pc, #204]	; (8013c4c <_strtod_l+0x944>)
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d12a      	bne.n	8013bd8 <_strtod_l+0x8d0>
 8013b82:	9b04      	ldr	r3, [sp, #16]
 8013b84:	4641      	mov	r1, r8
 8013b86:	b1fb      	cbz	r3, 8013bc8 <_strtod_l+0x8c0>
 8013b88:	4b2e      	ldr	r3, [pc, #184]	; (8013c44 <_strtod_l+0x93c>)
 8013b8a:	ea09 0303 	and.w	r3, r9, r3
 8013b8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013b92:	f04f 32ff 	mov.w	r2, #4294967295
 8013b96:	d81a      	bhi.n	8013bce <_strtod_l+0x8c6>
 8013b98:	0d1b      	lsrs	r3, r3, #20
 8013b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8013ba2:	4299      	cmp	r1, r3
 8013ba4:	d118      	bne.n	8013bd8 <_strtod_l+0x8d0>
 8013ba6:	4b2a      	ldr	r3, [pc, #168]	; (8013c50 <_strtod_l+0x948>)
 8013ba8:	459a      	cmp	sl, r3
 8013baa:	d102      	bne.n	8013bb2 <_strtod_l+0x8aa>
 8013bac:	3101      	adds	r1, #1
 8013bae:	f43f adef 	beq.w	8013790 <_strtod_l+0x488>
 8013bb2:	4b24      	ldr	r3, [pc, #144]	; (8013c44 <_strtod_l+0x93c>)
 8013bb4:	ea0a 0303 	and.w	r3, sl, r3
 8013bb8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013bbc:	f04f 0800 	mov.w	r8, #0
 8013bc0:	9b04      	ldr	r3, [sp, #16]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d1a2      	bne.n	8013b0c <_strtod_l+0x804>
 8013bc6:	e5ed      	b.n	80137a4 <_strtod_l+0x49c>
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bcc:	e7e9      	b.n	8013ba2 <_strtod_l+0x89a>
 8013bce:	4613      	mov	r3, r2
 8013bd0:	e7e7      	b.n	8013ba2 <_strtod_l+0x89a>
 8013bd2:	ea53 0308 	orrs.w	r3, r3, r8
 8013bd6:	d08a      	beq.n	8013aee <_strtod_l+0x7e6>
 8013bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bda:	b1e3      	cbz	r3, 8013c16 <_strtod_l+0x90e>
 8013bdc:	ea13 0f0a 	tst.w	r3, sl
 8013be0:	d0ee      	beq.n	8013bc0 <_strtod_l+0x8b8>
 8013be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013be4:	9a04      	ldr	r2, [sp, #16]
 8013be6:	4640      	mov	r0, r8
 8013be8:	4649      	mov	r1, r9
 8013bea:	b1c3      	cbz	r3, 8013c1e <_strtod_l+0x916>
 8013bec:	f7ff fb6f 	bl	80132ce <sulp>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	ec51 0b18 	vmov	r0, r1, d8
 8013bf8:	f7f2 fbbe 	bl	8006378 <__adddf3>
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	4689      	mov	r9, r1
 8013c00:	e7de      	b.n	8013bc0 <_strtod_l+0x8b8>
 8013c02:	4013      	ands	r3, r2
 8013c04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013c0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013c10:	f04f 38ff 	mov.w	r8, #4294967295
 8013c14:	e7d4      	b.n	8013bc0 <_strtod_l+0x8b8>
 8013c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c18:	ea13 0f08 	tst.w	r3, r8
 8013c1c:	e7e0      	b.n	8013be0 <_strtod_l+0x8d8>
 8013c1e:	f7ff fb56 	bl	80132ce <sulp>
 8013c22:	4602      	mov	r2, r0
 8013c24:	460b      	mov	r3, r1
 8013c26:	ec51 0b18 	vmov	r0, r1, d8
 8013c2a:	f7f2 fba3 	bl	8006374 <__aeabi_dsub>
 8013c2e:	2200      	movs	r2, #0
 8013c30:	2300      	movs	r3, #0
 8013c32:	4680      	mov	r8, r0
 8013c34:	4689      	mov	r9, r1
 8013c36:	f7f2 ffbd 	bl	8006bb4 <__aeabi_dcmpeq>
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d0c0      	beq.n	8013bc0 <_strtod_l+0x8b8>
 8013c3e:	e618      	b.n	8013872 <_strtod_l+0x56a>
 8013c40:	fffffc02 	.word	0xfffffc02
 8013c44:	7ff00000 	.word	0x7ff00000
 8013c48:	39500000 	.word	0x39500000
 8013c4c:	000fffff 	.word	0x000fffff
 8013c50:	7fefffff 	.word	0x7fefffff
 8013c54:	0814f840 	.word	0x0814f840
 8013c58:	4659      	mov	r1, fp
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	f7ff fac0 	bl	80131e0 <__ratio>
 8013c60:	ec57 6b10 	vmov	r6, r7, d0
 8013c64:	ee10 0a10 	vmov	r0, s0
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c6e:	4639      	mov	r1, r7
 8013c70:	f7f2 ffb4 	bl	8006bdc <__aeabi_dcmple>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d071      	beq.n	8013d5c <_strtod_l+0xa54>
 8013c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d17c      	bne.n	8013d78 <_strtod_l+0xa70>
 8013c7e:	f1b8 0f00 	cmp.w	r8, #0
 8013c82:	d15a      	bne.n	8013d3a <_strtod_l+0xa32>
 8013c84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d15d      	bne.n	8013d48 <_strtod_l+0xa40>
 8013c8c:	4b90      	ldr	r3, [pc, #576]	; (8013ed0 <_strtod_l+0xbc8>)
 8013c8e:	2200      	movs	r2, #0
 8013c90:	4630      	mov	r0, r6
 8013c92:	4639      	mov	r1, r7
 8013c94:	f7f2 ff98 	bl	8006bc8 <__aeabi_dcmplt>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d15c      	bne.n	8013d56 <_strtod_l+0xa4e>
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	4b8c      	ldr	r3, [pc, #560]	; (8013ed4 <_strtod_l+0xbcc>)
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	f7f2 fd1e 	bl	80066e4 <__aeabi_dmul>
 8013ca8:	4606      	mov	r6, r0
 8013caa:	460f      	mov	r7, r1
 8013cac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013cb0:	9606      	str	r6, [sp, #24]
 8013cb2:	9307      	str	r3, [sp, #28]
 8013cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013cbc:	4b86      	ldr	r3, [pc, #536]	; (8013ed8 <_strtod_l+0xbd0>)
 8013cbe:	ea0a 0303 	and.w	r3, sl, r3
 8013cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8013cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cc6:	4b85      	ldr	r3, [pc, #532]	; (8013edc <_strtod_l+0xbd4>)
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	f040 8090 	bne.w	8013dee <_strtod_l+0xae6>
 8013cce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013cd2:	ec49 8b10 	vmov	d0, r8, r9
 8013cd6:	f7ff f9b9 	bl	801304c <__ulp>
 8013cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cde:	ec51 0b10 	vmov	r0, r1, d0
 8013ce2:	f7f2 fcff 	bl	80066e4 <__aeabi_dmul>
 8013ce6:	4642      	mov	r2, r8
 8013ce8:	464b      	mov	r3, r9
 8013cea:	f7f2 fb45 	bl	8006378 <__adddf3>
 8013cee:	460b      	mov	r3, r1
 8013cf0:	4979      	ldr	r1, [pc, #484]	; (8013ed8 <_strtod_l+0xbd0>)
 8013cf2:	4a7b      	ldr	r2, [pc, #492]	; (8013ee0 <_strtod_l+0xbd8>)
 8013cf4:	4019      	ands	r1, r3
 8013cf6:	4291      	cmp	r1, r2
 8013cf8:	4680      	mov	r8, r0
 8013cfa:	d944      	bls.n	8013d86 <_strtod_l+0xa7e>
 8013cfc:	ee18 2a90 	vmov	r2, s17
 8013d00:	4b78      	ldr	r3, [pc, #480]	; (8013ee4 <_strtod_l+0xbdc>)
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d104      	bne.n	8013d10 <_strtod_l+0xa08>
 8013d06:	ee18 3a10 	vmov	r3, s16
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	f43f ad40 	beq.w	8013790 <_strtod_l+0x488>
 8013d10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013ee4 <_strtod_l+0xbdc>
 8013d14:	f04f 38ff 	mov.w	r8, #4294967295
 8013d18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f7fe fe6a 	bl	80129f4 <_Bfree>
 8013d20:	9905      	ldr	r1, [sp, #20]
 8013d22:	4620      	mov	r0, r4
 8013d24:	f7fe fe66 	bl	80129f4 <_Bfree>
 8013d28:	4659      	mov	r1, fp
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7fe fe62 	bl	80129f4 <_Bfree>
 8013d30:	4629      	mov	r1, r5
 8013d32:	4620      	mov	r0, r4
 8013d34:	f7fe fe5e 	bl	80129f4 <_Bfree>
 8013d38:	e609      	b.n	801394e <_strtod_l+0x646>
 8013d3a:	f1b8 0f01 	cmp.w	r8, #1
 8013d3e:	d103      	bne.n	8013d48 <_strtod_l+0xa40>
 8013d40:	f1b9 0f00 	cmp.w	r9, #0
 8013d44:	f43f ad95 	beq.w	8013872 <_strtod_l+0x56a>
 8013d48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013ea0 <_strtod_l+0xb98>
 8013d4c:	4f60      	ldr	r7, [pc, #384]	; (8013ed0 <_strtod_l+0xbc8>)
 8013d4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d52:	2600      	movs	r6, #0
 8013d54:	e7ae      	b.n	8013cb4 <_strtod_l+0x9ac>
 8013d56:	4f5f      	ldr	r7, [pc, #380]	; (8013ed4 <_strtod_l+0xbcc>)
 8013d58:	2600      	movs	r6, #0
 8013d5a:	e7a7      	b.n	8013cac <_strtod_l+0x9a4>
 8013d5c:	4b5d      	ldr	r3, [pc, #372]	; (8013ed4 <_strtod_l+0xbcc>)
 8013d5e:	4630      	mov	r0, r6
 8013d60:	4639      	mov	r1, r7
 8013d62:	2200      	movs	r2, #0
 8013d64:	f7f2 fcbe 	bl	80066e4 <__aeabi_dmul>
 8013d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d6a:	4606      	mov	r6, r0
 8013d6c:	460f      	mov	r7, r1
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d09c      	beq.n	8013cac <_strtod_l+0x9a4>
 8013d72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013d76:	e79d      	b.n	8013cb4 <_strtod_l+0x9ac>
 8013d78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013ea8 <_strtod_l+0xba0>
 8013d7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d80:	ec57 6b17 	vmov	r6, r7, d7
 8013d84:	e796      	b.n	8013cb4 <_strtod_l+0x9ac>
 8013d86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013d8a:	9b04      	ldr	r3, [sp, #16]
 8013d8c:	46ca      	mov	sl, r9
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1c2      	bne.n	8013d18 <_strtod_l+0xa10>
 8013d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d98:	0d1b      	lsrs	r3, r3, #20
 8013d9a:	051b      	lsls	r3, r3, #20
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d1bb      	bne.n	8013d18 <_strtod_l+0xa10>
 8013da0:	4630      	mov	r0, r6
 8013da2:	4639      	mov	r1, r7
 8013da4:	f7f2 fffe 	bl	8006da4 <__aeabi_d2lz>
 8013da8:	f7f2 fc6e 	bl	8006688 <__aeabi_l2d>
 8013dac:	4602      	mov	r2, r0
 8013dae:	460b      	mov	r3, r1
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7f2 fade 	bl	8006374 <__aeabi_dsub>
 8013db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013dba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dbe:	ea43 0308 	orr.w	r3, r3, r8
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	460f      	mov	r7, r1
 8013dc8:	d054      	beq.n	8013e74 <_strtod_l+0xb6c>
 8013dca:	a339      	add	r3, pc, #228	; (adr r3, 8013eb0 <_strtod_l+0xba8>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7f2 fefa 	bl	8006bc8 <__aeabi_dcmplt>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	f47f ace5 	bne.w	80137a4 <_strtod_l+0x49c>
 8013dda:	a337      	add	r3, pc, #220	; (adr r3, 8013eb8 <_strtod_l+0xbb0>)
 8013ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de0:	4630      	mov	r0, r6
 8013de2:	4639      	mov	r1, r7
 8013de4:	f7f2 ff0e 	bl	8006c04 <__aeabi_dcmpgt>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	d095      	beq.n	8013d18 <_strtod_l+0xa10>
 8013dec:	e4da      	b.n	80137a4 <_strtod_l+0x49c>
 8013dee:	9b04      	ldr	r3, [sp, #16]
 8013df0:	b333      	cbz	r3, 8013e40 <_strtod_l+0xb38>
 8013df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013df4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013df8:	d822      	bhi.n	8013e40 <_strtod_l+0xb38>
 8013dfa:	a331      	add	r3, pc, #196	; (adr r3, 8013ec0 <_strtod_l+0xbb8>)
 8013dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e00:	4630      	mov	r0, r6
 8013e02:	4639      	mov	r1, r7
 8013e04:	f7f2 feea 	bl	8006bdc <__aeabi_dcmple>
 8013e08:	b1a0      	cbz	r0, 8013e34 <_strtod_l+0xb2c>
 8013e0a:	4639      	mov	r1, r7
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	f7f2 ff41 	bl	8006c94 <__aeabi_d2uiz>
 8013e12:	2801      	cmp	r0, #1
 8013e14:	bf38      	it	cc
 8013e16:	2001      	movcc	r0, #1
 8013e18:	f7f2 fbea 	bl	80065f0 <__aeabi_ui2d>
 8013e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e1e:	4606      	mov	r6, r0
 8013e20:	460f      	mov	r7, r1
 8013e22:	bb23      	cbnz	r3, 8013e6e <_strtod_l+0xb66>
 8013e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e28:	9010      	str	r0, [sp, #64]	; 0x40
 8013e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8013e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e38:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e3c:	1a9b      	subs	r3, r3, r2
 8013e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013e44:	eeb0 0a48 	vmov.f32	s0, s16
 8013e48:	eef0 0a68 	vmov.f32	s1, s17
 8013e4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013e50:	f7ff f8fc 	bl	801304c <__ulp>
 8013e54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013e58:	ec53 2b10 	vmov	r2, r3, d0
 8013e5c:	f7f2 fc42 	bl	80066e4 <__aeabi_dmul>
 8013e60:	ec53 2b18 	vmov	r2, r3, d8
 8013e64:	f7f2 fa88 	bl	8006378 <__adddf3>
 8013e68:	4680      	mov	r8, r0
 8013e6a:	4689      	mov	r9, r1
 8013e6c:	e78d      	b.n	8013d8a <_strtod_l+0xa82>
 8013e6e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013e72:	e7db      	b.n	8013e2c <_strtod_l+0xb24>
 8013e74:	a314      	add	r3, pc, #80	; (adr r3, 8013ec8 <_strtod_l+0xbc0>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7a:	f7f2 fea5 	bl	8006bc8 <__aeabi_dcmplt>
 8013e7e:	e7b3      	b.n	8013de8 <_strtod_l+0xae0>
 8013e80:	2300      	movs	r3, #0
 8013e82:	930a      	str	r3, [sp, #40]	; 0x28
 8013e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e88:	6013      	str	r3, [r2, #0]
 8013e8a:	f7ff ba7c 	b.w	8013386 <_strtod_l+0x7e>
 8013e8e:	2a65      	cmp	r2, #101	; 0x65
 8013e90:	f43f ab75 	beq.w	801357e <_strtod_l+0x276>
 8013e94:	2a45      	cmp	r2, #69	; 0x45
 8013e96:	f43f ab72 	beq.w	801357e <_strtod_l+0x276>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	f7ff bbaa 	b.w	80135f4 <_strtod_l+0x2ec>
 8013ea0:	00000000 	.word	0x00000000
 8013ea4:	bff00000 	.word	0xbff00000
 8013ea8:	00000000 	.word	0x00000000
 8013eac:	3ff00000 	.word	0x3ff00000
 8013eb0:	94a03595 	.word	0x94a03595
 8013eb4:	3fdfffff 	.word	0x3fdfffff
 8013eb8:	35afe535 	.word	0x35afe535
 8013ebc:	3fe00000 	.word	0x3fe00000
 8013ec0:	ffc00000 	.word	0xffc00000
 8013ec4:	41dfffff 	.word	0x41dfffff
 8013ec8:	94a03595 	.word	0x94a03595
 8013ecc:	3fcfffff 	.word	0x3fcfffff
 8013ed0:	3ff00000 	.word	0x3ff00000
 8013ed4:	3fe00000 	.word	0x3fe00000
 8013ed8:	7ff00000 	.word	0x7ff00000
 8013edc:	7fe00000 	.word	0x7fe00000
 8013ee0:	7c9fffff 	.word	0x7c9fffff
 8013ee4:	7fefffff 	.word	0x7fefffff

08013ee8 <_strtod_r>:
 8013ee8:	4b01      	ldr	r3, [pc, #4]	; (8013ef0 <_strtod_r+0x8>)
 8013eea:	f7ff ba0d 	b.w	8013308 <_strtod_l>
 8013eee:	bf00      	nop
 8013ef0:	20000924 	.word	0x20000924

08013ef4 <_strtol_l.constprop.0>:
 8013ef4:	2b01      	cmp	r3, #1
 8013ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013efa:	d001      	beq.n	8013f00 <_strtol_l.constprop.0+0xc>
 8013efc:	2b24      	cmp	r3, #36	; 0x24
 8013efe:	d906      	bls.n	8013f0e <_strtol_l.constprop.0+0x1a>
 8013f00:	f7fd fd76 	bl	80119f0 <__errno>
 8013f04:	2316      	movs	r3, #22
 8013f06:	6003      	str	r3, [r0, #0]
 8013f08:	2000      	movs	r0, #0
 8013f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013ff4 <_strtol_l.constprop.0+0x100>
 8013f12:	460d      	mov	r5, r1
 8013f14:	462e      	mov	r6, r5
 8013f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013f1e:	f017 0708 	ands.w	r7, r7, #8
 8013f22:	d1f7      	bne.n	8013f14 <_strtol_l.constprop.0+0x20>
 8013f24:	2c2d      	cmp	r4, #45	; 0x2d
 8013f26:	d132      	bne.n	8013f8e <_strtol_l.constprop.0+0x9a>
 8013f28:	782c      	ldrb	r4, [r5, #0]
 8013f2a:	2701      	movs	r7, #1
 8013f2c:	1cb5      	adds	r5, r6, #2
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d05b      	beq.n	8013fea <_strtol_l.constprop.0+0xf6>
 8013f32:	2b10      	cmp	r3, #16
 8013f34:	d109      	bne.n	8013f4a <_strtol_l.constprop.0+0x56>
 8013f36:	2c30      	cmp	r4, #48	; 0x30
 8013f38:	d107      	bne.n	8013f4a <_strtol_l.constprop.0+0x56>
 8013f3a:	782c      	ldrb	r4, [r5, #0]
 8013f3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013f40:	2c58      	cmp	r4, #88	; 0x58
 8013f42:	d14d      	bne.n	8013fe0 <_strtol_l.constprop.0+0xec>
 8013f44:	786c      	ldrb	r4, [r5, #1]
 8013f46:	2310      	movs	r3, #16
 8013f48:	3502      	adds	r5, #2
 8013f4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013f4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013f52:	f04f 0e00 	mov.w	lr, #0
 8013f56:	fbb8 f9f3 	udiv	r9, r8, r3
 8013f5a:	4676      	mov	r6, lr
 8013f5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8013f60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013f64:	f1bc 0f09 	cmp.w	ip, #9
 8013f68:	d816      	bhi.n	8013f98 <_strtol_l.constprop.0+0xa4>
 8013f6a:	4664      	mov	r4, ip
 8013f6c:	42a3      	cmp	r3, r4
 8013f6e:	dd24      	ble.n	8013fba <_strtol_l.constprop.0+0xc6>
 8013f70:	f1be 3fff 	cmp.w	lr, #4294967295
 8013f74:	d008      	beq.n	8013f88 <_strtol_l.constprop.0+0x94>
 8013f76:	45b1      	cmp	r9, r6
 8013f78:	d31c      	bcc.n	8013fb4 <_strtol_l.constprop.0+0xc0>
 8013f7a:	d101      	bne.n	8013f80 <_strtol_l.constprop.0+0x8c>
 8013f7c:	45a2      	cmp	sl, r4
 8013f7e:	db19      	blt.n	8013fb4 <_strtol_l.constprop.0+0xc0>
 8013f80:	fb06 4603 	mla	r6, r6, r3, r4
 8013f84:	f04f 0e01 	mov.w	lr, #1
 8013f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f8c:	e7e8      	b.n	8013f60 <_strtol_l.constprop.0+0x6c>
 8013f8e:	2c2b      	cmp	r4, #43	; 0x2b
 8013f90:	bf04      	itt	eq
 8013f92:	782c      	ldrbeq	r4, [r5, #0]
 8013f94:	1cb5      	addeq	r5, r6, #2
 8013f96:	e7ca      	b.n	8013f2e <_strtol_l.constprop.0+0x3a>
 8013f98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013f9c:	f1bc 0f19 	cmp.w	ip, #25
 8013fa0:	d801      	bhi.n	8013fa6 <_strtol_l.constprop.0+0xb2>
 8013fa2:	3c37      	subs	r4, #55	; 0x37
 8013fa4:	e7e2      	b.n	8013f6c <_strtol_l.constprop.0+0x78>
 8013fa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013faa:	f1bc 0f19 	cmp.w	ip, #25
 8013fae:	d804      	bhi.n	8013fba <_strtol_l.constprop.0+0xc6>
 8013fb0:	3c57      	subs	r4, #87	; 0x57
 8013fb2:	e7db      	b.n	8013f6c <_strtol_l.constprop.0+0x78>
 8013fb4:	f04f 3eff 	mov.w	lr, #4294967295
 8013fb8:	e7e6      	b.n	8013f88 <_strtol_l.constprop.0+0x94>
 8013fba:	f1be 3fff 	cmp.w	lr, #4294967295
 8013fbe:	d105      	bne.n	8013fcc <_strtol_l.constprop.0+0xd8>
 8013fc0:	2322      	movs	r3, #34	; 0x22
 8013fc2:	6003      	str	r3, [r0, #0]
 8013fc4:	4646      	mov	r6, r8
 8013fc6:	b942      	cbnz	r2, 8013fda <_strtol_l.constprop.0+0xe6>
 8013fc8:	4630      	mov	r0, r6
 8013fca:	e79e      	b.n	8013f0a <_strtol_l.constprop.0+0x16>
 8013fcc:	b107      	cbz	r7, 8013fd0 <_strtol_l.constprop.0+0xdc>
 8013fce:	4276      	negs	r6, r6
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d0f9      	beq.n	8013fc8 <_strtol_l.constprop.0+0xd4>
 8013fd4:	f1be 0f00 	cmp.w	lr, #0
 8013fd8:	d000      	beq.n	8013fdc <_strtol_l.constprop.0+0xe8>
 8013fda:	1e69      	subs	r1, r5, #1
 8013fdc:	6011      	str	r1, [r2, #0]
 8013fde:	e7f3      	b.n	8013fc8 <_strtol_l.constprop.0+0xd4>
 8013fe0:	2430      	movs	r4, #48	; 0x30
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d1b1      	bne.n	8013f4a <_strtol_l.constprop.0+0x56>
 8013fe6:	2308      	movs	r3, #8
 8013fe8:	e7af      	b.n	8013f4a <_strtol_l.constprop.0+0x56>
 8013fea:	2c30      	cmp	r4, #48	; 0x30
 8013fec:	d0a5      	beq.n	8013f3a <_strtol_l.constprop.0+0x46>
 8013fee:	230a      	movs	r3, #10
 8013ff0:	e7ab      	b.n	8013f4a <_strtol_l.constprop.0+0x56>
 8013ff2:	bf00      	nop
 8013ff4:	0814f869 	.word	0x0814f869

08013ff8 <_strtol_r>:
 8013ff8:	f7ff bf7c 	b.w	8013ef4 <_strtol_l.constprop.0>

08013ffc <__ssputs_r>:
 8013ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014000:	688e      	ldr	r6, [r1, #8]
 8014002:	461f      	mov	r7, r3
 8014004:	42be      	cmp	r6, r7
 8014006:	680b      	ldr	r3, [r1, #0]
 8014008:	4682      	mov	sl, r0
 801400a:	460c      	mov	r4, r1
 801400c:	4690      	mov	r8, r2
 801400e:	d82c      	bhi.n	801406a <__ssputs_r+0x6e>
 8014010:	898a      	ldrh	r2, [r1, #12]
 8014012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014016:	d026      	beq.n	8014066 <__ssputs_r+0x6a>
 8014018:	6965      	ldr	r5, [r4, #20]
 801401a:	6909      	ldr	r1, [r1, #16]
 801401c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014020:	eba3 0901 	sub.w	r9, r3, r1
 8014024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014028:	1c7b      	adds	r3, r7, #1
 801402a:	444b      	add	r3, r9
 801402c:	106d      	asrs	r5, r5, #1
 801402e:	429d      	cmp	r5, r3
 8014030:	bf38      	it	cc
 8014032:	461d      	movcc	r5, r3
 8014034:	0553      	lsls	r3, r2, #21
 8014036:	d527      	bpl.n	8014088 <__ssputs_r+0x8c>
 8014038:	4629      	mov	r1, r5
 801403a:	f7fe fc0f 	bl	801285c <_malloc_r>
 801403e:	4606      	mov	r6, r0
 8014040:	b360      	cbz	r0, 801409c <__ssputs_r+0xa0>
 8014042:	6921      	ldr	r1, [r4, #16]
 8014044:	464a      	mov	r2, r9
 8014046:	f7fd fd05 	bl	8011a54 <memcpy>
 801404a:	89a3      	ldrh	r3, [r4, #12]
 801404c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014054:	81a3      	strh	r3, [r4, #12]
 8014056:	6126      	str	r6, [r4, #16]
 8014058:	6165      	str	r5, [r4, #20]
 801405a:	444e      	add	r6, r9
 801405c:	eba5 0509 	sub.w	r5, r5, r9
 8014060:	6026      	str	r6, [r4, #0]
 8014062:	60a5      	str	r5, [r4, #8]
 8014064:	463e      	mov	r6, r7
 8014066:	42be      	cmp	r6, r7
 8014068:	d900      	bls.n	801406c <__ssputs_r+0x70>
 801406a:	463e      	mov	r6, r7
 801406c:	6820      	ldr	r0, [r4, #0]
 801406e:	4632      	mov	r2, r6
 8014070:	4641      	mov	r1, r8
 8014072:	f000 fb6f 	bl	8014754 <memmove>
 8014076:	68a3      	ldr	r3, [r4, #8]
 8014078:	1b9b      	subs	r3, r3, r6
 801407a:	60a3      	str	r3, [r4, #8]
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	4433      	add	r3, r6
 8014080:	6023      	str	r3, [r4, #0]
 8014082:	2000      	movs	r0, #0
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	462a      	mov	r2, r5
 801408a:	f000 ff66 	bl	8014f5a <_realloc_r>
 801408e:	4606      	mov	r6, r0
 8014090:	2800      	cmp	r0, #0
 8014092:	d1e0      	bne.n	8014056 <__ssputs_r+0x5a>
 8014094:	6921      	ldr	r1, [r4, #16]
 8014096:	4650      	mov	r0, sl
 8014098:	f7fe fb6c 	bl	8012774 <_free_r>
 801409c:	230c      	movs	r3, #12
 801409e:	f8ca 3000 	str.w	r3, [sl]
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140a8:	81a3      	strh	r3, [r4, #12]
 80140aa:	f04f 30ff 	mov.w	r0, #4294967295
 80140ae:	e7e9      	b.n	8014084 <__ssputs_r+0x88>

080140b0 <_svfiprintf_r>:
 80140b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b4:	4698      	mov	r8, r3
 80140b6:	898b      	ldrh	r3, [r1, #12]
 80140b8:	061b      	lsls	r3, r3, #24
 80140ba:	b09d      	sub	sp, #116	; 0x74
 80140bc:	4607      	mov	r7, r0
 80140be:	460d      	mov	r5, r1
 80140c0:	4614      	mov	r4, r2
 80140c2:	d50e      	bpl.n	80140e2 <_svfiprintf_r+0x32>
 80140c4:	690b      	ldr	r3, [r1, #16]
 80140c6:	b963      	cbnz	r3, 80140e2 <_svfiprintf_r+0x32>
 80140c8:	2140      	movs	r1, #64	; 0x40
 80140ca:	f7fe fbc7 	bl	801285c <_malloc_r>
 80140ce:	6028      	str	r0, [r5, #0]
 80140d0:	6128      	str	r0, [r5, #16]
 80140d2:	b920      	cbnz	r0, 80140de <_svfiprintf_r+0x2e>
 80140d4:	230c      	movs	r3, #12
 80140d6:	603b      	str	r3, [r7, #0]
 80140d8:	f04f 30ff 	mov.w	r0, #4294967295
 80140dc:	e0d0      	b.n	8014280 <_svfiprintf_r+0x1d0>
 80140de:	2340      	movs	r3, #64	; 0x40
 80140e0:	616b      	str	r3, [r5, #20]
 80140e2:	2300      	movs	r3, #0
 80140e4:	9309      	str	r3, [sp, #36]	; 0x24
 80140e6:	2320      	movs	r3, #32
 80140e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80140f0:	2330      	movs	r3, #48	; 0x30
 80140f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014298 <_svfiprintf_r+0x1e8>
 80140f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140fa:	f04f 0901 	mov.w	r9, #1
 80140fe:	4623      	mov	r3, r4
 8014100:	469a      	mov	sl, r3
 8014102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014106:	b10a      	cbz	r2, 801410c <_svfiprintf_r+0x5c>
 8014108:	2a25      	cmp	r2, #37	; 0x25
 801410a:	d1f9      	bne.n	8014100 <_svfiprintf_r+0x50>
 801410c:	ebba 0b04 	subs.w	fp, sl, r4
 8014110:	d00b      	beq.n	801412a <_svfiprintf_r+0x7a>
 8014112:	465b      	mov	r3, fp
 8014114:	4622      	mov	r2, r4
 8014116:	4629      	mov	r1, r5
 8014118:	4638      	mov	r0, r7
 801411a:	f7ff ff6f 	bl	8013ffc <__ssputs_r>
 801411e:	3001      	adds	r0, #1
 8014120:	f000 80a9 	beq.w	8014276 <_svfiprintf_r+0x1c6>
 8014124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014126:	445a      	add	r2, fp
 8014128:	9209      	str	r2, [sp, #36]	; 0x24
 801412a:	f89a 3000 	ldrb.w	r3, [sl]
 801412e:	2b00      	cmp	r3, #0
 8014130:	f000 80a1 	beq.w	8014276 <_svfiprintf_r+0x1c6>
 8014134:	2300      	movs	r3, #0
 8014136:	f04f 32ff 	mov.w	r2, #4294967295
 801413a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801413e:	f10a 0a01 	add.w	sl, sl, #1
 8014142:	9304      	str	r3, [sp, #16]
 8014144:	9307      	str	r3, [sp, #28]
 8014146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801414a:	931a      	str	r3, [sp, #104]	; 0x68
 801414c:	4654      	mov	r4, sl
 801414e:	2205      	movs	r2, #5
 8014150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014154:	4850      	ldr	r0, [pc, #320]	; (8014298 <_svfiprintf_r+0x1e8>)
 8014156:	f7f2 f863 	bl	8006220 <memchr>
 801415a:	9a04      	ldr	r2, [sp, #16]
 801415c:	b9d8      	cbnz	r0, 8014196 <_svfiprintf_r+0xe6>
 801415e:	06d0      	lsls	r0, r2, #27
 8014160:	bf44      	itt	mi
 8014162:	2320      	movmi	r3, #32
 8014164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014168:	0711      	lsls	r1, r2, #28
 801416a:	bf44      	itt	mi
 801416c:	232b      	movmi	r3, #43	; 0x2b
 801416e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014172:	f89a 3000 	ldrb.w	r3, [sl]
 8014176:	2b2a      	cmp	r3, #42	; 0x2a
 8014178:	d015      	beq.n	80141a6 <_svfiprintf_r+0xf6>
 801417a:	9a07      	ldr	r2, [sp, #28]
 801417c:	4654      	mov	r4, sl
 801417e:	2000      	movs	r0, #0
 8014180:	f04f 0c0a 	mov.w	ip, #10
 8014184:	4621      	mov	r1, r4
 8014186:	f811 3b01 	ldrb.w	r3, [r1], #1
 801418a:	3b30      	subs	r3, #48	; 0x30
 801418c:	2b09      	cmp	r3, #9
 801418e:	d94d      	bls.n	801422c <_svfiprintf_r+0x17c>
 8014190:	b1b0      	cbz	r0, 80141c0 <_svfiprintf_r+0x110>
 8014192:	9207      	str	r2, [sp, #28]
 8014194:	e014      	b.n	80141c0 <_svfiprintf_r+0x110>
 8014196:	eba0 0308 	sub.w	r3, r0, r8
 801419a:	fa09 f303 	lsl.w	r3, r9, r3
 801419e:	4313      	orrs	r3, r2
 80141a0:	9304      	str	r3, [sp, #16]
 80141a2:	46a2      	mov	sl, r4
 80141a4:	e7d2      	b.n	801414c <_svfiprintf_r+0x9c>
 80141a6:	9b03      	ldr	r3, [sp, #12]
 80141a8:	1d19      	adds	r1, r3, #4
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	9103      	str	r1, [sp, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	bfbb      	ittet	lt
 80141b2:	425b      	neglt	r3, r3
 80141b4:	f042 0202 	orrlt.w	r2, r2, #2
 80141b8:	9307      	strge	r3, [sp, #28]
 80141ba:	9307      	strlt	r3, [sp, #28]
 80141bc:	bfb8      	it	lt
 80141be:	9204      	strlt	r2, [sp, #16]
 80141c0:	7823      	ldrb	r3, [r4, #0]
 80141c2:	2b2e      	cmp	r3, #46	; 0x2e
 80141c4:	d10c      	bne.n	80141e0 <_svfiprintf_r+0x130>
 80141c6:	7863      	ldrb	r3, [r4, #1]
 80141c8:	2b2a      	cmp	r3, #42	; 0x2a
 80141ca:	d134      	bne.n	8014236 <_svfiprintf_r+0x186>
 80141cc:	9b03      	ldr	r3, [sp, #12]
 80141ce:	1d1a      	adds	r2, r3, #4
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	9203      	str	r2, [sp, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	bfb8      	it	lt
 80141d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80141dc:	3402      	adds	r4, #2
 80141de:	9305      	str	r3, [sp, #20]
 80141e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80142a8 <_svfiprintf_r+0x1f8>
 80141e4:	7821      	ldrb	r1, [r4, #0]
 80141e6:	2203      	movs	r2, #3
 80141e8:	4650      	mov	r0, sl
 80141ea:	f7f2 f819 	bl	8006220 <memchr>
 80141ee:	b138      	cbz	r0, 8014200 <_svfiprintf_r+0x150>
 80141f0:	9b04      	ldr	r3, [sp, #16]
 80141f2:	eba0 000a 	sub.w	r0, r0, sl
 80141f6:	2240      	movs	r2, #64	; 0x40
 80141f8:	4082      	lsls	r2, r0
 80141fa:	4313      	orrs	r3, r2
 80141fc:	3401      	adds	r4, #1
 80141fe:	9304      	str	r3, [sp, #16]
 8014200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014204:	4825      	ldr	r0, [pc, #148]	; (801429c <_svfiprintf_r+0x1ec>)
 8014206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801420a:	2206      	movs	r2, #6
 801420c:	f7f2 f808 	bl	8006220 <memchr>
 8014210:	2800      	cmp	r0, #0
 8014212:	d038      	beq.n	8014286 <_svfiprintf_r+0x1d6>
 8014214:	4b22      	ldr	r3, [pc, #136]	; (80142a0 <_svfiprintf_r+0x1f0>)
 8014216:	bb1b      	cbnz	r3, 8014260 <_svfiprintf_r+0x1b0>
 8014218:	9b03      	ldr	r3, [sp, #12]
 801421a:	3307      	adds	r3, #7
 801421c:	f023 0307 	bic.w	r3, r3, #7
 8014220:	3308      	adds	r3, #8
 8014222:	9303      	str	r3, [sp, #12]
 8014224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014226:	4433      	add	r3, r6
 8014228:	9309      	str	r3, [sp, #36]	; 0x24
 801422a:	e768      	b.n	80140fe <_svfiprintf_r+0x4e>
 801422c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014230:	460c      	mov	r4, r1
 8014232:	2001      	movs	r0, #1
 8014234:	e7a6      	b.n	8014184 <_svfiprintf_r+0xd4>
 8014236:	2300      	movs	r3, #0
 8014238:	3401      	adds	r4, #1
 801423a:	9305      	str	r3, [sp, #20]
 801423c:	4619      	mov	r1, r3
 801423e:	f04f 0c0a 	mov.w	ip, #10
 8014242:	4620      	mov	r0, r4
 8014244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014248:	3a30      	subs	r2, #48	; 0x30
 801424a:	2a09      	cmp	r2, #9
 801424c:	d903      	bls.n	8014256 <_svfiprintf_r+0x1a6>
 801424e:	2b00      	cmp	r3, #0
 8014250:	d0c6      	beq.n	80141e0 <_svfiprintf_r+0x130>
 8014252:	9105      	str	r1, [sp, #20]
 8014254:	e7c4      	b.n	80141e0 <_svfiprintf_r+0x130>
 8014256:	fb0c 2101 	mla	r1, ip, r1, r2
 801425a:	4604      	mov	r4, r0
 801425c:	2301      	movs	r3, #1
 801425e:	e7f0      	b.n	8014242 <_svfiprintf_r+0x192>
 8014260:	ab03      	add	r3, sp, #12
 8014262:	9300      	str	r3, [sp, #0]
 8014264:	462a      	mov	r2, r5
 8014266:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <_svfiprintf_r+0x1f4>)
 8014268:	a904      	add	r1, sp, #16
 801426a:	4638      	mov	r0, r7
 801426c:	f7fc fb60 	bl	8010930 <_printf_float>
 8014270:	1c42      	adds	r2, r0, #1
 8014272:	4606      	mov	r6, r0
 8014274:	d1d6      	bne.n	8014224 <_svfiprintf_r+0x174>
 8014276:	89ab      	ldrh	r3, [r5, #12]
 8014278:	065b      	lsls	r3, r3, #25
 801427a:	f53f af2d 	bmi.w	80140d8 <_svfiprintf_r+0x28>
 801427e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014280:	b01d      	add	sp, #116	; 0x74
 8014282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014286:	ab03      	add	r3, sp, #12
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	462a      	mov	r2, r5
 801428c:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <_svfiprintf_r+0x1f4>)
 801428e:	a904      	add	r1, sp, #16
 8014290:	4638      	mov	r0, r7
 8014292:	f7fc fdf1 	bl	8010e78 <_printf_i>
 8014296:	e7eb      	b.n	8014270 <_svfiprintf_r+0x1c0>
 8014298:	0814f969 	.word	0x0814f969
 801429c:	0814f973 	.word	0x0814f973
 80142a0:	08010931 	.word	0x08010931
 80142a4:	08013ffd 	.word	0x08013ffd
 80142a8:	0814f96f 	.word	0x0814f96f

080142ac <__sfputc_r>:
 80142ac:	6893      	ldr	r3, [r2, #8]
 80142ae:	3b01      	subs	r3, #1
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	b410      	push	{r4}
 80142b4:	6093      	str	r3, [r2, #8]
 80142b6:	da08      	bge.n	80142ca <__sfputc_r+0x1e>
 80142b8:	6994      	ldr	r4, [r2, #24]
 80142ba:	42a3      	cmp	r3, r4
 80142bc:	db01      	blt.n	80142c2 <__sfputc_r+0x16>
 80142be:	290a      	cmp	r1, #10
 80142c0:	d103      	bne.n	80142ca <__sfputc_r+0x1e>
 80142c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142c6:	f7fd ba9c 	b.w	8011802 <__swbuf_r>
 80142ca:	6813      	ldr	r3, [r2, #0]
 80142cc:	1c58      	adds	r0, r3, #1
 80142ce:	6010      	str	r0, [r2, #0]
 80142d0:	7019      	strb	r1, [r3, #0]
 80142d2:	4608      	mov	r0, r1
 80142d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142d8:	4770      	bx	lr

080142da <__sfputs_r>:
 80142da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142dc:	4606      	mov	r6, r0
 80142de:	460f      	mov	r7, r1
 80142e0:	4614      	mov	r4, r2
 80142e2:	18d5      	adds	r5, r2, r3
 80142e4:	42ac      	cmp	r4, r5
 80142e6:	d101      	bne.n	80142ec <__sfputs_r+0x12>
 80142e8:	2000      	movs	r0, #0
 80142ea:	e007      	b.n	80142fc <__sfputs_r+0x22>
 80142ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142f0:	463a      	mov	r2, r7
 80142f2:	4630      	mov	r0, r6
 80142f4:	f7ff ffda 	bl	80142ac <__sfputc_r>
 80142f8:	1c43      	adds	r3, r0, #1
 80142fa:	d1f3      	bne.n	80142e4 <__sfputs_r+0xa>
 80142fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014300 <_vfiprintf_r>:
 8014300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014304:	460d      	mov	r5, r1
 8014306:	b09d      	sub	sp, #116	; 0x74
 8014308:	4614      	mov	r4, r2
 801430a:	4698      	mov	r8, r3
 801430c:	4606      	mov	r6, r0
 801430e:	b118      	cbz	r0, 8014318 <_vfiprintf_r+0x18>
 8014310:	6a03      	ldr	r3, [r0, #32]
 8014312:	b90b      	cbnz	r3, 8014318 <_vfiprintf_r+0x18>
 8014314:	f7fd f96e 	bl	80115f4 <__sinit>
 8014318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801431a:	07d9      	lsls	r1, r3, #31
 801431c:	d405      	bmi.n	801432a <_vfiprintf_r+0x2a>
 801431e:	89ab      	ldrh	r3, [r5, #12]
 8014320:	059a      	lsls	r2, r3, #22
 8014322:	d402      	bmi.n	801432a <_vfiprintf_r+0x2a>
 8014324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014326:	f7fd fb8e 	bl	8011a46 <__retarget_lock_acquire_recursive>
 801432a:	89ab      	ldrh	r3, [r5, #12]
 801432c:	071b      	lsls	r3, r3, #28
 801432e:	d501      	bpl.n	8014334 <_vfiprintf_r+0x34>
 8014330:	692b      	ldr	r3, [r5, #16]
 8014332:	b99b      	cbnz	r3, 801435c <_vfiprintf_r+0x5c>
 8014334:	4629      	mov	r1, r5
 8014336:	4630      	mov	r0, r6
 8014338:	f7fd faa0 	bl	801187c <__swsetup_r>
 801433c:	b170      	cbz	r0, 801435c <_vfiprintf_r+0x5c>
 801433e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014340:	07dc      	lsls	r4, r3, #31
 8014342:	d504      	bpl.n	801434e <_vfiprintf_r+0x4e>
 8014344:	f04f 30ff 	mov.w	r0, #4294967295
 8014348:	b01d      	add	sp, #116	; 0x74
 801434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801434e:	89ab      	ldrh	r3, [r5, #12]
 8014350:	0598      	lsls	r0, r3, #22
 8014352:	d4f7      	bmi.n	8014344 <_vfiprintf_r+0x44>
 8014354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014356:	f7fd fb77 	bl	8011a48 <__retarget_lock_release_recursive>
 801435a:	e7f3      	b.n	8014344 <_vfiprintf_r+0x44>
 801435c:	2300      	movs	r3, #0
 801435e:	9309      	str	r3, [sp, #36]	; 0x24
 8014360:	2320      	movs	r3, #32
 8014362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014366:	f8cd 800c 	str.w	r8, [sp, #12]
 801436a:	2330      	movs	r3, #48	; 0x30
 801436c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014520 <_vfiprintf_r+0x220>
 8014370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014374:	f04f 0901 	mov.w	r9, #1
 8014378:	4623      	mov	r3, r4
 801437a:	469a      	mov	sl, r3
 801437c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014380:	b10a      	cbz	r2, 8014386 <_vfiprintf_r+0x86>
 8014382:	2a25      	cmp	r2, #37	; 0x25
 8014384:	d1f9      	bne.n	801437a <_vfiprintf_r+0x7a>
 8014386:	ebba 0b04 	subs.w	fp, sl, r4
 801438a:	d00b      	beq.n	80143a4 <_vfiprintf_r+0xa4>
 801438c:	465b      	mov	r3, fp
 801438e:	4622      	mov	r2, r4
 8014390:	4629      	mov	r1, r5
 8014392:	4630      	mov	r0, r6
 8014394:	f7ff ffa1 	bl	80142da <__sfputs_r>
 8014398:	3001      	adds	r0, #1
 801439a:	f000 80a9 	beq.w	80144f0 <_vfiprintf_r+0x1f0>
 801439e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143a0:	445a      	add	r2, fp
 80143a2:	9209      	str	r2, [sp, #36]	; 0x24
 80143a4:	f89a 3000 	ldrb.w	r3, [sl]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 80a1 	beq.w	80144f0 <_vfiprintf_r+0x1f0>
 80143ae:	2300      	movs	r3, #0
 80143b0:	f04f 32ff 	mov.w	r2, #4294967295
 80143b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143b8:	f10a 0a01 	add.w	sl, sl, #1
 80143bc:	9304      	str	r3, [sp, #16]
 80143be:	9307      	str	r3, [sp, #28]
 80143c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143c4:	931a      	str	r3, [sp, #104]	; 0x68
 80143c6:	4654      	mov	r4, sl
 80143c8:	2205      	movs	r2, #5
 80143ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ce:	4854      	ldr	r0, [pc, #336]	; (8014520 <_vfiprintf_r+0x220>)
 80143d0:	f7f1 ff26 	bl	8006220 <memchr>
 80143d4:	9a04      	ldr	r2, [sp, #16]
 80143d6:	b9d8      	cbnz	r0, 8014410 <_vfiprintf_r+0x110>
 80143d8:	06d1      	lsls	r1, r2, #27
 80143da:	bf44      	itt	mi
 80143dc:	2320      	movmi	r3, #32
 80143de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143e2:	0713      	lsls	r3, r2, #28
 80143e4:	bf44      	itt	mi
 80143e6:	232b      	movmi	r3, #43	; 0x2b
 80143e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ec:	f89a 3000 	ldrb.w	r3, [sl]
 80143f0:	2b2a      	cmp	r3, #42	; 0x2a
 80143f2:	d015      	beq.n	8014420 <_vfiprintf_r+0x120>
 80143f4:	9a07      	ldr	r2, [sp, #28]
 80143f6:	4654      	mov	r4, sl
 80143f8:	2000      	movs	r0, #0
 80143fa:	f04f 0c0a 	mov.w	ip, #10
 80143fe:	4621      	mov	r1, r4
 8014400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014404:	3b30      	subs	r3, #48	; 0x30
 8014406:	2b09      	cmp	r3, #9
 8014408:	d94d      	bls.n	80144a6 <_vfiprintf_r+0x1a6>
 801440a:	b1b0      	cbz	r0, 801443a <_vfiprintf_r+0x13a>
 801440c:	9207      	str	r2, [sp, #28]
 801440e:	e014      	b.n	801443a <_vfiprintf_r+0x13a>
 8014410:	eba0 0308 	sub.w	r3, r0, r8
 8014414:	fa09 f303 	lsl.w	r3, r9, r3
 8014418:	4313      	orrs	r3, r2
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	46a2      	mov	sl, r4
 801441e:	e7d2      	b.n	80143c6 <_vfiprintf_r+0xc6>
 8014420:	9b03      	ldr	r3, [sp, #12]
 8014422:	1d19      	adds	r1, r3, #4
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	9103      	str	r1, [sp, #12]
 8014428:	2b00      	cmp	r3, #0
 801442a:	bfbb      	ittet	lt
 801442c:	425b      	neglt	r3, r3
 801442e:	f042 0202 	orrlt.w	r2, r2, #2
 8014432:	9307      	strge	r3, [sp, #28]
 8014434:	9307      	strlt	r3, [sp, #28]
 8014436:	bfb8      	it	lt
 8014438:	9204      	strlt	r2, [sp, #16]
 801443a:	7823      	ldrb	r3, [r4, #0]
 801443c:	2b2e      	cmp	r3, #46	; 0x2e
 801443e:	d10c      	bne.n	801445a <_vfiprintf_r+0x15a>
 8014440:	7863      	ldrb	r3, [r4, #1]
 8014442:	2b2a      	cmp	r3, #42	; 0x2a
 8014444:	d134      	bne.n	80144b0 <_vfiprintf_r+0x1b0>
 8014446:	9b03      	ldr	r3, [sp, #12]
 8014448:	1d1a      	adds	r2, r3, #4
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	9203      	str	r2, [sp, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	bfb8      	it	lt
 8014452:	f04f 33ff 	movlt.w	r3, #4294967295
 8014456:	3402      	adds	r4, #2
 8014458:	9305      	str	r3, [sp, #20]
 801445a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014530 <_vfiprintf_r+0x230>
 801445e:	7821      	ldrb	r1, [r4, #0]
 8014460:	2203      	movs	r2, #3
 8014462:	4650      	mov	r0, sl
 8014464:	f7f1 fedc 	bl	8006220 <memchr>
 8014468:	b138      	cbz	r0, 801447a <_vfiprintf_r+0x17a>
 801446a:	9b04      	ldr	r3, [sp, #16]
 801446c:	eba0 000a 	sub.w	r0, r0, sl
 8014470:	2240      	movs	r2, #64	; 0x40
 8014472:	4082      	lsls	r2, r0
 8014474:	4313      	orrs	r3, r2
 8014476:	3401      	adds	r4, #1
 8014478:	9304      	str	r3, [sp, #16]
 801447a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801447e:	4829      	ldr	r0, [pc, #164]	; (8014524 <_vfiprintf_r+0x224>)
 8014480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014484:	2206      	movs	r2, #6
 8014486:	f7f1 fecb 	bl	8006220 <memchr>
 801448a:	2800      	cmp	r0, #0
 801448c:	d03f      	beq.n	801450e <_vfiprintf_r+0x20e>
 801448e:	4b26      	ldr	r3, [pc, #152]	; (8014528 <_vfiprintf_r+0x228>)
 8014490:	bb1b      	cbnz	r3, 80144da <_vfiprintf_r+0x1da>
 8014492:	9b03      	ldr	r3, [sp, #12]
 8014494:	3307      	adds	r3, #7
 8014496:	f023 0307 	bic.w	r3, r3, #7
 801449a:	3308      	adds	r3, #8
 801449c:	9303      	str	r3, [sp, #12]
 801449e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a0:	443b      	add	r3, r7
 80144a2:	9309      	str	r3, [sp, #36]	; 0x24
 80144a4:	e768      	b.n	8014378 <_vfiprintf_r+0x78>
 80144a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80144aa:	460c      	mov	r4, r1
 80144ac:	2001      	movs	r0, #1
 80144ae:	e7a6      	b.n	80143fe <_vfiprintf_r+0xfe>
 80144b0:	2300      	movs	r3, #0
 80144b2:	3401      	adds	r4, #1
 80144b4:	9305      	str	r3, [sp, #20]
 80144b6:	4619      	mov	r1, r3
 80144b8:	f04f 0c0a 	mov.w	ip, #10
 80144bc:	4620      	mov	r0, r4
 80144be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144c2:	3a30      	subs	r2, #48	; 0x30
 80144c4:	2a09      	cmp	r2, #9
 80144c6:	d903      	bls.n	80144d0 <_vfiprintf_r+0x1d0>
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d0c6      	beq.n	801445a <_vfiprintf_r+0x15a>
 80144cc:	9105      	str	r1, [sp, #20]
 80144ce:	e7c4      	b.n	801445a <_vfiprintf_r+0x15a>
 80144d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80144d4:	4604      	mov	r4, r0
 80144d6:	2301      	movs	r3, #1
 80144d8:	e7f0      	b.n	80144bc <_vfiprintf_r+0x1bc>
 80144da:	ab03      	add	r3, sp, #12
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	462a      	mov	r2, r5
 80144e0:	4b12      	ldr	r3, [pc, #72]	; (801452c <_vfiprintf_r+0x22c>)
 80144e2:	a904      	add	r1, sp, #16
 80144e4:	4630      	mov	r0, r6
 80144e6:	f7fc fa23 	bl	8010930 <_printf_float>
 80144ea:	4607      	mov	r7, r0
 80144ec:	1c78      	adds	r0, r7, #1
 80144ee:	d1d6      	bne.n	801449e <_vfiprintf_r+0x19e>
 80144f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f2:	07d9      	lsls	r1, r3, #31
 80144f4:	d405      	bmi.n	8014502 <_vfiprintf_r+0x202>
 80144f6:	89ab      	ldrh	r3, [r5, #12]
 80144f8:	059a      	lsls	r2, r3, #22
 80144fa:	d402      	bmi.n	8014502 <_vfiprintf_r+0x202>
 80144fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144fe:	f7fd faa3 	bl	8011a48 <__retarget_lock_release_recursive>
 8014502:	89ab      	ldrh	r3, [r5, #12]
 8014504:	065b      	lsls	r3, r3, #25
 8014506:	f53f af1d 	bmi.w	8014344 <_vfiprintf_r+0x44>
 801450a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801450c:	e71c      	b.n	8014348 <_vfiprintf_r+0x48>
 801450e:	ab03      	add	r3, sp, #12
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	462a      	mov	r2, r5
 8014514:	4b05      	ldr	r3, [pc, #20]	; (801452c <_vfiprintf_r+0x22c>)
 8014516:	a904      	add	r1, sp, #16
 8014518:	4630      	mov	r0, r6
 801451a:	f7fc fcad 	bl	8010e78 <_printf_i>
 801451e:	e7e4      	b.n	80144ea <_vfiprintf_r+0x1ea>
 8014520:	0814f969 	.word	0x0814f969
 8014524:	0814f973 	.word	0x0814f973
 8014528:	08010931 	.word	0x08010931
 801452c:	080142db 	.word	0x080142db
 8014530:	0814f96f 	.word	0x0814f96f

08014534 <__sflush_r>:
 8014534:	898a      	ldrh	r2, [r1, #12]
 8014536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801453a:	4605      	mov	r5, r0
 801453c:	0710      	lsls	r0, r2, #28
 801453e:	460c      	mov	r4, r1
 8014540:	d458      	bmi.n	80145f4 <__sflush_r+0xc0>
 8014542:	684b      	ldr	r3, [r1, #4]
 8014544:	2b00      	cmp	r3, #0
 8014546:	dc05      	bgt.n	8014554 <__sflush_r+0x20>
 8014548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801454a:	2b00      	cmp	r3, #0
 801454c:	dc02      	bgt.n	8014554 <__sflush_r+0x20>
 801454e:	2000      	movs	r0, #0
 8014550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014556:	2e00      	cmp	r6, #0
 8014558:	d0f9      	beq.n	801454e <__sflush_r+0x1a>
 801455a:	2300      	movs	r3, #0
 801455c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014560:	682f      	ldr	r7, [r5, #0]
 8014562:	6a21      	ldr	r1, [r4, #32]
 8014564:	602b      	str	r3, [r5, #0]
 8014566:	d032      	beq.n	80145ce <__sflush_r+0x9a>
 8014568:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801456a:	89a3      	ldrh	r3, [r4, #12]
 801456c:	075a      	lsls	r2, r3, #29
 801456e:	d505      	bpl.n	801457c <__sflush_r+0x48>
 8014570:	6863      	ldr	r3, [r4, #4]
 8014572:	1ac0      	subs	r0, r0, r3
 8014574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014576:	b10b      	cbz	r3, 801457c <__sflush_r+0x48>
 8014578:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801457a:	1ac0      	subs	r0, r0, r3
 801457c:	2300      	movs	r3, #0
 801457e:	4602      	mov	r2, r0
 8014580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014582:	6a21      	ldr	r1, [r4, #32]
 8014584:	4628      	mov	r0, r5
 8014586:	47b0      	blx	r6
 8014588:	1c43      	adds	r3, r0, #1
 801458a:	89a3      	ldrh	r3, [r4, #12]
 801458c:	d106      	bne.n	801459c <__sflush_r+0x68>
 801458e:	6829      	ldr	r1, [r5, #0]
 8014590:	291d      	cmp	r1, #29
 8014592:	d82b      	bhi.n	80145ec <__sflush_r+0xb8>
 8014594:	4a29      	ldr	r2, [pc, #164]	; (801463c <__sflush_r+0x108>)
 8014596:	410a      	asrs	r2, r1
 8014598:	07d6      	lsls	r6, r2, #31
 801459a:	d427      	bmi.n	80145ec <__sflush_r+0xb8>
 801459c:	2200      	movs	r2, #0
 801459e:	6062      	str	r2, [r4, #4]
 80145a0:	04d9      	lsls	r1, r3, #19
 80145a2:	6922      	ldr	r2, [r4, #16]
 80145a4:	6022      	str	r2, [r4, #0]
 80145a6:	d504      	bpl.n	80145b2 <__sflush_r+0x7e>
 80145a8:	1c42      	adds	r2, r0, #1
 80145aa:	d101      	bne.n	80145b0 <__sflush_r+0x7c>
 80145ac:	682b      	ldr	r3, [r5, #0]
 80145ae:	b903      	cbnz	r3, 80145b2 <__sflush_r+0x7e>
 80145b0:	6560      	str	r0, [r4, #84]	; 0x54
 80145b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145b4:	602f      	str	r7, [r5, #0]
 80145b6:	2900      	cmp	r1, #0
 80145b8:	d0c9      	beq.n	801454e <__sflush_r+0x1a>
 80145ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145be:	4299      	cmp	r1, r3
 80145c0:	d002      	beq.n	80145c8 <__sflush_r+0x94>
 80145c2:	4628      	mov	r0, r5
 80145c4:	f7fe f8d6 	bl	8012774 <_free_r>
 80145c8:	2000      	movs	r0, #0
 80145ca:	6360      	str	r0, [r4, #52]	; 0x34
 80145cc:	e7c0      	b.n	8014550 <__sflush_r+0x1c>
 80145ce:	2301      	movs	r3, #1
 80145d0:	4628      	mov	r0, r5
 80145d2:	47b0      	blx	r6
 80145d4:	1c41      	adds	r1, r0, #1
 80145d6:	d1c8      	bne.n	801456a <__sflush_r+0x36>
 80145d8:	682b      	ldr	r3, [r5, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0c5      	beq.n	801456a <__sflush_r+0x36>
 80145de:	2b1d      	cmp	r3, #29
 80145e0:	d001      	beq.n	80145e6 <__sflush_r+0xb2>
 80145e2:	2b16      	cmp	r3, #22
 80145e4:	d101      	bne.n	80145ea <__sflush_r+0xb6>
 80145e6:	602f      	str	r7, [r5, #0]
 80145e8:	e7b1      	b.n	801454e <__sflush_r+0x1a>
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145f0:	81a3      	strh	r3, [r4, #12]
 80145f2:	e7ad      	b.n	8014550 <__sflush_r+0x1c>
 80145f4:	690f      	ldr	r7, [r1, #16]
 80145f6:	2f00      	cmp	r7, #0
 80145f8:	d0a9      	beq.n	801454e <__sflush_r+0x1a>
 80145fa:	0793      	lsls	r3, r2, #30
 80145fc:	680e      	ldr	r6, [r1, #0]
 80145fe:	bf08      	it	eq
 8014600:	694b      	ldreq	r3, [r1, #20]
 8014602:	600f      	str	r7, [r1, #0]
 8014604:	bf18      	it	ne
 8014606:	2300      	movne	r3, #0
 8014608:	eba6 0807 	sub.w	r8, r6, r7
 801460c:	608b      	str	r3, [r1, #8]
 801460e:	f1b8 0f00 	cmp.w	r8, #0
 8014612:	dd9c      	ble.n	801454e <__sflush_r+0x1a>
 8014614:	6a21      	ldr	r1, [r4, #32]
 8014616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014618:	4643      	mov	r3, r8
 801461a:	463a      	mov	r2, r7
 801461c:	4628      	mov	r0, r5
 801461e:	47b0      	blx	r6
 8014620:	2800      	cmp	r0, #0
 8014622:	dc06      	bgt.n	8014632 <__sflush_r+0xfe>
 8014624:	89a3      	ldrh	r3, [r4, #12]
 8014626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801462a:	81a3      	strh	r3, [r4, #12]
 801462c:	f04f 30ff 	mov.w	r0, #4294967295
 8014630:	e78e      	b.n	8014550 <__sflush_r+0x1c>
 8014632:	4407      	add	r7, r0
 8014634:	eba8 0800 	sub.w	r8, r8, r0
 8014638:	e7e9      	b.n	801460e <__sflush_r+0xda>
 801463a:	bf00      	nop
 801463c:	dfbffffe 	.word	0xdfbffffe

08014640 <_fflush_r>:
 8014640:	b538      	push	{r3, r4, r5, lr}
 8014642:	690b      	ldr	r3, [r1, #16]
 8014644:	4605      	mov	r5, r0
 8014646:	460c      	mov	r4, r1
 8014648:	b913      	cbnz	r3, 8014650 <_fflush_r+0x10>
 801464a:	2500      	movs	r5, #0
 801464c:	4628      	mov	r0, r5
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	b118      	cbz	r0, 801465a <_fflush_r+0x1a>
 8014652:	6a03      	ldr	r3, [r0, #32]
 8014654:	b90b      	cbnz	r3, 801465a <_fflush_r+0x1a>
 8014656:	f7fc ffcd 	bl	80115f4 <__sinit>
 801465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d0f3      	beq.n	801464a <_fflush_r+0xa>
 8014662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014664:	07d0      	lsls	r0, r2, #31
 8014666:	d404      	bmi.n	8014672 <_fflush_r+0x32>
 8014668:	0599      	lsls	r1, r3, #22
 801466a:	d402      	bmi.n	8014672 <_fflush_r+0x32>
 801466c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801466e:	f7fd f9ea 	bl	8011a46 <__retarget_lock_acquire_recursive>
 8014672:	4628      	mov	r0, r5
 8014674:	4621      	mov	r1, r4
 8014676:	f7ff ff5d 	bl	8014534 <__sflush_r>
 801467a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801467c:	07da      	lsls	r2, r3, #31
 801467e:	4605      	mov	r5, r0
 8014680:	d4e4      	bmi.n	801464c <_fflush_r+0xc>
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	059b      	lsls	r3, r3, #22
 8014686:	d4e1      	bmi.n	801464c <_fflush_r+0xc>
 8014688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801468a:	f7fd f9dd 	bl	8011a48 <__retarget_lock_release_recursive>
 801468e:	e7dd      	b.n	801464c <_fflush_r+0xc>

08014690 <__swhatbuf_r>:
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	460c      	mov	r4, r1
 8014694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014698:	2900      	cmp	r1, #0
 801469a:	b096      	sub	sp, #88	; 0x58
 801469c:	4615      	mov	r5, r2
 801469e:	461e      	mov	r6, r3
 80146a0:	da0d      	bge.n	80146be <__swhatbuf_r+0x2e>
 80146a2:	89a3      	ldrh	r3, [r4, #12]
 80146a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80146a8:	f04f 0100 	mov.w	r1, #0
 80146ac:	bf0c      	ite	eq
 80146ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80146b2:	2340      	movne	r3, #64	; 0x40
 80146b4:	2000      	movs	r0, #0
 80146b6:	6031      	str	r1, [r6, #0]
 80146b8:	602b      	str	r3, [r5, #0]
 80146ba:	b016      	add	sp, #88	; 0x58
 80146bc:	bd70      	pop	{r4, r5, r6, pc}
 80146be:	466a      	mov	r2, sp
 80146c0:	f000 f874 	bl	80147ac <_fstat_r>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	dbec      	blt.n	80146a2 <__swhatbuf_r+0x12>
 80146c8:	9901      	ldr	r1, [sp, #4]
 80146ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80146ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80146d2:	4259      	negs	r1, r3
 80146d4:	4159      	adcs	r1, r3
 80146d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146da:	e7eb      	b.n	80146b4 <__swhatbuf_r+0x24>

080146dc <__smakebuf_r>:
 80146dc:	898b      	ldrh	r3, [r1, #12]
 80146de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80146e0:	079d      	lsls	r5, r3, #30
 80146e2:	4606      	mov	r6, r0
 80146e4:	460c      	mov	r4, r1
 80146e6:	d507      	bpl.n	80146f8 <__smakebuf_r+0x1c>
 80146e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80146ec:	6023      	str	r3, [r4, #0]
 80146ee:	6123      	str	r3, [r4, #16]
 80146f0:	2301      	movs	r3, #1
 80146f2:	6163      	str	r3, [r4, #20]
 80146f4:	b002      	add	sp, #8
 80146f6:	bd70      	pop	{r4, r5, r6, pc}
 80146f8:	ab01      	add	r3, sp, #4
 80146fa:	466a      	mov	r2, sp
 80146fc:	f7ff ffc8 	bl	8014690 <__swhatbuf_r>
 8014700:	9900      	ldr	r1, [sp, #0]
 8014702:	4605      	mov	r5, r0
 8014704:	4630      	mov	r0, r6
 8014706:	f7fe f8a9 	bl	801285c <_malloc_r>
 801470a:	b948      	cbnz	r0, 8014720 <__smakebuf_r+0x44>
 801470c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014710:	059a      	lsls	r2, r3, #22
 8014712:	d4ef      	bmi.n	80146f4 <__smakebuf_r+0x18>
 8014714:	f023 0303 	bic.w	r3, r3, #3
 8014718:	f043 0302 	orr.w	r3, r3, #2
 801471c:	81a3      	strh	r3, [r4, #12]
 801471e:	e7e3      	b.n	80146e8 <__smakebuf_r+0xc>
 8014720:	89a3      	ldrh	r3, [r4, #12]
 8014722:	6020      	str	r0, [r4, #0]
 8014724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014728:	81a3      	strh	r3, [r4, #12]
 801472a:	9b00      	ldr	r3, [sp, #0]
 801472c:	6163      	str	r3, [r4, #20]
 801472e:	9b01      	ldr	r3, [sp, #4]
 8014730:	6120      	str	r0, [r4, #16]
 8014732:	b15b      	cbz	r3, 801474c <__smakebuf_r+0x70>
 8014734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014738:	4630      	mov	r0, r6
 801473a:	f000 f849 	bl	80147d0 <_isatty_r>
 801473e:	b128      	cbz	r0, 801474c <__smakebuf_r+0x70>
 8014740:	89a3      	ldrh	r3, [r4, #12]
 8014742:	f023 0303 	bic.w	r3, r3, #3
 8014746:	f043 0301 	orr.w	r3, r3, #1
 801474a:	81a3      	strh	r3, [r4, #12]
 801474c:	89a3      	ldrh	r3, [r4, #12]
 801474e:	431d      	orrs	r5, r3
 8014750:	81a5      	strh	r5, [r4, #12]
 8014752:	e7cf      	b.n	80146f4 <__smakebuf_r+0x18>

08014754 <memmove>:
 8014754:	4288      	cmp	r0, r1
 8014756:	b510      	push	{r4, lr}
 8014758:	eb01 0402 	add.w	r4, r1, r2
 801475c:	d902      	bls.n	8014764 <memmove+0x10>
 801475e:	4284      	cmp	r4, r0
 8014760:	4623      	mov	r3, r4
 8014762:	d807      	bhi.n	8014774 <memmove+0x20>
 8014764:	1e43      	subs	r3, r0, #1
 8014766:	42a1      	cmp	r1, r4
 8014768:	d008      	beq.n	801477c <memmove+0x28>
 801476a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801476e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014772:	e7f8      	b.n	8014766 <memmove+0x12>
 8014774:	4402      	add	r2, r0
 8014776:	4601      	mov	r1, r0
 8014778:	428a      	cmp	r2, r1
 801477a:	d100      	bne.n	801477e <memmove+0x2a>
 801477c:	bd10      	pop	{r4, pc}
 801477e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014786:	e7f7      	b.n	8014778 <memmove+0x24>

08014788 <strncmp>:
 8014788:	b510      	push	{r4, lr}
 801478a:	b16a      	cbz	r2, 80147a8 <strncmp+0x20>
 801478c:	3901      	subs	r1, #1
 801478e:	1884      	adds	r4, r0, r2
 8014790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014794:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014798:	429a      	cmp	r2, r3
 801479a:	d103      	bne.n	80147a4 <strncmp+0x1c>
 801479c:	42a0      	cmp	r0, r4
 801479e:	d001      	beq.n	80147a4 <strncmp+0x1c>
 80147a0:	2a00      	cmp	r2, #0
 80147a2:	d1f5      	bne.n	8014790 <strncmp+0x8>
 80147a4:	1ad0      	subs	r0, r2, r3
 80147a6:	bd10      	pop	{r4, pc}
 80147a8:	4610      	mov	r0, r2
 80147aa:	e7fc      	b.n	80147a6 <strncmp+0x1e>

080147ac <_fstat_r>:
 80147ac:	b538      	push	{r3, r4, r5, lr}
 80147ae:	4d07      	ldr	r5, [pc, #28]	; (80147cc <_fstat_r+0x20>)
 80147b0:	2300      	movs	r3, #0
 80147b2:	4604      	mov	r4, r0
 80147b4:	4608      	mov	r0, r1
 80147b6:	4611      	mov	r1, r2
 80147b8:	602b      	str	r3, [r5, #0]
 80147ba:	f7f4 fa00 	bl	8008bbe <_fstat>
 80147be:	1c43      	adds	r3, r0, #1
 80147c0:	d102      	bne.n	80147c8 <_fstat_r+0x1c>
 80147c2:	682b      	ldr	r3, [r5, #0]
 80147c4:	b103      	cbz	r3, 80147c8 <_fstat_r+0x1c>
 80147c6:	6023      	str	r3, [r4, #0]
 80147c8:	bd38      	pop	{r3, r4, r5, pc}
 80147ca:	bf00      	nop
 80147cc:	2001a11c 	.word	0x2001a11c

080147d0 <_isatty_r>:
 80147d0:	b538      	push	{r3, r4, r5, lr}
 80147d2:	4d06      	ldr	r5, [pc, #24]	; (80147ec <_isatty_r+0x1c>)
 80147d4:	2300      	movs	r3, #0
 80147d6:	4604      	mov	r4, r0
 80147d8:	4608      	mov	r0, r1
 80147da:	602b      	str	r3, [r5, #0]
 80147dc:	f7f4 f9ff 	bl	8008bde <_isatty>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d102      	bne.n	80147ea <_isatty_r+0x1a>
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	b103      	cbz	r3, 80147ea <_isatty_r+0x1a>
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	2001a11c 	.word	0x2001a11c

080147f0 <_sbrk_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d06      	ldr	r5, [pc, #24]	; (801480c <_sbrk_r+0x1c>)
 80147f4:	2300      	movs	r3, #0
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	602b      	str	r3, [r5, #0]
 80147fc:	f7f4 fa08 	bl	8008c10 <_sbrk>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_sbrk_r+0x1a>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_sbrk_r+0x1a>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	2001a11c 	.word	0x2001a11c

08014810 <nan>:
 8014810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014818 <nan+0x8>
 8014814:	4770      	bx	lr
 8014816:	bf00      	nop
 8014818:	00000000 	.word	0x00000000
 801481c:	7ff80000 	.word	0x7ff80000

08014820 <__assert_func>:
 8014820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014822:	4614      	mov	r4, r2
 8014824:	461a      	mov	r2, r3
 8014826:	4b09      	ldr	r3, [pc, #36]	; (801484c <__assert_func+0x2c>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	4605      	mov	r5, r0
 801482c:	68d8      	ldr	r0, [r3, #12]
 801482e:	b14c      	cbz	r4, 8014844 <__assert_func+0x24>
 8014830:	4b07      	ldr	r3, [pc, #28]	; (8014850 <__assert_func+0x30>)
 8014832:	9100      	str	r1, [sp, #0]
 8014834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014838:	4906      	ldr	r1, [pc, #24]	; (8014854 <__assert_func+0x34>)
 801483a:	462b      	mov	r3, r5
 801483c:	f000 fbca 	bl	8014fd4 <fiprintf>
 8014840:	f000 fbda 	bl	8014ff8 <abort>
 8014844:	4b04      	ldr	r3, [pc, #16]	; (8014858 <__assert_func+0x38>)
 8014846:	461c      	mov	r4, r3
 8014848:	e7f3      	b.n	8014832 <__assert_func+0x12>
 801484a:	bf00      	nop
 801484c:	20000920 	.word	0x20000920
 8014850:	0814f982 	.word	0x0814f982
 8014854:	0814f98f 	.word	0x0814f98f
 8014858:	0814f9bd 	.word	0x0814f9bd

0801485c <_calloc_r>:
 801485c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801485e:	fba1 2402 	umull	r2, r4, r1, r2
 8014862:	b94c      	cbnz	r4, 8014878 <_calloc_r+0x1c>
 8014864:	4611      	mov	r1, r2
 8014866:	9201      	str	r2, [sp, #4]
 8014868:	f7fd fff8 	bl	801285c <_malloc_r>
 801486c:	9a01      	ldr	r2, [sp, #4]
 801486e:	4605      	mov	r5, r0
 8014870:	b930      	cbnz	r0, 8014880 <_calloc_r+0x24>
 8014872:	4628      	mov	r0, r5
 8014874:	b003      	add	sp, #12
 8014876:	bd30      	pop	{r4, r5, pc}
 8014878:	220c      	movs	r2, #12
 801487a:	6002      	str	r2, [r0, #0]
 801487c:	2500      	movs	r5, #0
 801487e:	e7f8      	b.n	8014872 <_calloc_r+0x16>
 8014880:	4621      	mov	r1, r4
 8014882:	f7fd f863 	bl	801194c <memset>
 8014886:	e7f4      	b.n	8014872 <_calloc_r+0x16>

08014888 <rshift>:
 8014888:	6903      	ldr	r3, [r0, #16]
 801488a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801488e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014892:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014896:	f100 0414 	add.w	r4, r0, #20
 801489a:	dd45      	ble.n	8014928 <rshift+0xa0>
 801489c:	f011 011f 	ands.w	r1, r1, #31
 80148a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148a8:	d10c      	bne.n	80148c4 <rshift+0x3c>
 80148aa:	f100 0710 	add.w	r7, r0, #16
 80148ae:	4629      	mov	r1, r5
 80148b0:	42b1      	cmp	r1, r6
 80148b2:	d334      	bcc.n	801491e <rshift+0x96>
 80148b4:	1a9b      	subs	r3, r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	1eea      	subs	r2, r5, #3
 80148ba:	4296      	cmp	r6, r2
 80148bc:	bf38      	it	cc
 80148be:	2300      	movcc	r3, #0
 80148c0:	4423      	add	r3, r4
 80148c2:	e015      	b.n	80148f0 <rshift+0x68>
 80148c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80148c8:	f1c1 0820 	rsb	r8, r1, #32
 80148cc:	40cf      	lsrs	r7, r1
 80148ce:	f105 0e04 	add.w	lr, r5, #4
 80148d2:	46a1      	mov	r9, r4
 80148d4:	4576      	cmp	r6, lr
 80148d6:	46f4      	mov	ip, lr
 80148d8:	d815      	bhi.n	8014906 <rshift+0x7e>
 80148da:	1a9a      	subs	r2, r3, r2
 80148dc:	0092      	lsls	r2, r2, #2
 80148de:	3a04      	subs	r2, #4
 80148e0:	3501      	adds	r5, #1
 80148e2:	42ae      	cmp	r6, r5
 80148e4:	bf38      	it	cc
 80148e6:	2200      	movcc	r2, #0
 80148e8:	18a3      	adds	r3, r4, r2
 80148ea:	50a7      	str	r7, [r4, r2]
 80148ec:	b107      	cbz	r7, 80148f0 <rshift+0x68>
 80148ee:	3304      	adds	r3, #4
 80148f0:	1b1a      	subs	r2, r3, r4
 80148f2:	42a3      	cmp	r3, r4
 80148f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80148f8:	bf08      	it	eq
 80148fa:	2300      	moveq	r3, #0
 80148fc:	6102      	str	r2, [r0, #16]
 80148fe:	bf08      	it	eq
 8014900:	6143      	streq	r3, [r0, #20]
 8014902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014906:	f8dc c000 	ldr.w	ip, [ip]
 801490a:	fa0c fc08 	lsl.w	ip, ip, r8
 801490e:	ea4c 0707 	orr.w	r7, ip, r7
 8014912:	f849 7b04 	str.w	r7, [r9], #4
 8014916:	f85e 7b04 	ldr.w	r7, [lr], #4
 801491a:	40cf      	lsrs	r7, r1
 801491c:	e7da      	b.n	80148d4 <rshift+0x4c>
 801491e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014922:	f847 cf04 	str.w	ip, [r7, #4]!
 8014926:	e7c3      	b.n	80148b0 <rshift+0x28>
 8014928:	4623      	mov	r3, r4
 801492a:	e7e1      	b.n	80148f0 <rshift+0x68>

0801492c <__hexdig_fun>:
 801492c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014930:	2b09      	cmp	r3, #9
 8014932:	d802      	bhi.n	801493a <__hexdig_fun+0xe>
 8014934:	3820      	subs	r0, #32
 8014936:	b2c0      	uxtb	r0, r0
 8014938:	4770      	bx	lr
 801493a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801493e:	2b05      	cmp	r3, #5
 8014940:	d801      	bhi.n	8014946 <__hexdig_fun+0x1a>
 8014942:	3847      	subs	r0, #71	; 0x47
 8014944:	e7f7      	b.n	8014936 <__hexdig_fun+0xa>
 8014946:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801494a:	2b05      	cmp	r3, #5
 801494c:	d801      	bhi.n	8014952 <__hexdig_fun+0x26>
 801494e:	3827      	subs	r0, #39	; 0x27
 8014950:	e7f1      	b.n	8014936 <__hexdig_fun+0xa>
 8014952:	2000      	movs	r0, #0
 8014954:	4770      	bx	lr
	...

08014958 <__gethex>:
 8014958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801495c:	4617      	mov	r7, r2
 801495e:	680a      	ldr	r2, [r1, #0]
 8014960:	b085      	sub	sp, #20
 8014962:	f102 0b02 	add.w	fp, r2, #2
 8014966:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801496a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801496e:	4681      	mov	r9, r0
 8014970:	468a      	mov	sl, r1
 8014972:	9302      	str	r3, [sp, #8]
 8014974:	32fe      	adds	r2, #254	; 0xfe
 8014976:	eb02 030b 	add.w	r3, r2, fp
 801497a:	46d8      	mov	r8, fp
 801497c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	2830      	cmp	r0, #48	; 0x30
 8014984:	d0f7      	beq.n	8014976 <__gethex+0x1e>
 8014986:	f7ff ffd1 	bl	801492c <__hexdig_fun>
 801498a:	4604      	mov	r4, r0
 801498c:	2800      	cmp	r0, #0
 801498e:	d138      	bne.n	8014a02 <__gethex+0xaa>
 8014990:	49a7      	ldr	r1, [pc, #668]	; (8014c30 <__gethex+0x2d8>)
 8014992:	2201      	movs	r2, #1
 8014994:	4640      	mov	r0, r8
 8014996:	f7ff fef7 	bl	8014788 <strncmp>
 801499a:	4606      	mov	r6, r0
 801499c:	2800      	cmp	r0, #0
 801499e:	d169      	bne.n	8014a74 <__gethex+0x11c>
 80149a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80149a4:	465d      	mov	r5, fp
 80149a6:	f7ff ffc1 	bl	801492c <__hexdig_fun>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	d064      	beq.n	8014a78 <__gethex+0x120>
 80149ae:	465a      	mov	r2, fp
 80149b0:	7810      	ldrb	r0, [r2, #0]
 80149b2:	2830      	cmp	r0, #48	; 0x30
 80149b4:	4690      	mov	r8, r2
 80149b6:	f102 0201 	add.w	r2, r2, #1
 80149ba:	d0f9      	beq.n	80149b0 <__gethex+0x58>
 80149bc:	f7ff ffb6 	bl	801492c <__hexdig_fun>
 80149c0:	2301      	movs	r3, #1
 80149c2:	fab0 f480 	clz	r4, r0
 80149c6:	0964      	lsrs	r4, r4, #5
 80149c8:	465e      	mov	r6, fp
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	4642      	mov	r2, r8
 80149ce:	4615      	mov	r5, r2
 80149d0:	3201      	adds	r2, #1
 80149d2:	7828      	ldrb	r0, [r5, #0]
 80149d4:	f7ff ffaa 	bl	801492c <__hexdig_fun>
 80149d8:	2800      	cmp	r0, #0
 80149da:	d1f8      	bne.n	80149ce <__gethex+0x76>
 80149dc:	4994      	ldr	r1, [pc, #592]	; (8014c30 <__gethex+0x2d8>)
 80149de:	2201      	movs	r2, #1
 80149e0:	4628      	mov	r0, r5
 80149e2:	f7ff fed1 	bl	8014788 <strncmp>
 80149e6:	b978      	cbnz	r0, 8014a08 <__gethex+0xb0>
 80149e8:	b946      	cbnz	r6, 80149fc <__gethex+0xa4>
 80149ea:	1c6e      	adds	r6, r5, #1
 80149ec:	4632      	mov	r2, r6
 80149ee:	4615      	mov	r5, r2
 80149f0:	3201      	adds	r2, #1
 80149f2:	7828      	ldrb	r0, [r5, #0]
 80149f4:	f7ff ff9a 	bl	801492c <__hexdig_fun>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d1f8      	bne.n	80149ee <__gethex+0x96>
 80149fc:	1b73      	subs	r3, r6, r5
 80149fe:	009e      	lsls	r6, r3, #2
 8014a00:	e004      	b.n	8014a0c <__gethex+0xb4>
 8014a02:	2400      	movs	r4, #0
 8014a04:	4626      	mov	r6, r4
 8014a06:	e7e1      	b.n	80149cc <__gethex+0x74>
 8014a08:	2e00      	cmp	r6, #0
 8014a0a:	d1f7      	bne.n	80149fc <__gethex+0xa4>
 8014a0c:	782b      	ldrb	r3, [r5, #0]
 8014a0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014a12:	2b50      	cmp	r3, #80	; 0x50
 8014a14:	d13d      	bne.n	8014a92 <__gethex+0x13a>
 8014a16:	786b      	ldrb	r3, [r5, #1]
 8014a18:	2b2b      	cmp	r3, #43	; 0x2b
 8014a1a:	d02f      	beq.n	8014a7c <__gethex+0x124>
 8014a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8014a1e:	d031      	beq.n	8014a84 <__gethex+0x12c>
 8014a20:	1c69      	adds	r1, r5, #1
 8014a22:	f04f 0b00 	mov.w	fp, #0
 8014a26:	7808      	ldrb	r0, [r1, #0]
 8014a28:	f7ff ff80 	bl	801492c <__hexdig_fun>
 8014a2c:	1e42      	subs	r2, r0, #1
 8014a2e:	b2d2      	uxtb	r2, r2
 8014a30:	2a18      	cmp	r2, #24
 8014a32:	d82e      	bhi.n	8014a92 <__gethex+0x13a>
 8014a34:	f1a0 0210 	sub.w	r2, r0, #16
 8014a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a3c:	f7ff ff76 	bl	801492c <__hexdig_fun>
 8014a40:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a44:	fa5f fc8c 	uxtb.w	ip, ip
 8014a48:	f1bc 0f18 	cmp.w	ip, #24
 8014a4c:	d91d      	bls.n	8014a8a <__gethex+0x132>
 8014a4e:	f1bb 0f00 	cmp.w	fp, #0
 8014a52:	d000      	beq.n	8014a56 <__gethex+0xfe>
 8014a54:	4252      	negs	r2, r2
 8014a56:	4416      	add	r6, r2
 8014a58:	f8ca 1000 	str.w	r1, [sl]
 8014a5c:	b1dc      	cbz	r4, 8014a96 <__gethex+0x13e>
 8014a5e:	9b01      	ldr	r3, [sp, #4]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	bf14      	ite	ne
 8014a64:	f04f 0800 	movne.w	r8, #0
 8014a68:	f04f 0806 	moveq.w	r8, #6
 8014a6c:	4640      	mov	r0, r8
 8014a6e:	b005      	add	sp, #20
 8014a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a74:	4645      	mov	r5, r8
 8014a76:	4626      	mov	r6, r4
 8014a78:	2401      	movs	r4, #1
 8014a7a:	e7c7      	b.n	8014a0c <__gethex+0xb4>
 8014a7c:	f04f 0b00 	mov.w	fp, #0
 8014a80:	1ca9      	adds	r1, r5, #2
 8014a82:	e7d0      	b.n	8014a26 <__gethex+0xce>
 8014a84:	f04f 0b01 	mov.w	fp, #1
 8014a88:	e7fa      	b.n	8014a80 <__gethex+0x128>
 8014a8a:	230a      	movs	r3, #10
 8014a8c:	fb03 0002 	mla	r0, r3, r2, r0
 8014a90:	e7d0      	b.n	8014a34 <__gethex+0xdc>
 8014a92:	4629      	mov	r1, r5
 8014a94:	e7e0      	b.n	8014a58 <__gethex+0x100>
 8014a96:	eba5 0308 	sub.w	r3, r5, r8
 8014a9a:	3b01      	subs	r3, #1
 8014a9c:	4621      	mov	r1, r4
 8014a9e:	2b07      	cmp	r3, #7
 8014aa0:	dc0a      	bgt.n	8014ab8 <__gethex+0x160>
 8014aa2:	4648      	mov	r0, r9
 8014aa4:	f7fd ff66 	bl	8012974 <_Balloc>
 8014aa8:	4604      	mov	r4, r0
 8014aaa:	b940      	cbnz	r0, 8014abe <__gethex+0x166>
 8014aac:	4b61      	ldr	r3, [pc, #388]	; (8014c34 <__gethex+0x2dc>)
 8014aae:	4602      	mov	r2, r0
 8014ab0:	21e4      	movs	r1, #228	; 0xe4
 8014ab2:	4861      	ldr	r0, [pc, #388]	; (8014c38 <__gethex+0x2e0>)
 8014ab4:	f7ff feb4 	bl	8014820 <__assert_func>
 8014ab8:	3101      	adds	r1, #1
 8014aba:	105b      	asrs	r3, r3, #1
 8014abc:	e7ef      	b.n	8014a9e <__gethex+0x146>
 8014abe:	f100 0a14 	add.w	sl, r0, #20
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	495a      	ldr	r1, [pc, #360]	; (8014c30 <__gethex+0x2d8>)
 8014ac6:	f8cd a004 	str.w	sl, [sp, #4]
 8014aca:	469b      	mov	fp, r3
 8014acc:	45a8      	cmp	r8, r5
 8014ace:	d342      	bcc.n	8014b56 <__gethex+0x1fe>
 8014ad0:	9801      	ldr	r0, [sp, #4]
 8014ad2:	f840 bb04 	str.w	fp, [r0], #4
 8014ad6:	eba0 000a 	sub.w	r0, r0, sl
 8014ada:	1080      	asrs	r0, r0, #2
 8014adc:	6120      	str	r0, [r4, #16]
 8014ade:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014ae2:	4658      	mov	r0, fp
 8014ae4:	f7fe f838 	bl	8012b58 <__hi0bits>
 8014ae8:	683d      	ldr	r5, [r7, #0]
 8014aea:	eba8 0000 	sub.w	r0, r8, r0
 8014aee:	42a8      	cmp	r0, r5
 8014af0:	dd59      	ble.n	8014ba6 <__gethex+0x24e>
 8014af2:	eba0 0805 	sub.w	r8, r0, r5
 8014af6:	4641      	mov	r1, r8
 8014af8:	4620      	mov	r0, r4
 8014afa:	f7fe fbc7 	bl	801328c <__any_on>
 8014afe:	4683      	mov	fp, r0
 8014b00:	b1b8      	cbz	r0, 8014b32 <__gethex+0x1da>
 8014b02:	f108 33ff 	add.w	r3, r8, #4294967295
 8014b06:	1159      	asrs	r1, r3, #5
 8014b08:	f003 021f 	and.w	r2, r3, #31
 8014b0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014b10:	f04f 0b01 	mov.w	fp, #1
 8014b14:	fa0b f202 	lsl.w	r2, fp, r2
 8014b18:	420a      	tst	r2, r1
 8014b1a:	d00a      	beq.n	8014b32 <__gethex+0x1da>
 8014b1c:	455b      	cmp	r3, fp
 8014b1e:	dd06      	ble.n	8014b2e <__gethex+0x1d6>
 8014b20:	f1a8 0102 	sub.w	r1, r8, #2
 8014b24:	4620      	mov	r0, r4
 8014b26:	f7fe fbb1 	bl	801328c <__any_on>
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	d138      	bne.n	8014ba0 <__gethex+0x248>
 8014b2e:	f04f 0b02 	mov.w	fp, #2
 8014b32:	4641      	mov	r1, r8
 8014b34:	4620      	mov	r0, r4
 8014b36:	f7ff fea7 	bl	8014888 <rshift>
 8014b3a:	4446      	add	r6, r8
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	42b3      	cmp	r3, r6
 8014b40:	da41      	bge.n	8014bc6 <__gethex+0x26e>
 8014b42:	4621      	mov	r1, r4
 8014b44:	4648      	mov	r0, r9
 8014b46:	f7fd ff55 	bl	80129f4 <_Bfree>
 8014b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	6013      	str	r3, [r2, #0]
 8014b50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014b54:	e78a      	b.n	8014a6c <__gethex+0x114>
 8014b56:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014b5a:	2a2e      	cmp	r2, #46	; 0x2e
 8014b5c:	d014      	beq.n	8014b88 <__gethex+0x230>
 8014b5e:	2b20      	cmp	r3, #32
 8014b60:	d106      	bne.n	8014b70 <__gethex+0x218>
 8014b62:	9b01      	ldr	r3, [sp, #4]
 8014b64:	f843 bb04 	str.w	fp, [r3], #4
 8014b68:	f04f 0b00 	mov.w	fp, #0
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	465b      	mov	r3, fp
 8014b70:	7828      	ldrb	r0, [r5, #0]
 8014b72:	9303      	str	r3, [sp, #12]
 8014b74:	f7ff feda 	bl	801492c <__hexdig_fun>
 8014b78:	9b03      	ldr	r3, [sp, #12]
 8014b7a:	f000 000f 	and.w	r0, r0, #15
 8014b7e:	4098      	lsls	r0, r3
 8014b80:	ea4b 0b00 	orr.w	fp, fp, r0
 8014b84:	3304      	adds	r3, #4
 8014b86:	e7a1      	b.n	8014acc <__gethex+0x174>
 8014b88:	45a8      	cmp	r8, r5
 8014b8a:	d8e8      	bhi.n	8014b5e <__gethex+0x206>
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	4628      	mov	r0, r5
 8014b90:	9303      	str	r3, [sp, #12]
 8014b92:	f7ff fdf9 	bl	8014788 <strncmp>
 8014b96:	4926      	ldr	r1, [pc, #152]	; (8014c30 <__gethex+0x2d8>)
 8014b98:	9b03      	ldr	r3, [sp, #12]
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d1df      	bne.n	8014b5e <__gethex+0x206>
 8014b9e:	e795      	b.n	8014acc <__gethex+0x174>
 8014ba0:	f04f 0b03 	mov.w	fp, #3
 8014ba4:	e7c5      	b.n	8014b32 <__gethex+0x1da>
 8014ba6:	da0b      	bge.n	8014bc0 <__gethex+0x268>
 8014ba8:	eba5 0800 	sub.w	r8, r5, r0
 8014bac:	4621      	mov	r1, r4
 8014bae:	4642      	mov	r2, r8
 8014bb0:	4648      	mov	r0, r9
 8014bb2:	f7fe f939 	bl	8012e28 <__lshift>
 8014bb6:	eba6 0608 	sub.w	r6, r6, r8
 8014bba:	4604      	mov	r4, r0
 8014bbc:	f100 0a14 	add.w	sl, r0, #20
 8014bc0:	f04f 0b00 	mov.w	fp, #0
 8014bc4:	e7ba      	b.n	8014b3c <__gethex+0x1e4>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	42b3      	cmp	r3, r6
 8014bca:	dd73      	ble.n	8014cb4 <__gethex+0x35c>
 8014bcc:	1b9e      	subs	r6, r3, r6
 8014bce:	42b5      	cmp	r5, r6
 8014bd0:	dc34      	bgt.n	8014c3c <__gethex+0x2e4>
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d023      	beq.n	8014c20 <__gethex+0x2c8>
 8014bd8:	2b03      	cmp	r3, #3
 8014bda:	d025      	beq.n	8014c28 <__gethex+0x2d0>
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d115      	bne.n	8014c0c <__gethex+0x2b4>
 8014be0:	42b5      	cmp	r5, r6
 8014be2:	d113      	bne.n	8014c0c <__gethex+0x2b4>
 8014be4:	2d01      	cmp	r5, #1
 8014be6:	d10b      	bne.n	8014c00 <__gethex+0x2a8>
 8014be8:	9a02      	ldr	r2, [sp, #8]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6013      	str	r3, [r2, #0]
 8014bee:	2301      	movs	r3, #1
 8014bf0:	6123      	str	r3, [r4, #16]
 8014bf2:	f8ca 3000 	str.w	r3, [sl]
 8014bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bf8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014bfc:	601c      	str	r4, [r3, #0]
 8014bfe:	e735      	b.n	8014a6c <__gethex+0x114>
 8014c00:	1e69      	subs	r1, r5, #1
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7fe fb42 	bl	801328c <__any_on>
 8014c08:	2800      	cmp	r0, #0
 8014c0a:	d1ed      	bne.n	8014be8 <__gethex+0x290>
 8014c0c:	4621      	mov	r1, r4
 8014c0e:	4648      	mov	r0, r9
 8014c10:	f7fd fef0 	bl	80129f4 <_Bfree>
 8014c14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c16:	2300      	movs	r3, #0
 8014c18:	6013      	str	r3, [r2, #0]
 8014c1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014c1e:	e725      	b.n	8014a6c <__gethex+0x114>
 8014c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d1f2      	bne.n	8014c0c <__gethex+0x2b4>
 8014c26:	e7df      	b.n	8014be8 <__gethex+0x290>
 8014c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d1dc      	bne.n	8014be8 <__gethex+0x290>
 8014c2e:	e7ed      	b.n	8014c0c <__gethex+0x2b4>
 8014c30:	0814f814 	.word	0x0814f814
 8014c34:	0814f6a9 	.word	0x0814f6a9
 8014c38:	0814f9be 	.word	0x0814f9be
 8014c3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014c40:	f1bb 0f00 	cmp.w	fp, #0
 8014c44:	d133      	bne.n	8014cae <__gethex+0x356>
 8014c46:	f1b8 0f00 	cmp.w	r8, #0
 8014c4a:	d004      	beq.n	8014c56 <__gethex+0x2fe>
 8014c4c:	4641      	mov	r1, r8
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7fe fb1c 	bl	801328c <__any_on>
 8014c54:	4683      	mov	fp, r0
 8014c56:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c60:	f008 081f 	and.w	r8, r8, #31
 8014c64:	fa03 f308 	lsl.w	r3, r3, r8
 8014c68:	4213      	tst	r3, r2
 8014c6a:	4631      	mov	r1, r6
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	bf18      	it	ne
 8014c70:	f04b 0b02 	orrne.w	fp, fp, #2
 8014c74:	1bad      	subs	r5, r5, r6
 8014c76:	f7ff fe07 	bl	8014888 <rshift>
 8014c7a:	687e      	ldr	r6, [r7, #4]
 8014c7c:	f04f 0802 	mov.w	r8, #2
 8014c80:	f1bb 0f00 	cmp.w	fp, #0
 8014c84:	d04a      	beq.n	8014d1c <__gethex+0x3c4>
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2b02      	cmp	r3, #2
 8014c8a:	d016      	beq.n	8014cba <__gethex+0x362>
 8014c8c:	2b03      	cmp	r3, #3
 8014c8e:	d018      	beq.n	8014cc2 <__gethex+0x36a>
 8014c90:	2b01      	cmp	r3, #1
 8014c92:	d109      	bne.n	8014ca8 <__gethex+0x350>
 8014c94:	f01b 0f02 	tst.w	fp, #2
 8014c98:	d006      	beq.n	8014ca8 <__gethex+0x350>
 8014c9a:	f8da 3000 	ldr.w	r3, [sl]
 8014c9e:	ea4b 0b03 	orr.w	fp, fp, r3
 8014ca2:	f01b 0f01 	tst.w	fp, #1
 8014ca6:	d10f      	bne.n	8014cc8 <__gethex+0x370>
 8014ca8:	f048 0810 	orr.w	r8, r8, #16
 8014cac:	e036      	b.n	8014d1c <__gethex+0x3c4>
 8014cae:	f04f 0b01 	mov.w	fp, #1
 8014cb2:	e7d0      	b.n	8014c56 <__gethex+0x2fe>
 8014cb4:	f04f 0801 	mov.w	r8, #1
 8014cb8:	e7e2      	b.n	8014c80 <__gethex+0x328>
 8014cba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cbc:	f1c3 0301 	rsb	r3, r3, #1
 8014cc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d0ef      	beq.n	8014ca8 <__gethex+0x350>
 8014cc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014ccc:	f104 0214 	add.w	r2, r4, #20
 8014cd0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014cda:	2300      	movs	r3, #0
 8014cdc:	4694      	mov	ip, r2
 8014cde:	f852 1b04 	ldr.w	r1, [r2], #4
 8014ce2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014ce6:	d01e      	beq.n	8014d26 <__gethex+0x3ce>
 8014ce8:	3101      	adds	r1, #1
 8014cea:	f8cc 1000 	str.w	r1, [ip]
 8014cee:	f1b8 0f02 	cmp.w	r8, #2
 8014cf2:	f104 0214 	add.w	r2, r4, #20
 8014cf6:	d13d      	bne.n	8014d74 <__gethex+0x41c>
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	3b01      	subs	r3, #1
 8014cfc:	42ab      	cmp	r3, r5
 8014cfe:	d10b      	bne.n	8014d18 <__gethex+0x3c0>
 8014d00:	1169      	asrs	r1, r5, #5
 8014d02:	2301      	movs	r3, #1
 8014d04:	f005 051f 	and.w	r5, r5, #31
 8014d08:	fa03 f505 	lsl.w	r5, r3, r5
 8014d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d10:	421d      	tst	r5, r3
 8014d12:	bf18      	it	ne
 8014d14:	f04f 0801 	movne.w	r8, #1
 8014d18:	f048 0820 	orr.w	r8, r8, #32
 8014d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d1e:	601c      	str	r4, [r3, #0]
 8014d20:	9b02      	ldr	r3, [sp, #8]
 8014d22:	601e      	str	r6, [r3, #0]
 8014d24:	e6a2      	b.n	8014a6c <__gethex+0x114>
 8014d26:	4290      	cmp	r0, r2
 8014d28:	f842 3c04 	str.w	r3, [r2, #-4]
 8014d2c:	d8d6      	bhi.n	8014cdc <__gethex+0x384>
 8014d2e:	68a2      	ldr	r2, [r4, #8]
 8014d30:	4593      	cmp	fp, r2
 8014d32:	db17      	blt.n	8014d64 <__gethex+0x40c>
 8014d34:	6861      	ldr	r1, [r4, #4]
 8014d36:	4648      	mov	r0, r9
 8014d38:	3101      	adds	r1, #1
 8014d3a:	f7fd fe1b 	bl	8012974 <_Balloc>
 8014d3e:	4682      	mov	sl, r0
 8014d40:	b918      	cbnz	r0, 8014d4a <__gethex+0x3f2>
 8014d42:	4b1b      	ldr	r3, [pc, #108]	; (8014db0 <__gethex+0x458>)
 8014d44:	4602      	mov	r2, r0
 8014d46:	2184      	movs	r1, #132	; 0x84
 8014d48:	e6b3      	b.n	8014ab2 <__gethex+0x15a>
 8014d4a:	6922      	ldr	r2, [r4, #16]
 8014d4c:	3202      	adds	r2, #2
 8014d4e:	f104 010c 	add.w	r1, r4, #12
 8014d52:	0092      	lsls	r2, r2, #2
 8014d54:	300c      	adds	r0, #12
 8014d56:	f7fc fe7d 	bl	8011a54 <memcpy>
 8014d5a:	4621      	mov	r1, r4
 8014d5c:	4648      	mov	r0, r9
 8014d5e:	f7fd fe49 	bl	80129f4 <_Bfree>
 8014d62:	4654      	mov	r4, sl
 8014d64:	6922      	ldr	r2, [r4, #16]
 8014d66:	1c51      	adds	r1, r2, #1
 8014d68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014d6c:	6121      	str	r1, [r4, #16]
 8014d6e:	2101      	movs	r1, #1
 8014d70:	6151      	str	r1, [r2, #20]
 8014d72:	e7bc      	b.n	8014cee <__gethex+0x396>
 8014d74:	6921      	ldr	r1, [r4, #16]
 8014d76:	4559      	cmp	r1, fp
 8014d78:	dd0b      	ble.n	8014d92 <__gethex+0x43a>
 8014d7a:	2101      	movs	r1, #1
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	f7ff fd83 	bl	8014888 <rshift>
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	3601      	adds	r6, #1
 8014d86:	42b3      	cmp	r3, r6
 8014d88:	f6ff aedb 	blt.w	8014b42 <__gethex+0x1ea>
 8014d8c:	f04f 0801 	mov.w	r8, #1
 8014d90:	e7c2      	b.n	8014d18 <__gethex+0x3c0>
 8014d92:	f015 051f 	ands.w	r5, r5, #31
 8014d96:	d0f9      	beq.n	8014d8c <__gethex+0x434>
 8014d98:	9b01      	ldr	r3, [sp, #4]
 8014d9a:	441a      	add	r2, r3
 8014d9c:	f1c5 0520 	rsb	r5, r5, #32
 8014da0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014da4:	f7fd fed8 	bl	8012b58 <__hi0bits>
 8014da8:	42a8      	cmp	r0, r5
 8014daa:	dbe6      	blt.n	8014d7a <__gethex+0x422>
 8014dac:	e7ee      	b.n	8014d8c <__gethex+0x434>
 8014dae:	bf00      	nop
 8014db0:	0814f6a9 	.word	0x0814f6a9

08014db4 <L_shift>:
 8014db4:	f1c2 0208 	rsb	r2, r2, #8
 8014db8:	0092      	lsls	r2, r2, #2
 8014dba:	b570      	push	{r4, r5, r6, lr}
 8014dbc:	f1c2 0620 	rsb	r6, r2, #32
 8014dc0:	6843      	ldr	r3, [r0, #4]
 8014dc2:	6804      	ldr	r4, [r0, #0]
 8014dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8014dc8:	432c      	orrs	r4, r5
 8014dca:	40d3      	lsrs	r3, r2
 8014dcc:	6004      	str	r4, [r0, #0]
 8014dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8014dd2:	4288      	cmp	r0, r1
 8014dd4:	d3f4      	bcc.n	8014dc0 <L_shift+0xc>
 8014dd6:	bd70      	pop	{r4, r5, r6, pc}

08014dd8 <__match>:
 8014dd8:	b530      	push	{r4, r5, lr}
 8014dda:	6803      	ldr	r3, [r0, #0]
 8014ddc:	3301      	adds	r3, #1
 8014dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014de2:	b914      	cbnz	r4, 8014dea <__match+0x12>
 8014de4:	6003      	str	r3, [r0, #0]
 8014de6:	2001      	movs	r0, #1
 8014de8:	bd30      	pop	{r4, r5, pc}
 8014dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014df2:	2d19      	cmp	r5, #25
 8014df4:	bf98      	it	ls
 8014df6:	3220      	addls	r2, #32
 8014df8:	42a2      	cmp	r2, r4
 8014dfa:	d0f0      	beq.n	8014dde <__match+0x6>
 8014dfc:	2000      	movs	r0, #0
 8014dfe:	e7f3      	b.n	8014de8 <__match+0x10>

08014e00 <__hexnan>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	680b      	ldr	r3, [r1, #0]
 8014e06:	6801      	ldr	r1, [r0, #0]
 8014e08:	115e      	asrs	r6, r3, #5
 8014e0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e0e:	f013 031f 	ands.w	r3, r3, #31
 8014e12:	b087      	sub	sp, #28
 8014e14:	bf18      	it	ne
 8014e16:	3604      	addne	r6, #4
 8014e18:	2500      	movs	r5, #0
 8014e1a:	1f37      	subs	r7, r6, #4
 8014e1c:	4682      	mov	sl, r0
 8014e1e:	4690      	mov	r8, r2
 8014e20:	9301      	str	r3, [sp, #4]
 8014e22:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e26:	46b9      	mov	r9, r7
 8014e28:	463c      	mov	r4, r7
 8014e2a:	9502      	str	r5, [sp, #8]
 8014e2c:	46ab      	mov	fp, r5
 8014e2e:	784a      	ldrb	r2, [r1, #1]
 8014e30:	1c4b      	adds	r3, r1, #1
 8014e32:	9303      	str	r3, [sp, #12]
 8014e34:	b342      	cbz	r2, 8014e88 <__hexnan+0x88>
 8014e36:	4610      	mov	r0, r2
 8014e38:	9105      	str	r1, [sp, #20]
 8014e3a:	9204      	str	r2, [sp, #16]
 8014e3c:	f7ff fd76 	bl	801492c <__hexdig_fun>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	d14f      	bne.n	8014ee4 <__hexnan+0xe4>
 8014e44:	9a04      	ldr	r2, [sp, #16]
 8014e46:	9905      	ldr	r1, [sp, #20]
 8014e48:	2a20      	cmp	r2, #32
 8014e4a:	d818      	bhi.n	8014e7e <__hexnan+0x7e>
 8014e4c:	9b02      	ldr	r3, [sp, #8]
 8014e4e:	459b      	cmp	fp, r3
 8014e50:	dd13      	ble.n	8014e7a <__hexnan+0x7a>
 8014e52:	454c      	cmp	r4, r9
 8014e54:	d206      	bcs.n	8014e64 <__hexnan+0x64>
 8014e56:	2d07      	cmp	r5, #7
 8014e58:	dc04      	bgt.n	8014e64 <__hexnan+0x64>
 8014e5a:	462a      	mov	r2, r5
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f7ff ffa8 	bl	8014db4 <L_shift>
 8014e64:	4544      	cmp	r4, r8
 8014e66:	d950      	bls.n	8014f0a <__hexnan+0x10a>
 8014e68:	2300      	movs	r3, #0
 8014e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8014e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e72:	f8cd b008 	str.w	fp, [sp, #8]
 8014e76:	464c      	mov	r4, r9
 8014e78:	461d      	mov	r5, r3
 8014e7a:	9903      	ldr	r1, [sp, #12]
 8014e7c:	e7d7      	b.n	8014e2e <__hexnan+0x2e>
 8014e7e:	2a29      	cmp	r2, #41	; 0x29
 8014e80:	d155      	bne.n	8014f2e <__hexnan+0x12e>
 8014e82:	3102      	adds	r1, #2
 8014e84:	f8ca 1000 	str.w	r1, [sl]
 8014e88:	f1bb 0f00 	cmp.w	fp, #0
 8014e8c:	d04f      	beq.n	8014f2e <__hexnan+0x12e>
 8014e8e:	454c      	cmp	r4, r9
 8014e90:	d206      	bcs.n	8014ea0 <__hexnan+0xa0>
 8014e92:	2d07      	cmp	r5, #7
 8014e94:	dc04      	bgt.n	8014ea0 <__hexnan+0xa0>
 8014e96:	462a      	mov	r2, r5
 8014e98:	4649      	mov	r1, r9
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	f7ff ff8a 	bl	8014db4 <L_shift>
 8014ea0:	4544      	cmp	r4, r8
 8014ea2:	d934      	bls.n	8014f0e <__hexnan+0x10e>
 8014ea4:	f1a8 0204 	sub.w	r2, r8, #4
 8014ea8:	4623      	mov	r3, r4
 8014eaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8014eae:	f842 1f04 	str.w	r1, [r2, #4]!
 8014eb2:	429f      	cmp	r7, r3
 8014eb4:	d2f9      	bcs.n	8014eaa <__hexnan+0xaa>
 8014eb6:	1b3b      	subs	r3, r7, r4
 8014eb8:	f023 0303 	bic.w	r3, r3, #3
 8014ebc:	3304      	adds	r3, #4
 8014ebe:	3e03      	subs	r6, #3
 8014ec0:	3401      	adds	r4, #1
 8014ec2:	42a6      	cmp	r6, r4
 8014ec4:	bf38      	it	cc
 8014ec6:	2304      	movcc	r3, #4
 8014ec8:	4443      	add	r3, r8
 8014eca:	2200      	movs	r2, #0
 8014ecc:	f843 2b04 	str.w	r2, [r3], #4
 8014ed0:	429f      	cmp	r7, r3
 8014ed2:	d2fb      	bcs.n	8014ecc <__hexnan+0xcc>
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	b91b      	cbnz	r3, 8014ee0 <__hexnan+0xe0>
 8014ed8:	4547      	cmp	r7, r8
 8014eda:	d126      	bne.n	8014f2a <__hexnan+0x12a>
 8014edc:	2301      	movs	r3, #1
 8014ede:	603b      	str	r3, [r7, #0]
 8014ee0:	2005      	movs	r0, #5
 8014ee2:	e025      	b.n	8014f30 <__hexnan+0x130>
 8014ee4:	3501      	adds	r5, #1
 8014ee6:	2d08      	cmp	r5, #8
 8014ee8:	f10b 0b01 	add.w	fp, fp, #1
 8014eec:	dd06      	ble.n	8014efc <__hexnan+0xfc>
 8014eee:	4544      	cmp	r4, r8
 8014ef0:	d9c3      	bls.n	8014e7a <__hexnan+0x7a>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ef8:	2501      	movs	r5, #1
 8014efa:	3c04      	subs	r4, #4
 8014efc:	6822      	ldr	r2, [r4, #0]
 8014efe:	f000 000f 	and.w	r0, r0, #15
 8014f02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014f06:	6020      	str	r0, [r4, #0]
 8014f08:	e7b7      	b.n	8014e7a <__hexnan+0x7a>
 8014f0a:	2508      	movs	r5, #8
 8014f0c:	e7b5      	b.n	8014e7a <__hexnan+0x7a>
 8014f0e:	9b01      	ldr	r3, [sp, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d0df      	beq.n	8014ed4 <__hexnan+0xd4>
 8014f14:	f1c3 0320 	rsb	r3, r3, #32
 8014f18:	f04f 32ff 	mov.w	r2, #4294967295
 8014f1c:	40da      	lsrs	r2, r3
 8014f1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014f22:	4013      	ands	r3, r2
 8014f24:	f846 3c04 	str.w	r3, [r6, #-4]
 8014f28:	e7d4      	b.n	8014ed4 <__hexnan+0xd4>
 8014f2a:	3f04      	subs	r7, #4
 8014f2c:	e7d2      	b.n	8014ed4 <__hexnan+0xd4>
 8014f2e:	2004      	movs	r0, #4
 8014f30:	b007      	add	sp, #28
 8014f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f36 <__ascii_mbtowc>:
 8014f36:	b082      	sub	sp, #8
 8014f38:	b901      	cbnz	r1, 8014f3c <__ascii_mbtowc+0x6>
 8014f3a:	a901      	add	r1, sp, #4
 8014f3c:	b142      	cbz	r2, 8014f50 <__ascii_mbtowc+0x1a>
 8014f3e:	b14b      	cbz	r3, 8014f54 <__ascii_mbtowc+0x1e>
 8014f40:	7813      	ldrb	r3, [r2, #0]
 8014f42:	600b      	str	r3, [r1, #0]
 8014f44:	7812      	ldrb	r2, [r2, #0]
 8014f46:	1e10      	subs	r0, r2, #0
 8014f48:	bf18      	it	ne
 8014f4a:	2001      	movne	r0, #1
 8014f4c:	b002      	add	sp, #8
 8014f4e:	4770      	bx	lr
 8014f50:	4610      	mov	r0, r2
 8014f52:	e7fb      	b.n	8014f4c <__ascii_mbtowc+0x16>
 8014f54:	f06f 0001 	mvn.w	r0, #1
 8014f58:	e7f8      	b.n	8014f4c <__ascii_mbtowc+0x16>

08014f5a <_realloc_r>:
 8014f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5e:	4680      	mov	r8, r0
 8014f60:	4614      	mov	r4, r2
 8014f62:	460e      	mov	r6, r1
 8014f64:	b921      	cbnz	r1, 8014f70 <_realloc_r+0x16>
 8014f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f6a:	4611      	mov	r1, r2
 8014f6c:	f7fd bc76 	b.w	801285c <_malloc_r>
 8014f70:	b92a      	cbnz	r2, 8014f7e <_realloc_r+0x24>
 8014f72:	f7fd fbff 	bl	8012774 <_free_r>
 8014f76:	4625      	mov	r5, r4
 8014f78:	4628      	mov	r0, r5
 8014f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f7e:	f000 f842 	bl	8015006 <_malloc_usable_size_r>
 8014f82:	4284      	cmp	r4, r0
 8014f84:	4607      	mov	r7, r0
 8014f86:	d802      	bhi.n	8014f8e <_realloc_r+0x34>
 8014f88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014f8c:	d812      	bhi.n	8014fb4 <_realloc_r+0x5a>
 8014f8e:	4621      	mov	r1, r4
 8014f90:	4640      	mov	r0, r8
 8014f92:	f7fd fc63 	bl	801285c <_malloc_r>
 8014f96:	4605      	mov	r5, r0
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	d0ed      	beq.n	8014f78 <_realloc_r+0x1e>
 8014f9c:	42bc      	cmp	r4, r7
 8014f9e:	4622      	mov	r2, r4
 8014fa0:	4631      	mov	r1, r6
 8014fa2:	bf28      	it	cs
 8014fa4:	463a      	movcs	r2, r7
 8014fa6:	f7fc fd55 	bl	8011a54 <memcpy>
 8014faa:	4631      	mov	r1, r6
 8014fac:	4640      	mov	r0, r8
 8014fae:	f7fd fbe1 	bl	8012774 <_free_r>
 8014fb2:	e7e1      	b.n	8014f78 <_realloc_r+0x1e>
 8014fb4:	4635      	mov	r5, r6
 8014fb6:	e7df      	b.n	8014f78 <_realloc_r+0x1e>

08014fb8 <__ascii_wctomb>:
 8014fb8:	b149      	cbz	r1, 8014fce <__ascii_wctomb+0x16>
 8014fba:	2aff      	cmp	r2, #255	; 0xff
 8014fbc:	bf85      	ittet	hi
 8014fbe:	238a      	movhi	r3, #138	; 0x8a
 8014fc0:	6003      	strhi	r3, [r0, #0]
 8014fc2:	700a      	strbls	r2, [r1, #0]
 8014fc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014fc8:	bf98      	it	ls
 8014fca:	2001      	movls	r0, #1
 8014fcc:	4770      	bx	lr
 8014fce:	4608      	mov	r0, r1
 8014fd0:	4770      	bx	lr
	...

08014fd4 <fiprintf>:
 8014fd4:	b40e      	push	{r1, r2, r3}
 8014fd6:	b503      	push	{r0, r1, lr}
 8014fd8:	4601      	mov	r1, r0
 8014fda:	ab03      	add	r3, sp, #12
 8014fdc:	4805      	ldr	r0, [pc, #20]	; (8014ff4 <fiprintf+0x20>)
 8014fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fe2:	6800      	ldr	r0, [r0, #0]
 8014fe4:	9301      	str	r3, [sp, #4]
 8014fe6:	f7ff f98b 	bl	8014300 <_vfiprintf_r>
 8014fea:	b002      	add	sp, #8
 8014fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ff0:	b003      	add	sp, #12
 8014ff2:	4770      	bx	lr
 8014ff4:	20000920 	.word	0x20000920

08014ff8 <abort>:
 8014ff8:	b508      	push	{r3, lr}
 8014ffa:	2006      	movs	r0, #6
 8014ffc:	f000 f834 	bl	8015068 <raise>
 8015000:	2001      	movs	r0, #1
 8015002:	f7f3 fda9 	bl	8008b58 <_exit>

08015006 <_malloc_usable_size_r>:
 8015006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801500a:	1f18      	subs	r0, r3, #4
 801500c:	2b00      	cmp	r3, #0
 801500e:	bfbc      	itt	lt
 8015010:	580b      	ldrlt	r3, [r1, r0]
 8015012:	18c0      	addlt	r0, r0, r3
 8015014:	4770      	bx	lr

08015016 <_raise_r>:
 8015016:	291f      	cmp	r1, #31
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4604      	mov	r4, r0
 801501c:	460d      	mov	r5, r1
 801501e:	d904      	bls.n	801502a <_raise_r+0x14>
 8015020:	2316      	movs	r3, #22
 8015022:	6003      	str	r3, [r0, #0]
 8015024:	f04f 30ff 	mov.w	r0, #4294967295
 8015028:	bd38      	pop	{r3, r4, r5, pc}
 801502a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801502c:	b112      	cbz	r2, 8015034 <_raise_r+0x1e>
 801502e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015032:	b94b      	cbnz	r3, 8015048 <_raise_r+0x32>
 8015034:	4620      	mov	r0, r4
 8015036:	f000 f831 	bl	801509c <_getpid_r>
 801503a:	462a      	mov	r2, r5
 801503c:	4601      	mov	r1, r0
 801503e:	4620      	mov	r0, r4
 8015040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015044:	f000 b818 	b.w	8015078 <_kill_r>
 8015048:	2b01      	cmp	r3, #1
 801504a:	d00a      	beq.n	8015062 <_raise_r+0x4c>
 801504c:	1c59      	adds	r1, r3, #1
 801504e:	d103      	bne.n	8015058 <_raise_r+0x42>
 8015050:	2316      	movs	r3, #22
 8015052:	6003      	str	r3, [r0, #0]
 8015054:	2001      	movs	r0, #1
 8015056:	e7e7      	b.n	8015028 <_raise_r+0x12>
 8015058:	2400      	movs	r4, #0
 801505a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801505e:	4628      	mov	r0, r5
 8015060:	4798      	blx	r3
 8015062:	2000      	movs	r0, #0
 8015064:	e7e0      	b.n	8015028 <_raise_r+0x12>
	...

08015068 <raise>:
 8015068:	4b02      	ldr	r3, [pc, #8]	; (8015074 <raise+0xc>)
 801506a:	4601      	mov	r1, r0
 801506c:	6818      	ldr	r0, [r3, #0]
 801506e:	f7ff bfd2 	b.w	8015016 <_raise_r>
 8015072:	bf00      	nop
 8015074:	20000920 	.word	0x20000920

08015078 <_kill_r>:
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4d07      	ldr	r5, [pc, #28]	; (8015098 <_kill_r+0x20>)
 801507c:	2300      	movs	r3, #0
 801507e:	4604      	mov	r4, r0
 8015080:	4608      	mov	r0, r1
 8015082:	4611      	mov	r1, r2
 8015084:	602b      	str	r3, [r5, #0]
 8015086:	f7f3 fd57 	bl	8008b38 <_kill>
 801508a:	1c43      	adds	r3, r0, #1
 801508c:	d102      	bne.n	8015094 <_kill_r+0x1c>
 801508e:	682b      	ldr	r3, [r5, #0]
 8015090:	b103      	cbz	r3, 8015094 <_kill_r+0x1c>
 8015092:	6023      	str	r3, [r4, #0]
 8015094:	bd38      	pop	{r3, r4, r5, pc}
 8015096:	bf00      	nop
 8015098:	2001a11c 	.word	0x2001a11c

0801509c <_getpid_r>:
 801509c:	f7f3 bd44 	b.w	8008b28 <_getpid>

080150a0 <acosf>:
 80150a0:	b508      	push	{r3, lr}
 80150a2:	ed2d 8b02 	vpush	{d8}
 80150a6:	eeb0 8a40 	vmov.f32	s16, s0
 80150aa:	f001 faa9 	bl	8016600 <__ieee754_acosf>
 80150ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80150b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b6:	eef0 8a40 	vmov.f32	s17, s0
 80150ba:	d615      	bvs.n	80150e8 <acosf+0x48>
 80150bc:	eeb0 0a48 	vmov.f32	s0, s16
 80150c0:	f000 fd1c 	bl	8015afc <fabsf>
 80150c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80150c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80150cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150d0:	dd0a      	ble.n	80150e8 <acosf+0x48>
 80150d2:	f7fc fc8d 	bl	80119f0 <__errno>
 80150d6:	ecbd 8b02 	vpop	{d8}
 80150da:	2321      	movs	r3, #33	; 0x21
 80150dc:	6003      	str	r3, [r0, #0]
 80150de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150e2:	4804      	ldr	r0, [pc, #16]	; (80150f4 <acosf+0x54>)
 80150e4:	f7fc bcc4 	b.w	8011a70 <nanf>
 80150e8:	eeb0 0a68 	vmov.f32	s0, s17
 80150ec:	ecbd 8b02 	vpop	{d8}
 80150f0:	bd08      	pop	{r3, pc}
 80150f2:	bf00      	nop
 80150f4:	0814f9bd 	.word	0x0814f9bd

080150f8 <acoshf>:
 80150f8:	b508      	push	{r3, lr}
 80150fa:	ed2d 8b02 	vpush	{d8}
 80150fe:	eeb0 8a40 	vmov.f32	s16, s0
 8015102:	f001 fb75 	bl	80167f0 <__ieee754_acoshf>
 8015106:	eeb4 8a48 	vcmp.f32	s16, s16
 801510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801510e:	d60e      	bvs.n	801512e <acoshf+0x36>
 8015110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015114:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511c:	d507      	bpl.n	801512e <acoshf+0x36>
 801511e:	f7fc fc67 	bl	80119f0 <__errno>
 8015122:	eddf 7a04 	vldr	s15, [pc, #16]	; 8015134 <acoshf+0x3c>
 8015126:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801512a:	2321      	movs	r3, #33	; 0x21
 801512c:	6003      	str	r3, [r0, #0]
 801512e:	ecbd 8b02 	vpop	{d8}
 8015132:	bd08      	pop	{r3, pc}
 8015134:	00000000 	.word	0x00000000

08015138 <asinf>:
 8015138:	b508      	push	{r3, lr}
 801513a:	ed2d 8b02 	vpush	{d8}
 801513e:	eeb0 8a40 	vmov.f32	s16, s0
 8015142:	f001 fba9 	bl	8016898 <__ieee754_asinf>
 8015146:	eeb4 8a48 	vcmp.f32	s16, s16
 801514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801514e:	eef0 8a40 	vmov.f32	s17, s0
 8015152:	d615      	bvs.n	8015180 <asinf+0x48>
 8015154:	eeb0 0a48 	vmov.f32	s0, s16
 8015158:	f000 fcd0 	bl	8015afc <fabsf>
 801515c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015160:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015168:	dd0a      	ble.n	8015180 <asinf+0x48>
 801516a:	f7fc fc41 	bl	80119f0 <__errno>
 801516e:	ecbd 8b02 	vpop	{d8}
 8015172:	2321      	movs	r3, #33	; 0x21
 8015174:	6003      	str	r3, [r0, #0]
 8015176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801517a:	4804      	ldr	r0, [pc, #16]	; (801518c <asinf+0x54>)
 801517c:	f7fc bc78 	b.w	8011a70 <nanf>
 8015180:	eeb0 0a68 	vmov.f32	s0, s17
 8015184:	ecbd 8b02 	vpop	{d8}
 8015188:	bd08      	pop	{r3, pc}
 801518a:	bf00      	nop
 801518c:	0814f9bd 	.word	0x0814f9bd

08015190 <atanhf>:
 8015190:	b510      	push	{r4, lr}
 8015192:	ed2d 8b04 	vpush	{d8-d9}
 8015196:	eeb0 8a40 	vmov.f32	s16, s0
 801519a:	f001 fc63 	bl	8016a64 <__ieee754_atanhf>
 801519e:	eeb4 8a48 	vcmp.f32	s16, s16
 80151a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151a6:	eef0 8a40 	vmov.f32	s17, s0
 80151aa:	d614      	bvs.n	80151d6 <atanhf+0x46>
 80151ac:	eeb0 0a48 	vmov.f32	s0, s16
 80151b0:	f000 fca4 	bl	8015afc <fabsf>
 80151b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80151b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80151bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c0:	db09      	blt.n	80151d6 <atanhf+0x46>
 80151c2:	ed9f 9a0a 	vldr	s18, [pc, #40]	; 80151ec <atanhf+0x5c>
 80151c6:	f04f 0421 	mov.w	r4, #33	; 0x21
 80151ca:	dd09      	ble.n	80151e0 <atanhf+0x50>
 80151cc:	f7fc fc10 	bl	80119f0 <__errno>
 80151d0:	eec9 8a09 	vdiv.f32	s17, s18, s18
 80151d4:	6004      	str	r4, [r0, #0]
 80151d6:	eeb0 0a68 	vmov.f32	s0, s17
 80151da:	ecbd 8b04 	vpop	{d8-d9}
 80151de:	bd10      	pop	{r4, pc}
 80151e0:	f7fc fc06 	bl	80119f0 <__errno>
 80151e4:	eec8 8a09 	vdiv.f32	s17, s16, s18
 80151e8:	6004      	str	r4, [r0, #0]
 80151ea:	e7f4      	b.n	80151d6 <atanhf+0x46>
 80151ec:	00000000 	.word	0x00000000

080151f0 <coshf>:
 80151f0:	b508      	push	{r3, lr}
 80151f2:	ed2d 8b02 	vpush	{d8}
 80151f6:	eeb0 8a40 	vmov.f32	s16, s0
 80151fa:	f001 fc79 	bl	8016af0 <__ieee754_coshf>
 80151fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8015202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015206:	eef0 8a40 	vmov.f32	s17, s0
 801520a:	d610      	bvs.n	801522e <coshf+0x3e>
 801520c:	eeb0 0a48 	vmov.f32	s0, s16
 8015210:	f000 fc74 	bl	8015afc <fabsf>
 8015214:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015238 <coshf+0x48>
 8015218:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015220:	dd05      	ble.n	801522e <coshf+0x3e>
 8015222:	f7fc fbe5 	bl	80119f0 <__errno>
 8015226:	eddf 8a05 	vldr	s17, [pc, #20]	; 801523c <coshf+0x4c>
 801522a:	2322      	movs	r3, #34	; 0x22
 801522c:	6003      	str	r3, [r0, #0]
 801522e:	eeb0 0a68 	vmov.f32	s0, s17
 8015232:	ecbd 8b02 	vpop	{d8}
 8015236:	bd08      	pop	{r3, pc}
 8015238:	42b2d4fc 	.word	0x42b2d4fc
 801523c:	7f800000 	.word	0x7f800000

08015240 <expf>:
 8015240:	b508      	push	{r3, lr}
 8015242:	ed2d 8b02 	vpush	{d8}
 8015246:	eef0 8a40 	vmov.f32	s17, s0
 801524a:	f001 fcb1 	bl	8016bb0 <__ieee754_expf>
 801524e:	eeb0 8a40 	vmov.f32	s16, s0
 8015252:	eeb0 0a68 	vmov.f32	s0, s17
 8015256:	f000 fd33 	bl	8015cc0 <finitef>
 801525a:	b160      	cbz	r0, 8015276 <expf+0x36>
 801525c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801529c <expf+0x5c>
 8015260:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015268:	dd0a      	ble.n	8015280 <expf+0x40>
 801526a:	f7fc fbc1 	bl	80119f0 <__errno>
 801526e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80152a0 <expf+0x60>
 8015272:	2322      	movs	r3, #34	; 0x22
 8015274:	6003      	str	r3, [r0, #0]
 8015276:	eeb0 0a48 	vmov.f32	s0, s16
 801527a:	ecbd 8b02 	vpop	{d8}
 801527e:	bd08      	pop	{r3, pc}
 8015280:	eddf 7a08 	vldr	s15, [pc, #32]	; 80152a4 <expf+0x64>
 8015284:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528c:	d5f3      	bpl.n	8015276 <expf+0x36>
 801528e:	f7fc fbaf 	bl	80119f0 <__errno>
 8015292:	2322      	movs	r3, #34	; 0x22
 8015294:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80152a8 <expf+0x68>
 8015298:	6003      	str	r3, [r0, #0]
 801529a:	e7ec      	b.n	8015276 <expf+0x36>
 801529c:	42b17217 	.word	0x42b17217
 80152a0:	7f800000 	.word	0x7f800000
 80152a4:	c2cff1b5 	.word	0xc2cff1b5
 80152a8:	00000000 	.word	0x00000000

080152ac <fmodf>:
 80152ac:	b508      	push	{r3, lr}
 80152ae:	ed2d 8b02 	vpush	{d8}
 80152b2:	eef0 8a40 	vmov.f32	s17, s0
 80152b6:	eeb0 8a60 	vmov.f32	s16, s1
 80152ba:	f001 fd47 	bl	8016d4c <__ieee754_fmodf>
 80152be:	eef4 8a48 	vcmp.f32	s17, s16
 80152c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c6:	d60c      	bvs.n	80152e2 <fmodf+0x36>
 80152c8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80152e8 <fmodf+0x3c>
 80152cc:	eeb4 8a68 	vcmp.f32	s16, s17
 80152d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d4:	d105      	bne.n	80152e2 <fmodf+0x36>
 80152d6:	f7fc fb8b 	bl	80119f0 <__errno>
 80152da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80152de:	2321      	movs	r3, #33	; 0x21
 80152e0:	6003      	str	r3, [r0, #0]
 80152e2:	ecbd 8b02 	vpop	{d8}
 80152e6:	bd08      	pop	{r3, pc}
 80152e8:	00000000 	.word	0x00000000

080152ec <logf>:
 80152ec:	b508      	push	{r3, lr}
 80152ee:	ed2d 8b02 	vpush	{d8}
 80152f2:	eeb0 8a40 	vmov.f32	s16, s0
 80152f6:	f001 fdab 	bl	8016e50 <__ieee754_logf>
 80152fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80152fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015302:	d60f      	bvs.n	8015324 <logf+0x38>
 8015304:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530c:	dc0a      	bgt.n	8015324 <logf+0x38>
 801530e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015316:	d108      	bne.n	801532a <logf+0x3e>
 8015318:	f7fc fb6a 	bl	80119f0 <__errno>
 801531c:	2322      	movs	r3, #34	; 0x22
 801531e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015340 <logf+0x54>
 8015322:	6003      	str	r3, [r0, #0]
 8015324:	ecbd 8b02 	vpop	{d8}
 8015328:	bd08      	pop	{r3, pc}
 801532a:	f7fc fb61 	bl	80119f0 <__errno>
 801532e:	ecbd 8b02 	vpop	{d8}
 8015332:	2321      	movs	r3, #33	; 0x21
 8015334:	6003      	str	r3, [r0, #0]
 8015336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801533a:	4802      	ldr	r0, [pc, #8]	; (8015344 <logf+0x58>)
 801533c:	f7fc bb98 	b.w	8011a70 <nanf>
 8015340:	ff800000 	.word	0xff800000
 8015344:	0814f9bd 	.word	0x0814f9bd

08015348 <powf>:
 8015348:	b508      	push	{r3, lr}
 801534a:	ed2d 8b04 	vpush	{d8-d9}
 801534e:	eeb0 8a60 	vmov.f32	s16, s1
 8015352:	eeb0 9a40 	vmov.f32	s18, s0
 8015356:	f001 fe6d 	bl	8017034 <__ieee754_powf>
 801535a:	eeb4 8a48 	vcmp.f32	s16, s16
 801535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015362:	eef0 8a40 	vmov.f32	s17, s0
 8015366:	d63e      	bvs.n	80153e6 <powf+0x9e>
 8015368:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015370:	d112      	bne.n	8015398 <powf+0x50>
 8015372:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	d039      	beq.n	80153f0 <powf+0xa8>
 801537c:	eeb0 0a48 	vmov.f32	s0, s16
 8015380:	f000 fc9e 	bl	8015cc0 <finitef>
 8015384:	b378      	cbz	r0, 80153e6 <powf+0x9e>
 8015386:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801538e:	d52a      	bpl.n	80153e6 <powf+0x9e>
 8015390:	f7fc fb2e 	bl	80119f0 <__errno>
 8015394:	2322      	movs	r3, #34	; 0x22
 8015396:	e014      	b.n	80153c2 <powf+0x7a>
 8015398:	f000 fc92 	bl	8015cc0 <finitef>
 801539c:	b998      	cbnz	r0, 80153c6 <powf+0x7e>
 801539e:	eeb0 0a49 	vmov.f32	s0, s18
 80153a2:	f000 fc8d 	bl	8015cc0 <finitef>
 80153a6:	b170      	cbz	r0, 80153c6 <powf+0x7e>
 80153a8:	eeb0 0a48 	vmov.f32	s0, s16
 80153ac:	f000 fc88 	bl	8015cc0 <finitef>
 80153b0:	b148      	cbz	r0, 80153c6 <powf+0x7e>
 80153b2:	eef4 8a68 	vcmp.f32	s17, s17
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	d7e9      	bvc.n	8015390 <powf+0x48>
 80153bc:	f7fc fb18 	bl	80119f0 <__errno>
 80153c0:	2321      	movs	r3, #33	; 0x21
 80153c2:	6003      	str	r3, [r0, #0]
 80153c4:	e00f      	b.n	80153e6 <powf+0x9e>
 80153c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80153ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ce:	d10a      	bne.n	80153e6 <powf+0x9e>
 80153d0:	eeb0 0a49 	vmov.f32	s0, s18
 80153d4:	f000 fc74 	bl	8015cc0 <finitef>
 80153d8:	b128      	cbz	r0, 80153e6 <powf+0x9e>
 80153da:	eeb0 0a48 	vmov.f32	s0, s16
 80153de:	f000 fc6f 	bl	8015cc0 <finitef>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d1d4      	bne.n	8015390 <powf+0x48>
 80153e6:	eeb0 0a68 	vmov.f32	s0, s17
 80153ea:	ecbd 8b04 	vpop	{d8-d9}
 80153ee:	bd08      	pop	{r3, pc}
 80153f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80153f4:	e7f7      	b.n	80153e6 <powf+0x9e>
	...

080153f8 <sinhf>:
 80153f8:	b508      	push	{r3, lr}
 80153fa:	ed2d 8b02 	vpush	{d8}
 80153fe:	eef0 8a40 	vmov.f32	s17, s0
 8015402:	f002 fa0d 	bl	8017820 <__ieee754_sinhf>
 8015406:	eeb0 8a40 	vmov.f32	s16, s0
 801540a:	f000 fc59 	bl	8015cc0 <finitef>
 801540e:	b998      	cbnz	r0, 8015438 <sinhf+0x40>
 8015410:	eeb0 0a68 	vmov.f32	s0, s17
 8015414:	f000 fc54 	bl	8015cc0 <finitef>
 8015418:	b170      	cbz	r0, 8015438 <sinhf+0x40>
 801541a:	f7fc fae9 	bl	80119f0 <__errno>
 801541e:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8015444 <sinhf+0x4c>
 8015422:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015448 <sinhf+0x50>
 8015426:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801542a:	2322      	movs	r3, #34	; 0x22
 801542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015430:	6003      	str	r3, [r0, #0]
 8015432:	bfd8      	it	le
 8015434:	eeb0 8a67 	vmovle.f32	s16, s15
 8015438:	eeb0 0a48 	vmov.f32	s0, s16
 801543c:	ecbd 8b02 	vpop	{d8}
 8015440:	bd08      	pop	{r3, pc}
 8015442:	bf00      	nop
 8015444:	7f800000 	.word	0x7f800000
 8015448:	ff800000 	.word	0xff800000

0801544c <asinhf>:
 801544c:	b510      	push	{r4, lr}
 801544e:	ee10 4a10 	vmov	r4, s0
 8015452:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015456:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801545a:	ed2d 8b04 	vpush	{d8-d9}
 801545e:	eeb0 8a40 	vmov.f32	s16, s0
 8015462:	db06      	blt.n	8015472 <asinhf+0x26>
 8015464:	ee30 8a00 	vadd.f32	s16, s0, s0
 8015468:	eeb0 0a48 	vmov.f32	s0, s16
 801546c:	ecbd 8b04 	vpop	{d8-d9}
 8015470:	bd10      	pop	{r4, pc}
 8015472:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8015476:	da21      	bge.n	80154bc <asinhf+0x70>
 8015478:	eddf 7a26 	vldr	s15, [pc, #152]	; 8015514 <asinhf+0xc8>
 801547c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548c:	dcec      	bgt.n	8015468 <asinhf+0x1c>
 801548e:	eeb0 0a48 	vmov.f32	s0, s16
 8015492:	f000 fb33 	bl	8015afc <fabsf>
 8015496:	ee68 8a08 	vmul.f32	s17, s16, s16
 801549a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801549e:	eeb0 8a40 	vmov.f32	s16, s0
 80154a2:	ee38 0a89 	vadd.f32	s0, s17, s18
 80154a6:	f000 fe7a 	bl	801619e <__ieee754_sqrtf>
 80154aa:	ee30 0a09 	vadd.f32	s0, s0, s18
 80154ae:	eec8 7a80 	vdiv.f32	s15, s17, s0
 80154b2:	ee37 0a88 	vadd.f32	s0, s15, s16
 80154b6:	f000 fd2f 	bl	8015f18 <log1pf>
 80154ba:	e028      	b.n	801550e <asinhf+0xc2>
 80154bc:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 80154c0:	dd0c      	ble.n	80154dc <asinhf+0x90>
 80154c2:	f000 fb1b 	bl	8015afc <fabsf>
 80154c6:	f001 fcc3 	bl	8016e50 <__ieee754_logf>
 80154ca:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015518 <asinhf+0xcc>
 80154ce:	ee30 8a27 	vadd.f32	s16, s0, s15
 80154d2:	2c00      	cmp	r4, #0
 80154d4:	bfd8      	it	le
 80154d6:	eeb1 8a48 	vnegle.f32	s16, s16
 80154da:	e7c5      	b.n	8015468 <asinhf+0x1c>
 80154dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154e0:	ddd5      	ble.n	801548e <asinhf+0x42>
 80154e2:	f000 fb0b 	bl	8015afc <fabsf>
 80154e6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80154ea:	eef0 8a40 	vmov.f32	s17, s0
 80154ee:	eeb0 0a49 	vmov.f32	s0, s18
 80154f2:	eea8 0a08 	vfma.f32	s0, s16, s16
 80154f6:	f000 fe52 	bl	801619e <__ieee754_sqrtf>
 80154fa:	ee70 7a28 	vadd.f32	s15, s0, s17
 80154fe:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8015502:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015506:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801550a:	f001 fca1 	bl	8016e50 <__ieee754_logf>
 801550e:	eeb0 8a40 	vmov.f32	s16, s0
 8015512:	e7de      	b.n	80154d2 <asinhf+0x86>
 8015514:	7149f2ca 	.word	0x7149f2ca
 8015518:	3f317218 	.word	0x3f317218

0801551c <atanf>:
 801551c:	b538      	push	{r3, r4, r5, lr}
 801551e:	ee10 5a10 	vmov	r5, s0
 8015522:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015526:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801552a:	eef0 7a40 	vmov.f32	s15, s0
 801552e:	db10      	blt.n	8015552 <atanf+0x36>
 8015530:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015534:	dd04      	ble.n	8015540 <atanf+0x24>
 8015536:	ee70 7a00 	vadd.f32	s15, s0, s0
 801553a:	eeb0 0a67 	vmov.f32	s0, s15
 801553e:	bd38      	pop	{r3, r4, r5, pc}
 8015540:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015678 <atanf+0x15c>
 8015544:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801567c <atanf+0x160>
 8015548:	2d00      	cmp	r5, #0
 801554a:	bfd8      	it	le
 801554c:	eef0 7a47 	vmovle.f32	s15, s14
 8015550:	e7f3      	b.n	801553a <atanf+0x1e>
 8015552:	4b4b      	ldr	r3, [pc, #300]	; (8015680 <atanf+0x164>)
 8015554:	429c      	cmp	r4, r3
 8015556:	dc10      	bgt.n	801557a <atanf+0x5e>
 8015558:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801555c:	da0a      	bge.n	8015574 <atanf+0x58>
 801555e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015684 <atanf+0x168>
 8015562:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801556a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801556e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015572:	dce2      	bgt.n	801553a <atanf+0x1e>
 8015574:	f04f 33ff 	mov.w	r3, #4294967295
 8015578:	e013      	b.n	80155a2 <atanf+0x86>
 801557a:	f000 fabf 	bl	8015afc <fabsf>
 801557e:	4b42      	ldr	r3, [pc, #264]	; (8015688 <atanf+0x16c>)
 8015580:	429c      	cmp	r4, r3
 8015582:	dc4f      	bgt.n	8015624 <atanf+0x108>
 8015584:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015588:	429c      	cmp	r4, r3
 801558a:	dc41      	bgt.n	8015610 <atanf+0xf4>
 801558c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015590:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015594:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015598:	2300      	movs	r3, #0
 801559a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801559e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80155a2:	1c5a      	adds	r2, r3, #1
 80155a4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80155a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801568c <atanf+0x170>
 80155ac:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015690 <atanf+0x174>
 80155b0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015694 <atanf+0x178>
 80155b4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80155b8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80155bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015698 <atanf+0x17c>
 80155c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80155c4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801569c <atanf+0x180>
 80155c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80155cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80156a0 <atanf+0x184>
 80155d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80155d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80156a4 <atanf+0x188>
 80155d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80155dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80156a8 <atanf+0x18c>
 80155e0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80155e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80156ac <atanf+0x190>
 80155e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80155ec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80156b0 <atanf+0x194>
 80155f0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80155f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80156b4 <atanf+0x198>
 80155f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80155fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015600:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015604:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015608:	d121      	bne.n	801564e <atanf+0x132>
 801560a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801560e:	e794      	b.n	801553a <atanf+0x1e>
 8015610:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015614:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015618:	ee30 0a27 	vadd.f32	s0, s0, s15
 801561c:	2301      	movs	r3, #1
 801561e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015622:	e7be      	b.n	80155a2 <atanf+0x86>
 8015624:	4b24      	ldr	r3, [pc, #144]	; (80156b8 <atanf+0x19c>)
 8015626:	429c      	cmp	r4, r3
 8015628:	dc0b      	bgt.n	8015642 <atanf+0x126>
 801562a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015632:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015636:	2302      	movs	r3, #2
 8015638:	ee70 6a67 	vsub.f32	s13, s0, s15
 801563c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015640:	e7af      	b.n	80155a2 <atanf+0x86>
 8015642:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015646:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801564a:	2303      	movs	r3, #3
 801564c:	e7a9      	b.n	80155a2 <atanf+0x86>
 801564e:	4a1b      	ldr	r2, [pc, #108]	; (80156bc <atanf+0x1a0>)
 8015650:	491b      	ldr	r1, [pc, #108]	; (80156c0 <atanf+0x1a4>)
 8015652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015656:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801565a:	edd3 6a00 	vldr	s13, [r3]
 801565e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015662:	2d00      	cmp	r5, #0
 8015664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015668:	edd2 7a00 	vldr	s15, [r2]
 801566c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015670:	bfb8      	it	lt
 8015672:	eef1 7a67 	vneglt.f32	s15, s15
 8015676:	e760      	b.n	801553a <atanf+0x1e>
 8015678:	3fc90fdb 	.word	0x3fc90fdb
 801567c:	bfc90fdb 	.word	0xbfc90fdb
 8015680:	3edfffff 	.word	0x3edfffff
 8015684:	7149f2ca 	.word	0x7149f2ca
 8015688:	3f97ffff 	.word	0x3f97ffff
 801568c:	3c8569d7 	.word	0x3c8569d7
 8015690:	3d4bda59 	.word	0x3d4bda59
 8015694:	bd6ef16b 	.word	0xbd6ef16b
 8015698:	3d886b35 	.word	0x3d886b35
 801569c:	3dba2e6e 	.word	0x3dba2e6e
 80156a0:	3e124925 	.word	0x3e124925
 80156a4:	3eaaaaab 	.word	0x3eaaaaab
 80156a8:	bd15a221 	.word	0xbd15a221
 80156ac:	bd9d8795 	.word	0xbd9d8795
 80156b0:	bde38e38 	.word	0xbde38e38
 80156b4:	be4ccccd 	.word	0xbe4ccccd
 80156b8:	401bffff 	.word	0x401bffff
 80156bc:	0814fa20 	.word	0x0814fa20
 80156c0:	0814fa30 	.word	0x0814fa30

080156c4 <cosf>:
 80156c4:	ee10 3a10 	vmov	r3, s0
 80156c8:	b507      	push	{r0, r1, r2, lr}
 80156ca:	4a1e      	ldr	r2, [pc, #120]	; (8015744 <cosf+0x80>)
 80156cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156d0:	4293      	cmp	r3, r2
 80156d2:	dc06      	bgt.n	80156e2 <cosf+0x1e>
 80156d4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8015748 <cosf+0x84>
 80156d8:	b003      	add	sp, #12
 80156da:	f85d eb04 	ldr.w	lr, [sp], #4
 80156de:	f000 be09 	b.w	80162f4 <__kernel_cosf>
 80156e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80156e6:	db04      	blt.n	80156f2 <cosf+0x2e>
 80156e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80156ec:	b003      	add	sp, #12
 80156ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80156f2:	4668      	mov	r0, sp
 80156f4:	f001 ff68 	bl	80175c8 <__ieee754_rem_pio2f>
 80156f8:	f000 0003 	and.w	r0, r0, #3
 80156fc:	2801      	cmp	r0, #1
 80156fe:	d009      	beq.n	8015714 <cosf+0x50>
 8015700:	2802      	cmp	r0, #2
 8015702:	d010      	beq.n	8015726 <cosf+0x62>
 8015704:	b9b0      	cbnz	r0, 8015734 <cosf+0x70>
 8015706:	eddd 0a01 	vldr	s1, [sp, #4]
 801570a:	ed9d 0a00 	vldr	s0, [sp]
 801570e:	f000 fdf1 	bl	80162f4 <__kernel_cosf>
 8015712:	e7eb      	b.n	80156ec <cosf+0x28>
 8015714:	eddd 0a01 	vldr	s1, [sp, #4]
 8015718:	ed9d 0a00 	vldr	s0, [sp]
 801571c:	f000 fe48 	bl	80163b0 <__kernel_sinf>
 8015720:	eeb1 0a40 	vneg.f32	s0, s0
 8015724:	e7e2      	b.n	80156ec <cosf+0x28>
 8015726:	eddd 0a01 	vldr	s1, [sp, #4]
 801572a:	ed9d 0a00 	vldr	s0, [sp]
 801572e:	f000 fde1 	bl	80162f4 <__kernel_cosf>
 8015732:	e7f5      	b.n	8015720 <cosf+0x5c>
 8015734:	eddd 0a01 	vldr	s1, [sp, #4]
 8015738:	ed9d 0a00 	vldr	s0, [sp]
 801573c:	2001      	movs	r0, #1
 801573e:	f000 fe37 	bl	80163b0 <__kernel_sinf>
 8015742:	e7d3      	b.n	80156ec <cosf+0x28>
 8015744:	3f490fd8 	.word	0x3f490fd8
 8015748:	00000000 	.word	0x00000000

0801574c <erff>:
 801574c:	b538      	push	{r3, r4, r5, lr}
 801574e:	ee10 4a10 	vmov	r4, s0
 8015752:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8015756:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801575a:	ed2d 8b06 	vpush	{d8-d10}
 801575e:	eef0 7a40 	vmov.f32	s15, s0
 8015762:	db12      	blt.n	801578a <erff+0x3e>
 8015764:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015768:	eec6 6a00 	vdiv.f32	s13, s12, s0
 801576c:	0fe4      	lsrs	r4, r4, #31
 801576e:	0064      	lsls	r4, r4, #1
 8015770:	f1c4 0401 	rsb	r4, r4, #1
 8015774:	ee07 4a10 	vmov	s14, r4
 8015778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801577c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8015780:	ecbd 8b06 	vpop	{d8-d10}
 8015784:	eeb0 0a67 	vmov.f32	s0, s15
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	4ba0      	ldr	r3, [pc, #640]	; (8015a0c <erff+0x2c0>)
 801578c:	429d      	cmp	r5, r3
 801578e:	dc44      	bgt.n	801581a <erff+0xce>
 8015790:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8015794:	da14      	bge.n	80157c0 <erff+0x74>
 8015796:	f014 4ff8 	tst.w	r4, #2080374784	; 0x7c000000
 801579a:	d10c      	bne.n	80157b6 <erff+0x6a>
 801579c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8015a10 <erff+0x2c4>
 80157a0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80157a4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80157a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80157ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80157b0:	ee67 7a00 	vmul.f32	s15, s14, s0
 80157b4:	e7e4      	b.n	8015780 <erff+0x34>
 80157b6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8015a14 <erff+0x2c8>
 80157ba:	eee7 7a87 	vfma.f32	s15, s15, s14
 80157be:	e7df      	b.n	8015780 <erff+0x34>
 80157c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80157c4:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8015a18 <erff+0x2cc>
 80157c8:	eddf 6a94 	vldr	s13, [pc, #592]	; 8015a1c <erff+0x2d0>
 80157cc:	eddf 5a94 	vldr	s11, [pc, #592]	; 8015a20 <erff+0x2d4>
 80157d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80157d4:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8015a24 <erff+0x2d8>
 80157d8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80157dc:	eddf 6a92 	vldr	s13, [pc, #584]	; 8015a28 <erff+0x2dc>
 80157e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80157e4:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8015a14 <erff+0x2c8>
 80157e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80157ec:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8015a2c <erff+0x2e0>
 80157f0:	eee7 6a25 	vfma.f32	s13, s14, s11
 80157f4:	eddf 5a8e 	vldr	s11, [pc, #568]	; 8015a30 <erff+0x2e4>
 80157f8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80157fc:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8015a34 <erff+0x2e8>
 8015800:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015804:	eddf 5a8c 	vldr	s11, [pc, #560]	; 8015a38 <erff+0x2ec>
 8015808:	eee6 5a87 	vfma.f32	s11, s13, s14
 801580c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015810:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015814:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015818:	e7cf      	b.n	80157ba <erff+0x6e>
 801581a:	4b88      	ldr	r3, [pc, #544]	; (8015a3c <erff+0x2f0>)
 801581c:	429d      	cmp	r5, r3
 801581e:	dc44      	bgt.n	80158aa <erff+0x15e>
 8015820:	f000 f96c 	bl	8015afc <fabsf>
 8015824:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015828:	ee30 0a67 	vsub.f32	s0, s0, s15
 801582c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8015a40 <erff+0x2f4>
 8015830:	eddf 6a84 	vldr	s13, [pc, #528]	; 8015a44 <erff+0x2f8>
 8015834:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8015a48 <erff+0x2fc>
 8015838:	eee0 6a07 	vfma.f32	s13, s0, s14
 801583c:	2c00      	cmp	r4, #0
 801583e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015a4c <erff+0x300>
 8015842:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015846:	eddf 6a82 	vldr	s13, [pc, #520]	; 8015a50 <erff+0x304>
 801584a:	eee7 6a00 	vfma.f32	s13, s14, s0
 801584e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8015a54 <erff+0x308>
 8015852:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015856:	eddf 6a80 	vldr	s13, [pc, #512]	; 8015a58 <erff+0x30c>
 801585a:	eee7 6a00 	vfma.f32	s13, s14, s0
 801585e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8015a5c <erff+0x310>
 8015862:	eea6 7a80 	vfma.f32	s14, s13, s0
 8015866:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8015a60 <erff+0x314>
 801586a:	eee0 6a06 	vfma.f32	s13, s0, s12
 801586e:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8015a64 <erff+0x318>
 8015872:	eea6 6a80 	vfma.f32	s12, s13, s0
 8015876:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8015a68 <erff+0x31c>
 801587a:	eee6 6a00 	vfma.f32	s13, s12, s0
 801587e:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 8015a6c <erff+0x320>
 8015882:	eea6 6a80 	vfma.f32	s12, s13, s0
 8015886:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8015a70 <erff+0x324>
 801588a:	eee6 6a00 	vfma.f32	s13, s12, s0
 801588e:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015892:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015896:	bfab      	itete	ge
 8015898:	eddf 7a76 	vldrge	s15, [pc, #472]	; 8015a74 <erff+0x328>
 801589c:	eddf 7a76 	vldrlt	s15, [pc, #472]	; 8015a78 <erff+0x32c>
 80158a0:	ee70 7a27 	vaddge.f32	s15, s0, s15
 80158a4:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 80158a8:	e76a      	b.n	8015780 <erff+0x34>
 80158aa:	4b74      	ldr	r3, [pc, #464]	; (8015a7c <erff+0x330>)
 80158ac:	429d      	cmp	r5, r3
 80158ae:	dd08      	ble.n	80158c2 <erff+0x176>
 80158b0:	2c00      	cmp	r4, #0
 80158b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80158b6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80158ba:	bfa8      	it	ge
 80158bc:	eef0 7a40 	vmovge.f32	s15, s0
 80158c0:	e75e      	b.n	8015780 <erff+0x34>
 80158c2:	f000 f91b 	bl	8015afc <fabsf>
 80158c6:	4b6e      	ldr	r3, [pc, #440]	; (8015a80 <erff+0x334>)
 80158c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80158cc:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80158d0:	429d      	cmp	r5, r3
 80158d2:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80158d6:	eeb0 8a40 	vmov.f32	s16, s0
 80158da:	dc64      	bgt.n	80159a6 <erff+0x25a>
 80158dc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8015a84 <erff+0x338>
 80158e0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015a88 <erff+0x33c>
 80158e4:	ed9f 9a69 	vldr	s18, [pc, #420]	; 8015a8c <erff+0x340>
 80158e8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80158ec:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8015a90 <erff+0x344>
 80158f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80158f4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015a94 <erff+0x348>
 80158f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80158fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8015a98 <erff+0x34c>
 8015900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015904:	eddf 6a65 	vldr	s13, [pc, #404]	; 8015a9c <erff+0x350>
 8015908:	eee7 6a27 	vfma.f32	s13, s14, s15
 801590c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8015aa0 <erff+0x354>
 8015910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015914:	eddf 6a63 	vldr	s13, [pc, #396]	; 8015aa4 <erff+0x358>
 8015918:	eea7 9a27 	vfma.f32	s18, s14, s15
 801591c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8015aa8 <erff+0x35c>
 8015920:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015924:	eddf 6a61 	vldr	s13, [pc, #388]	; 8015aac <erff+0x360>
 8015928:	eee7 6a27 	vfma.f32	s13, s14, s15
 801592c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015ab0 <erff+0x364>
 8015930:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015934:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8015ab4 <erff+0x368>
 8015938:	eee7 6a27 	vfma.f32	s13, s14, s15
 801593c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8015ab8 <erff+0x36c>
 8015940:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015944:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8015abc <erff+0x370>
 8015948:	eee7 6a27 	vfma.f32	s13, s14, s15
 801594c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8015ac0 <erff+0x374>
 8015950:	ee18 3a10 	vmov	r3, s16
 8015954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015958:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801595c:	f023 030f 	bic.w	r3, r3, #15
 8015960:	ee08 3a90 	vmov	s17, r3
 8015964:	eef0 aa69 	vmov.f32	s21, s19
 8015968:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 801596c:	eee7 aa27 	vfma.f32	s21, s14, s15
 8015970:	eea8 0ae8 	vfms.f32	s0, s17, s17
 8015974:	f001 f91c 	bl	8016bb0 <__ieee754_expf>
 8015978:	eeb0 aa40 	vmov.f32	s20, s0
 801597c:	ee89 0a2a 	vdiv.f32	s0, s18, s21
 8015980:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8015984:	ee78 8a28 	vadd.f32	s17, s16, s17
 8015988:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801598c:	f001 f910 	bl	8016bb0 <__ieee754_expf>
 8015990:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8015994:	2c00      	cmp	r4, #0
 8015996:	eec0 7a08 	vdiv.f32	s15, s0, s16
 801599a:	bfac      	ite	ge
 801599c:	ee79 7ae7 	vsubge.f32	s15, s19, s15
 80159a0:	ee77 7ae9 	vsublt.f32	s15, s15, s19
 80159a4:	e6ec      	b.n	8015780 <erff+0x34>
 80159a6:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015ac4 <erff+0x378>
 80159aa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8015ac8 <erff+0x37c>
 80159ae:	ed9f 9a47 	vldr	s18, [pc, #284]	; 8015acc <erff+0x380>
 80159b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80159b6:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015ad0 <erff+0x384>
 80159ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80159be:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8015ad4 <erff+0x388>
 80159c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159c6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015ad8 <erff+0x38c>
 80159ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80159ce:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8015adc <erff+0x390>
 80159d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159d6:	eddf 6a42 	vldr	s13, [pc, #264]	; 8015ae0 <erff+0x394>
 80159da:	eea7 9a27 	vfma.f32	s18, s14, s15
 80159de:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8015ae4 <erff+0x398>
 80159e2:	eee7 6a87 	vfma.f32	s13, s15, s14
 80159e6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8015ae8 <erff+0x39c>
 80159ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159ee:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8015aec <erff+0x3a0>
 80159f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80159f6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8015af0 <erff+0x3a4>
 80159fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015af4 <erff+0x3a8>
 8015a02:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015a06:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8015af8 <erff+0x3ac>
 8015a0a:	e7a1      	b.n	8015950 <erff+0x204>
 8015a0c:	3f57ffff 	.word	0x3f57ffff
 8015a10:	3f8375d4 	.word	0x3f8375d4
 8015a14:	3e0375d4 	.word	0x3e0375d4
 8015a18:	b7c756b1 	.word	0xb7c756b1
 8015a1c:	bbbd1489 	.word	0xbbbd1489
 8015a20:	b684e21a 	.word	0xb684e21a
 8015a24:	bce9528f 	.word	0xbce9528f
 8015a28:	bea66beb 	.word	0xbea66beb
 8015a2c:	390aee49 	.word	0x390aee49
 8015a30:	3ba68116 	.word	0x3ba68116
 8015a34:	3d852a63 	.word	0x3d852a63
 8015a38:	3ecbbbce 	.word	0x3ecbbbce
 8015a3c:	3f9fffff 	.word	0x3f9fffff
 8015a40:	bb0df9c0 	.word	0xbb0df9c0
 8015a44:	3d1151b3 	.word	0x3d1151b3
 8015a48:	3c445aa3 	.word	0x3c445aa3
 8015a4c:	bde31cc2 	.word	0xbde31cc2
 8015a50:	3ea2fe54 	.word	0x3ea2fe54
 8015a54:	bebe9208 	.word	0xbebe9208
 8015a58:	3ed46805 	.word	0x3ed46805
 8015a5c:	bb1acdc6 	.word	0xbb1acdc6
 8015a60:	3c5f6e13 	.word	0x3c5f6e13
 8015a64:	3e013307 	.word	0x3e013307
 8015a68:	3d931ae7 	.word	0x3d931ae7
 8015a6c:	3f0a5785 	.word	0x3f0a5785
 8015a70:	3dd9f331 	.word	0x3dd9f331
 8015a74:	3f58560b 	.word	0x3f58560b
 8015a78:	bf58560b 	.word	0xbf58560b
 8015a7c:	40bfffff 	.word	0x40bfffff
 8015a80:	4036db6d 	.word	0x4036db6d
 8015a84:	c11d077e 	.word	0xc11d077e
 8015a88:	c2a2932b 	.word	0xc2a2932b
 8015a8c:	bc21a093 	.word	0xbc21a093
 8015a90:	c3389ae7 	.word	0xc3389ae7
 8015a94:	c322658c 	.word	0xc322658c
 8015a98:	c2798057 	.word	0xc2798057
 8015a9c:	c128f022 	.word	0xc128f022
 8015aa0:	bf31a0b7 	.word	0xbf31a0b7
 8015aa4:	bd777f97 	.word	0xbd777f97
 8015aa8:	40d23f7c 	.word	0x40d23f7c
 8015aac:	42d9451f 	.word	0x42d9451f
 8015ab0:	43d6810b 	.word	0x43d6810b
 8015ab4:	442158c9 	.word	0x442158c9
 8015ab8:	43d9486f 	.word	0x43d9486f
 8015abc:	4309a863 	.word	0x4309a863
 8015ac0:	419d35ce 	.word	0x419d35ce
 8015ac4:	c3f1c275 	.word	0xc3f1c275
 8015ac8:	c480230b 	.word	0xc480230b
 8015acc:	bc21a092 	.word	0xbc21a092
 8015ad0:	c41f6441 	.word	0xc41f6441
 8015ad4:	c320a2ea 	.word	0xc320a2ea
 8015ad8:	c18e104b 	.word	0xc18e104b
 8015adc:	bf4c9dd4 	.word	0xbf4c9dd4
 8015ae0:	43ed43a7 	.word	0x43ed43a7
 8015ae4:	c1b38712 	.word	0xc1b38712
 8015ae8:	451f90ce 	.word	0x451f90ce
 8015aec:	4547fdbb 	.word	0x4547fdbb
 8015af0:	44c01759 	.word	0x44c01759
 8015af4:	43a2e571 	.word	0x43a2e571
 8015af8:	41f2b459 	.word	0x41f2b459

08015afc <fabsf>:
 8015afc:	ee10 3a10 	vmov	r3, s0
 8015b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b04:	ee00 3a10 	vmov	s0, r3
 8015b08:	4770      	bx	lr
	...

08015b0c <sinf>:
 8015b0c:	ee10 3a10 	vmov	r3, s0
 8015b10:	b507      	push	{r0, r1, r2, lr}
 8015b12:	4a1f      	ldr	r2, [pc, #124]	; (8015b90 <sinf+0x84>)
 8015b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	dc07      	bgt.n	8015b2c <sinf+0x20>
 8015b1c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8015b94 <sinf+0x88>
 8015b20:	2000      	movs	r0, #0
 8015b22:	b003      	add	sp, #12
 8015b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b28:	f000 bc42 	b.w	80163b0 <__kernel_sinf>
 8015b2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b30:	db04      	blt.n	8015b3c <sinf+0x30>
 8015b32:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015b36:	b003      	add	sp, #12
 8015b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b3c:	4668      	mov	r0, sp
 8015b3e:	f001 fd43 	bl	80175c8 <__ieee754_rem_pio2f>
 8015b42:	f000 0003 	and.w	r0, r0, #3
 8015b46:	2801      	cmp	r0, #1
 8015b48:	d00a      	beq.n	8015b60 <sinf+0x54>
 8015b4a:	2802      	cmp	r0, #2
 8015b4c:	d00f      	beq.n	8015b6e <sinf+0x62>
 8015b4e:	b9c0      	cbnz	r0, 8015b82 <sinf+0x76>
 8015b50:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b54:	ed9d 0a00 	vldr	s0, [sp]
 8015b58:	2001      	movs	r0, #1
 8015b5a:	f000 fc29 	bl	80163b0 <__kernel_sinf>
 8015b5e:	e7ea      	b.n	8015b36 <sinf+0x2a>
 8015b60:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b64:	ed9d 0a00 	vldr	s0, [sp]
 8015b68:	f000 fbc4 	bl	80162f4 <__kernel_cosf>
 8015b6c:	e7e3      	b.n	8015b36 <sinf+0x2a>
 8015b6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b72:	ed9d 0a00 	vldr	s0, [sp]
 8015b76:	2001      	movs	r0, #1
 8015b78:	f000 fc1a 	bl	80163b0 <__kernel_sinf>
 8015b7c:	eeb1 0a40 	vneg.f32	s0, s0
 8015b80:	e7d9      	b.n	8015b36 <sinf+0x2a>
 8015b82:	eddd 0a01 	vldr	s1, [sp, #4]
 8015b86:	ed9d 0a00 	vldr	s0, [sp]
 8015b8a:	f000 fbb3 	bl	80162f4 <__kernel_cosf>
 8015b8e:	e7f5      	b.n	8015b7c <sinf+0x70>
 8015b90:	3f490fd8 	.word	0x3f490fd8
 8015b94:	00000000 	.word	0x00000000

08015b98 <tanf>:
 8015b98:	ee10 3a10 	vmov	r3, s0
 8015b9c:	b507      	push	{r0, r1, r2, lr}
 8015b9e:	4a12      	ldr	r2, [pc, #72]	; (8015be8 <tanf+0x50>)
 8015ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	dc07      	bgt.n	8015bb8 <tanf+0x20>
 8015ba8:	eddf 0a10 	vldr	s1, [pc, #64]	; 8015bec <tanf+0x54>
 8015bac:	2001      	movs	r0, #1
 8015bae:	b003      	add	sp, #12
 8015bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bb4:	f000 bc44 	b.w	8016440 <__kernel_tanf>
 8015bb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015bbc:	db04      	blt.n	8015bc8 <tanf+0x30>
 8015bbe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015bc2:	b003      	add	sp, #12
 8015bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bc8:	4668      	mov	r0, sp
 8015bca:	f001 fcfd 	bl	80175c8 <__ieee754_rem_pio2f>
 8015bce:	0040      	lsls	r0, r0, #1
 8015bd0:	f000 0002 	and.w	r0, r0, #2
 8015bd4:	eddd 0a01 	vldr	s1, [sp, #4]
 8015bd8:	ed9d 0a00 	vldr	s0, [sp]
 8015bdc:	f1c0 0001 	rsb	r0, r0, #1
 8015be0:	f000 fc2e 	bl	8016440 <__kernel_tanf>
 8015be4:	e7ed      	b.n	8015bc2 <tanf+0x2a>
 8015be6:	bf00      	nop
 8015be8:	3f490fda 	.word	0x3f490fda
 8015bec:	00000000 	.word	0x00000000

08015bf0 <tanhf>:
 8015bf0:	b538      	push	{r3, r4, r5, lr}
 8015bf2:	ee10 5a10 	vmov	r5, s0
 8015bf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015bfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015bfe:	ed2d 8b02 	vpush	{d8}
 8015c02:	db0f      	blt.n	8015c24 <tanhf+0x34>
 8015c04:	4b2a      	ldr	r3, [pc, #168]	; (8015cb0 <tanhf+0xc0>)
 8015c06:	ed93 6a00 	vldr	s12, [r3]
 8015c0a:	edd3 6a00 	vldr	s13, [r3]
 8015c0e:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8015c12:	2d00      	cmp	r5, #0
 8015c14:	bfac      	ite	ge
 8015c16:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 8015c1a:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 8015c1e:	ecbd 8b02 	vpop	{d8}
 8015c22:	bd38      	pop	{r3, r4, r5, pc}
 8015c24:	4a23      	ldr	r2, [pc, #140]	; (8015cb4 <tanhf+0xc4>)
 8015c26:	4293      	cmp	r3, r2
 8015c28:	dc39      	bgt.n	8015c9e <tanhf+0xae>
 8015c2a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8015c2e:	da07      	bge.n	8015c40 <tanhf+0x50>
 8015c30:	4b1f      	ldr	r3, [pc, #124]	; (8015cb0 <tanhf+0xc0>)
 8015c32:	edd3 7a00 	vldr	s15, [r3]
 8015c36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015c3e:	e7ee      	b.n	8015c1e <tanhf+0x2e>
 8015c40:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015c44:	4c1c      	ldr	r4, [pc, #112]	; (8015cb8 <tanhf+0xc8>)
 8015c46:	db19      	blt.n	8015c7c <tanhf+0x8c>
 8015c48:	f7ff ff58 	bl	8015afc <fabsf>
 8015c4c:	edd4 7a00 	vldr	s15, [r4]
 8015c50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015c54:	f000 f842 	bl	8015cdc <expm1f>
 8015c58:	4b15      	ldr	r3, [pc, #84]	; (8015cb0 <tanhf+0xc0>)
 8015c5a:	edd3 7a00 	vldr	s15, [r3]
 8015c5e:	edd4 6a00 	vldr	s13, [r4]
 8015c62:	ed94 7a00 	vldr	s14, [r4]
 8015c66:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015c6a:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8015c6e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015c72:	2d00      	cmp	r5, #0
 8015c74:	bfb8      	it	lt
 8015c76:	eeb1 0a40 	vneglt.f32	s0, s0
 8015c7a:	e7d0      	b.n	8015c1e <tanhf+0x2e>
 8015c7c:	ed94 8a00 	vldr	s16, [r4]
 8015c80:	f7ff ff3c 	bl	8015afc <fabsf>
 8015c84:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8015c88:	f000 f828 	bl	8015cdc <expm1f>
 8015c8c:	edd4 7a00 	vldr	s15, [r4]
 8015c90:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c94:	eeb1 7a40 	vneg.f32	s14, s0
 8015c98:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015c9c:	e7e9      	b.n	8015c72 <tanhf+0x82>
 8015c9e:	4b04      	ldr	r3, [pc, #16]	; (8015cb0 <tanhf+0xc0>)
 8015ca0:	ed93 0a00 	vldr	s0, [r3]
 8015ca4:	4b05      	ldr	r3, [pc, #20]	; (8015cbc <tanhf+0xcc>)
 8015ca6:	edd3 7a00 	vldr	s15, [r3]
 8015caa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015cae:	e7e0      	b.n	8015c72 <tanhf+0x82>
 8015cb0:	20000a90 	.word	0x20000a90
 8015cb4:	41afffff 	.word	0x41afffff
 8015cb8:	20000a98 	.word	0x20000a98
 8015cbc:	20000a94 	.word	0x20000a94

08015cc0 <finitef>:
 8015cc0:	b082      	sub	sp, #8
 8015cc2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015cc6:	9801      	ldr	r0, [sp, #4]
 8015cc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015ccc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015cd0:	bfac      	ite	ge
 8015cd2:	2000      	movge	r0, #0
 8015cd4:	2001      	movlt	r0, #1
 8015cd6:	b002      	add	sp, #8
 8015cd8:	4770      	bx	lr
	...

08015cdc <expm1f>:
 8015cdc:	ee10 2a10 	vmov	r2, s0
 8015ce0:	497e      	ldr	r1, [pc, #504]	; (8015edc <expm1f+0x200>)
 8015ce2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015ce6:	428b      	cmp	r3, r1
 8015ce8:	d921      	bls.n	8015d2e <expm1f+0x52>
 8015cea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015cee:	d902      	bls.n	8015cf6 <expm1f+0x1a>
 8015cf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015cf4:	4770      	bx	lr
 8015cf6:	d106      	bne.n	8015d06 <expm1f+0x2a>
 8015cf8:	2a00      	cmp	r2, #0
 8015cfa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015cfe:	bfb8      	it	lt
 8015d00:	eeb0 0a67 	vmovlt.f32	s0, s15
 8015d04:	4770      	bx	lr
 8015d06:	2a00      	cmp	r2, #0
 8015d08:	db05      	blt.n	8015d16 <expm1f+0x3a>
 8015d0a:	4975      	ldr	r1, [pc, #468]	; (8015ee0 <expm1f+0x204>)
 8015d0c:	428b      	cmp	r3, r1
 8015d0e:	d95c      	bls.n	8015dca <expm1f+0xee>
 8015d10:	2000      	movs	r0, #0
 8015d12:	f000 ba1d 	b.w	8016150 <__math_oflowf>
 8015d16:	eddf 7a73 	vldr	s15, [pc, #460]	; 8015ee4 <expm1f+0x208>
 8015d1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d26:	d550      	bpl.n	8015dca <expm1f+0xee>
 8015d28:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015d2c:	4770      	bx	lr
 8015d2e:	496e      	ldr	r1, [pc, #440]	; (8015ee8 <expm1f+0x20c>)
 8015d30:	428b      	cmp	r3, r1
 8015d32:	d967      	bls.n	8015e04 <expm1f+0x128>
 8015d34:	496d      	ldr	r1, [pc, #436]	; (8015eec <expm1f+0x210>)
 8015d36:	428b      	cmp	r3, r1
 8015d38:	d847      	bhi.n	8015dca <expm1f+0xee>
 8015d3a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015ef0 <expm1f+0x214>
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	bfa7      	ittee	ge
 8015d42:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8015d46:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 8015ef4 <expm1f+0x218>
 8015d4a:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 8015ef8 <expm1f+0x21c>
 8015d4e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8015d52:	bfac      	ite	ge
 8015d54:	2301      	movge	r3, #1
 8015d56:	f04f 33ff 	movlt.w	r3, #4294967295
 8015d5a:	ee37 0a66 	vsub.f32	s0, s14, s13
 8015d5e:	ee77 7a40 	vsub.f32	s15, s14, s0
 8015d62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015d66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015d6a:	ee20 4a25 	vmul.f32	s8, s0, s11
 8015d6e:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8015efc <expm1f+0x220>
 8015d72:	eddf 6a63 	vldr	s13, [pc, #396]	; 8015f00 <expm1f+0x224>
 8015d76:	ed9f 5a63 	vldr	s10, [pc, #396]	; 8015f04 <expm1f+0x228>
 8015d7a:	ee20 7a04 	vmul.f32	s14, s0, s8
 8015d7e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8015d82:	eee7 6a06 	vfma.f32	s13, s14, s12
 8015d86:	ed9f 6a60 	vldr	s12, [pc, #384]	; 8015f08 <expm1f+0x22c>
 8015d8a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8015f0c <expm1f+0x230>
 8015d92:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015d96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015d9a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015d9e:	eef0 6a46 	vmov.f32	s13, s12
 8015da2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015da6:	eee4 4a66 	vfms.f32	s9, s8, s13
 8015daa:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8015dae:	eea0 4a64 	vfms.f32	s8, s0, s9
 8015db2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8015db6:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8015dba:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015dbe:	bb7b      	cbnz	r3, 8015e20 <expm1f+0x144>
 8015dc0:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8015dc4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015dc8:	4770      	bx	lr
 8015dca:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015dce:	2a00      	cmp	r2, #0
 8015dd0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015dd4:	bfb8      	it	lt
 8015dd6:	eef0 7a47 	vmovlt.f32	s15, s14
 8015dda:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015f10 <expm1f+0x234>
 8015dde:	ee40 7a07 	vmla.f32	s15, s0, s14
 8015de2:	eeb0 7a40 	vmov.f32	s14, s0
 8015de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015dea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015dee:	ee17 3a90 	vmov	r3, s15
 8015df2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8015ef0 <expm1f+0x214>
 8015df6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8015dfa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015ef4 <expm1f+0x218>
 8015dfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015e02:	e7aa      	b.n	8015d5a <expm1f+0x7e>
 8015e04:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8015e08:	d208      	bcs.n	8015e1c <expm1f+0x140>
 8015e0a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8015f14 <expm1f+0x238>
 8015e0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015e12:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8015e16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e1a:	4770      	bx	lr
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e7a2      	b.n	8015d66 <expm1f+0x8a>
 8015e20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015e24:	1c5a      	adds	r2, r3, #1
 8015e26:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8015e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e2e:	d106      	bne.n	8015e3e <expm1f+0x162>
 8015e30:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015e34:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015e38:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015e3c:	4770      	bx	lr
 8015e3e:	2b01      	cmp	r3, #1
 8015e40:	d118      	bne.n	8015e74 <expm1f+0x198>
 8015e42:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8015e46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4e:	bf5b      	ittet	pl
 8015e50:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8015e54:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8015e58:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8015e5c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8015e60:	bf43      	ittte	mi
 8015e62:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8015e66:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8015e6a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8015e6e:	eeb0 0a46 	vmovpl.f32	s0, s12
 8015e72:	4770      	bx	lr
 8015e74:	1c5a      	adds	r2, r3, #1
 8015e76:	2a39      	cmp	r2, #57	; 0x39
 8015e78:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8015e7c:	d90b      	bls.n	8015e96 <expm1f+0x1ba>
 8015e7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015e82:	ee76 7a67 	vsub.f32	s15, s12, s15
 8015e86:	ee17 3a90 	vmov	r3, s15
 8015e8a:	4419      	add	r1, r3
 8015e8c:	ee07 1a90 	vmov	s15, r1
 8015e90:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8015e94:	4770      	bx	lr
 8015e96:	2b16      	cmp	r3, #22
 8015e98:	dc11      	bgt.n	8015ebe <expm1f+0x1e2>
 8015e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015e9e:	fa42 f303 	asr.w	r3, r2, r3
 8015ea2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8015ea6:	ee07 3a10 	vmov	s14, r3
 8015eaa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015eb2:	ee17 3a90 	vmov	r3, s15
 8015eb6:	440b      	add	r3, r1
 8015eb8:	ee00 3a10 	vmov	s0, r3
 8015ebc:	4770      	bx	lr
 8015ebe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8015ec2:	05db      	lsls	r3, r3, #23
 8015ec4:	ee07 3a10 	vmov	s14, r3
 8015ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ecc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015ed0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015ed4:	ee17 3a90 	vmov	r3, s15
 8015ed8:	e7ed      	b.n	8015eb6 <expm1f+0x1da>
 8015eda:	bf00      	nop
 8015edc:	4195b843 	.word	0x4195b843
 8015ee0:	42b17217 	.word	0x42b17217
 8015ee4:	0da24260 	.word	0x0da24260
 8015ee8:	3eb17218 	.word	0x3eb17218
 8015eec:	3f851591 	.word	0x3f851591
 8015ef0:	3f317180 	.word	0x3f317180
 8015ef4:	3717f7d1 	.word	0x3717f7d1
 8015ef8:	b717f7d1 	.word	0xb717f7d1
 8015efc:	b457edbb 	.word	0xb457edbb
 8015f00:	36867e54 	.word	0x36867e54
 8015f04:	bd088889 	.word	0xbd088889
 8015f08:	b8a670cd 	.word	0xb8a670cd
 8015f0c:	3ad00d01 	.word	0x3ad00d01
 8015f10:	3fb8aa3b 	.word	0x3fb8aa3b
 8015f14:	7149f2ca 	.word	0x7149f2ca

08015f18 <log1pf>:
 8015f18:	ee10 2a10 	vmov	r2, s0
 8015f1c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015f20:	eef0 7a40 	vmov.f32	s15, s0
 8015f24:	db04      	blt.n	8015f30 <log1pf+0x18>
 8015f26:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8015f2e:	4770      	bx	lr
 8015f30:	4b6b      	ldr	r3, [pc, #428]	; (80160e0 <log1pf+0x1c8>)
 8015f32:	429a      	cmp	r2, r3
 8015f34:	dc70      	bgt.n	8016018 <log1pf+0x100>
 8015f36:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015f3a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015f3e:	db0b      	blt.n	8015f58 <log1pf+0x40>
 8015f40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015f44:	eeb4 0a47 	vcmp.f32	s0, s14
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4c:	d102      	bne.n	8015f54 <log1pf+0x3c>
 8015f4e:	2001      	movs	r0, #1
 8015f50:	f000 b904 	b.w	801615c <__math_divzerof>
 8015f54:	f000 b914 	b.w	8016180 <__math_invalidf>
 8015f58:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8015f5c:	da12      	bge.n	8015f84 <log1pf+0x6c>
 8015f5e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80160e4 <log1pf+0x1cc>
 8015f62:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015f66:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6e:	dd02      	ble.n	8015f76 <log1pf+0x5e>
 8015f70:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 8015f74:	dbd9      	blt.n	8015f2a <log1pf+0x12>
 8015f76:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 8015f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015f7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015f82:	e7d2      	b.n	8015f2a <log1pf+0x12>
 8015f84:	4b58      	ldr	r3, [pc, #352]	; (80160e8 <log1pf+0x1d0>)
 8015f86:	441a      	add	r2, r3
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d84d      	bhi.n	8016028 <log1pf+0x110>
 8015f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f90:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015f94:	ee16 2a90 	vmov	r2, s13
 8015f98:	15d3      	asrs	r3, r2, #23
 8015f9a:	3b7f      	subs	r3, #127	; 0x7f
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	bfd5      	itete	le
 8015fa0:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 8015fa4:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 8015fa8:	ee37 7ac7 	vsuble.f32	s14, s15, s14
 8015fac:	ee37 7a67 	vsubgt.f32	s14, s14, s15
 8015fb0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8015fb4:	494d      	ldr	r1, [pc, #308]	; (80160ec <log1pf+0x1d4>)
 8015fb6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015fba:	428a      	cmp	r2, r1
 8015fbc:	bfc9      	itett	gt
 8015fbe:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 8015fc2:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 8015fc6:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 8015fca:	3301      	addgt	r3, #1
 8015fcc:	bfc8      	it	gt
 8015fce:	1092      	asrgt	r2, r2, #2
 8015fd0:	ee07 1a10 	vmov	s14, r1
 8015fd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fdc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015fe0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015fe4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015fe8:	2a00      	cmp	r2, #0
 8015fea:	d13f      	bne.n	801606c <log1pf+0x154>
 8015fec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff4:	d11b      	bne.n	801602e <log1pf+0x116>
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d06f      	beq.n	80160da <log1pf+0x1c2>
 8015ffa:	ee07 3a90 	vmov	s15, r3
 8015ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016002:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80160f0 <log1pf+0x1d8>
 8016006:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80160f4 <log1pf+0x1dc>
 801600a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801600e:	eef0 7a46 	vmov.f32	s15, s12
 8016012:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016016:	e788      	b.n	8015f2a <log1pf+0x12>
 8016018:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 801601c:	dbb6      	blt.n	8015f8c <log1pf+0x74>
 801601e:	15d3      	asrs	r3, r2, #23
 8016020:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80160f8 <log1pf+0x1e0>
 8016024:	3b7f      	subs	r3, #127	; 0x7f
 8016026:	e7c5      	b.n	8015fb4 <log1pf+0x9c>
 8016028:	2201      	movs	r2, #1
 801602a:	2300      	movs	r3, #0
 801602c:	e7d6      	b.n	8015fdc <log1pf+0xc4>
 801602e:	eddf 5a33 	vldr	s11, [pc, #204]	; 80160fc <log1pf+0x1e4>
 8016032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016036:	eea7 7ae5 	vfms.f32	s14, s15, s11
 801603a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801603e:	b913      	cbnz	r3, 8016046 <log1pf+0x12e>
 8016040:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016044:	e771      	b.n	8015f2a <log1pf+0x12>
 8016046:	ee07 3a10 	vmov	s14, r3
 801604a:	eddf 5a29 	vldr	s11, [pc, #164]	; 80160f0 <log1pf+0x1d8>
 801604e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016052:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016056:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801605a:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80160f4 <log1pf+0x1dc>
 801605e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016062:	eef0 7a66 	vmov.f32	s15, s13
 8016066:	eed7 7a06 	vfnms.f32	s15, s14, s12
 801606a:	e75e      	b.n	8015f2a <log1pf+0x12>
 801606c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016074:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8016100 <log1pf+0x1e8>
 8016078:	eddf 4a22 	vldr	s9, [pc, #136]	; 8016104 <log1pf+0x1ec>
 801607c:	eec7 5a87 	vdiv.f32	s11, s15, s14
 8016080:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8016084:	eee7 4a05 	vfma.f32	s9, s14, s10
 8016088:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8016108 <log1pf+0x1f0>
 801608c:	eea4 5a87 	vfma.f32	s10, s9, s14
 8016090:	eddf 4a1e 	vldr	s9, [pc, #120]	; 801610c <log1pf+0x1f4>
 8016094:	eee5 4a07 	vfma.f32	s9, s10, s14
 8016098:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8016110 <log1pf+0x1f8>
 801609c:	eea4 5a87 	vfma.f32	s10, s9, s14
 80160a0:	eddf 4a1c 	vldr	s9, [pc, #112]	; 8016114 <log1pf+0x1fc>
 80160a4:	eee5 4a07 	vfma.f32	s9, s10, s14
 80160a8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80160fc <log1pf+0x1e4>
 80160ac:	eea4 5a87 	vfma.f32	s10, s9, s14
 80160b0:	eef0 4a66 	vmov.f32	s9, s13
 80160b4:	eee5 4a07 	vfma.f32	s9, s10, s14
 80160b8:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80160bc:	b913      	cbnz	r3, 80160c4 <log1pf+0x1ac>
 80160be:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80160c2:	e7bd      	b.n	8016040 <log1pf+0x128>
 80160c4:	ee07 3a10 	vmov	s14, r3
 80160c8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80160f0 <log1pf+0x1d8>
 80160cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160d0:	eea7 6a05 	vfma.f32	s12, s14, s10
 80160d4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80160d8:	e7bd      	b.n	8016056 <log1pf+0x13e>
 80160da:	eddf 7a07 	vldr	s15, [pc, #28]	; 80160f8 <log1pf+0x1e0>
 80160de:	e724      	b.n	8015f2a <log1pf+0x12>
 80160e0:	3ed413d6 	.word	0x3ed413d6
 80160e4:	4c000000 	.word	0x4c000000
 80160e8:	416a09e0 	.word	0x416a09e0
 80160ec:	003504f6 	.word	0x003504f6
 80160f0:	3717f7d1 	.word	0x3717f7d1
 80160f4:	3f317180 	.word	0x3f317180
 80160f8:	00000000 	.word	0x00000000
 80160fc:	3f2aaaab 	.word	0x3f2aaaab
 8016100:	3e178897 	.word	0x3e178897
 8016104:	3e1cd04f 	.word	0x3e1cd04f
 8016108:	3e3a3325 	.word	0x3e3a3325
 801610c:	3e638e29 	.word	0x3e638e29
 8016110:	3e924925 	.word	0x3e924925
 8016114:	3ecccccd 	.word	0x3ecccccd

08016118 <with_errnof>:
 8016118:	b513      	push	{r0, r1, r4, lr}
 801611a:	4604      	mov	r4, r0
 801611c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016120:	f7fb fc66 	bl	80119f0 <__errno>
 8016124:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016128:	6004      	str	r4, [r0, #0]
 801612a:	b002      	add	sp, #8
 801612c:	bd10      	pop	{r4, pc}

0801612e <xflowf>:
 801612e:	b130      	cbz	r0, 801613e <xflowf+0x10>
 8016130:	eef1 7a40 	vneg.f32	s15, s0
 8016134:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016138:	2022      	movs	r0, #34	; 0x22
 801613a:	f7ff bfed 	b.w	8016118 <with_errnof>
 801613e:	eef0 7a40 	vmov.f32	s15, s0
 8016142:	e7f7      	b.n	8016134 <xflowf+0x6>

08016144 <__math_uflowf>:
 8016144:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801614c <__math_uflowf+0x8>
 8016148:	f7ff bff1 	b.w	801612e <xflowf>
 801614c:	10000000 	.word	0x10000000

08016150 <__math_oflowf>:
 8016150:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016158 <__math_oflowf+0x8>
 8016154:	f7ff bfeb 	b.w	801612e <xflowf>
 8016158:	70000000 	.word	0x70000000

0801615c <__math_divzerof>:
 801615c:	2800      	cmp	r0, #0
 801615e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801617c <__math_divzerof+0x20>
 8016162:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801616a:	bf08      	it	eq
 801616c:	eef0 7a47 	vmoveq.f32	s15, s14
 8016170:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016174:	2022      	movs	r0, #34	; 0x22
 8016176:	f7ff bfcf 	b.w	8016118 <with_errnof>
 801617a:	bf00      	nop
 801617c:	00000000 	.word	0x00000000

08016180 <__math_invalidf>:
 8016180:	eef0 7a40 	vmov.f32	s15, s0
 8016184:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016188:	eef4 7a67 	vcmp.f32	s15, s15
 801618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016190:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016194:	d602      	bvs.n	801619c <__math_invalidf+0x1c>
 8016196:	2021      	movs	r0, #33	; 0x21
 8016198:	f7ff bfbe 	b.w	8016118 <with_errnof>
 801619c:	4770      	bx	lr

0801619e <__ieee754_sqrtf>:
 801619e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80161a2:	4770      	bx	lr

080161a4 <ceilf>:
 80161a4:	ee10 3a10 	vmov	r3, s0
 80161a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80161ac:	3a7f      	subs	r2, #127	; 0x7f
 80161ae:	2a16      	cmp	r2, #22
 80161b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80161b4:	dc2a      	bgt.n	801620c <ceilf+0x68>
 80161b6:	2a00      	cmp	r2, #0
 80161b8:	da11      	bge.n	80161de <ceilf+0x3a>
 80161ba:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016220 <ceilf+0x7c>
 80161be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80161c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80161c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ca:	dd05      	ble.n	80161d8 <ceilf+0x34>
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	db23      	blt.n	8016218 <ceilf+0x74>
 80161d0:	2900      	cmp	r1, #0
 80161d2:	bf18      	it	ne
 80161d4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80161d8:	ee00 3a10 	vmov	s0, r3
 80161dc:	4770      	bx	lr
 80161de:	4911      	ldr	r1, [pc, #68]	; (8016224 <ceilf+0x80>)
 80161e0:	4111      	asrs	r1, r2
 80161e2:	420b      	tst	r3, r1
 80161e4:	d0fa      	beq.n	80161dc <ceilf+0x38>
 80161e6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016220 <ceilf+0x7c>
 80161ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80161ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80161f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161f6:	ddef      	ble.n	80161d8 <ceilf+0x34>
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	bfc2      	ittt	gt
 80161fc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8016200:	fa40 f202 	asrgt.w	r2, r0, r2
 8016204:	189b      	addgt	r3, r3, r2
 8016206:	ea23 0301 	bic.w	r3, r3, r1
 801620a:	e7e5      	b.n	80161d8 <ceilf+0x34>
 801620c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016210:	d3e4      	bcc.n	80161dc <ceilf+0x38>
 8016212:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016216:	4770      	bx	lr
 8016218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801621c:	e7dc      	b.n	80161d8 <ceilf+0x34>
 801621e:	bf00      	nop
 8016220:	7149f2ca 	.word	0x7149f2ca
 8016224:	007fffff 	.word	0x007fffff

08016228 <floorf>:
 8016228:	ee10 3a10 	vmov	r3, s0
 801622c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016230:	3a7f      	subs	r2, #127	; 0x7f
 8016232:	2a16      	cmp	r2, #22
 8016234:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016238:	dc2a      	bgt.n	8016290 <floorf+0x68>
 801623a:	2a00      	cmp	r2, #0
 801623c:	da11      	bge.n	8016262 <floorf+0x3a>
 801623e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80162a0 <floorf+0x78>
 8016242:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016246:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801624e:	dd05      	ble.n	801625c <floorf+0x34>
 8016250:	2b00      	cmp	r3, #0
 8016252:	da23      	bge.n	801629c <floorf+0x74>
 8016254:	4a13      	ldr	r2, [pc, #76]	; (80162a4 <floorf+0x7c>)
 8016256:	2900      	cmp	r1, #0
 8016258:	bf18      	it	ne
 801625a:	4613      	movne	r3, r2
 801625c:	ee00 3a10 	vmov	s0, r3
 8016260:	4770      	bx	lr
 8016262:	4911      	ldr	r1, [pc, #68]	; (80162a8 <floorf+0x80>)
 8016264:	4111      	asrs	r1, r2
 8016266:	420b      	tst	r3, r1
 8016268:	d0fa      	beq.n	8016260 <floorf+0x38>
 801626a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80162a0 <floorf+0x78>
 801626e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016272:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801627a:	ddef      	ble.n	801625c <floorf+0x34>
 801627c:	2b00      	cmp	r3, #0
 801627e:	bfbe      	ittt	lt
 8016280:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8016284:	fa40 f202 	asrlt.w	r2, r0, r2
 8016288:	189b      	addlt	r3, r3, r2
 801628a:	ea23 0301 	bic.w	r3, r3, r1
 801628e:	e7e5      	b.n	801625c <floorf+0x34>
 8016290:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016294:	d3e4      	bcc.n	8016260 <floorf+0x38>
 8016296:	ee30 0a00 	vadd.f32	s0, s0, s0
 801629a:	4770      	bx	lr
 801629c:	2300      	movs	r3, #0
 801629e:	e7dd      	b.n	801625c <floorf+0x34>
 80162a0:	7149f2ca 	.word	0x7149f2ca
 80162a4:	bf800000 	.word	0xbf800000
 80162a8:	007fffff 	.word	0x007fffff

080162ac <roundf>:
 80162ac:	ee10 0a10 	vmov	r0, s0
 80162b0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80162b4:	3a7f      	subs	r2, #127	; 0x7f
 80162b6:	2a16      	cmp	r2, #22
 80162b8:	dc15      	bgt.n	80162e6 <roundf+0x3a>
 80162ba:	2a00      	cmp	r2, #0
 80162bc:	da08      	bge.n	80162d0 <roundf+0x24>
 80162be:	3201      	adds	r2, #1
 80162c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80162c4:	d101      	bne.n	80162ca <roundf+0x1e>
 80162c6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80162ca:	ee00 3a10 	vmov	s0, r3
 80162ce:	4770      	bx	lr
 80162d0:	4907      	ldr	r1, [pc, #28]	; (80162f0 <roundf+0x44>)
 80162d2:	4111      	asrs	r1, r2
 80162d4:	4208      	tst	r0, r1
 80162d6:	d0fa      	beq.n	80162ce <roundf+0x22>
 80162d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80162dc:	4113      	asrs	r3, r2
 80162de:	4403      	add	r3, r0
 80162e0:	ea23 0301 	bic.w	r3, r3, r1
 80162e4:	e7f1      	b.n	80162ca <roundf+0x1e>
 80162e6:	2a80      	cmp	r2, #128	; 0x80
 80162e8:	d1f1      	bne.n	80162ce <roundf+0x22>
 80162ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80162ee:	4770      	bx	lr
 80162f0:	007fffff 	.word	0x007fffff

080162f4 <__kernel_cosf>:
 80162f4:	ee10 3a10 	vmov	r3, s0
 80162f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80162fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016304:	da05      	bge.n	8016312 <__kernel_cosf+0x1e>
 8016306:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801630a:	ee17 2a90 	vmov	r2, s15
 801630e:	2a00      	cmp	r2, #0
 8016310:	d03b      	beq.n	801638a <__kernel_cosf+0x96>
 8016312:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016316:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016390 <__kernel_cosf+0x9c>
 801631a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8016394 <__kernel_cosf+0xa0>
 801631e:	4a1e      	ldr	r2, [pc, #120]	; (8016398 <__kernel_cosf+0xa4>)
 8016320:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016324:	4293      	cmp	r3, r2
 8016326:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801639c <__kernel_cosf+0xa8>
 801632a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801632e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80163a0 <__kernel_cosf+0xac>
 8016332:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016336:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80163a4 <__kernel_cosf+0xb0>
 801633a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801633e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80163a8 <__kernel_cosf+0xb4>
 8016342:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016346:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801634a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801634e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016352:	eee7 0a06 	vfma.f32	s1, s14, s12
 8016356:	ee67 7a27 	vmul.f32	s15, s14, s15
 801635a:	dc04      	bgt.n	8016366 <__kernel_cosf+0x72>
 801635c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016360:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8016364:	4770      	bx	lr
 8016366:	4a11      	ldr	r2, [pc, #68]	; (80163ac <__kernel_cosf+0xb8>)
 8016368:	4293      	cmp	r3, r2
 801636a:	bfda      	itte	le
 801636c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8016370:	ee07 3a10 	vmovle	s14, r3
 8016374:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8016378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801637c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8016380:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016384:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016388:	4770      	bx	lr
 801638a:	eeb0 0a66 	vmov.f32	s0, s13
 801638e:	4770      	bx	lr
 8016390:	ad47d74e 	.word	0xad47d74e
 8016394:	310f74f6 	.word	0x310f74f6
 8016398:	3e999999 	.word	0x3e999999
 801639c:	b493f27c 	.word	0xb493f27c
 80163a0:	37d00d01 	.word	0x37d00d01
 80163a4:	bab60b61 	.word	0xbab60b61
 80163a8:	3d2aaaab 	.word	0x3d2aaaab
 80163ac:	3f480000 	.word	0x3f480000

080163b0 <__kernel_sinf>:
 80163b0:	ee10 3a10 	vmov	r3, s0
 80163b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80163b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80163bc:	da04      	bge.n	80163c8 <__kernel_sinf+0x18>
 80163be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80163c2:	ee17 3a90 	vmov	r3, s15
 80163c6:	b35b      	cbz	r3, 8016420 <__kernel_sinf+0x70>
 80163c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80163cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016424 <__kernel_sinf+0x74>
 80163d0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016428 <__kernel_sinf+0x78>
 80163d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80163d8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801642c <__kernel_sinf+0x7c>
 80163dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80163e0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016430 <__kernel_sinf+0x80>
 80163e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80163e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016434 <__kernel_sinf+0x84>
 80163ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 80163f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80163f4:	b930      	cbnz	r0, 8016404 <__kernel_sinf+0x54>
 80163f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016438 <__kernel_sinf+0x88>
 80163fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80163fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016402:	4770      	bx	lr
 8016404:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016408:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801640c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016410:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016414:	eddf 7a09 	vldr	s15, [pc, #36]	; 801643c <__kernel_sinf+0x8c>
 8016418:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801641c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	2f2ec9d3 	.word	0x2f2ec9d3
 8016428:	b2d72f34 	.word	0xb2d72f34
 801642c:	3638ef1b 	.word	0x3638ef1b
 8016430:	b9500d01 	.word	0xb9500d01
 8016434:	3c088889 	.word	0x3c088889
 8016438:	be2aaaab 	.word	0xbe2aaaab
 801643c:	3e2aaaab 	.word	0x3e2aaaab

08016440 <__kernel_tanf>:
 8016440:	b508      	push	{r3, lr}
 8016442:	ee10 3a10 	vmov	r3, s0
 8016446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801644a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801644e:	eef0 7a40 	vmov.f32	s15, s0
 8016452:	da17      	bge.n	8016484 <__kernel_tanf+0x44>
 8016454:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016458:	ee17 1a10 	vmov	r1, s14
 801645c:	bb41      	cbnz	r1, 80164b0 <__kernel_tanf+0x70>
 801645e:	1c43      	adds	r3, r0, #1
 8016460:	4313      	orrs	r3, r2
 8016462:	d108      	bne.n	8016476 <__kernel_tanf+0x36>
 8016464:	f7ff fb4a 	bl	8015afc <fabsf>
 8016468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801646c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016470:	eeb0 0a67 	vmov.f32	s0, s15
 8016474:	bd08      	pop	{r3, pc}
 8016476:	2801      	cmp	r0, #1
 8016478:	d0fa      	beq.n	8016470 <__kernel_tanf+0x30>
 801647a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801647e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016482:	e7f5      	b.n	8016470 <__kernel_tanf+0x30>
 8016484:	494c      	ldr	r1, [pc, #304]	; (80165b8 <__kernel_tanf+0x178>)
 8016486:	428a      	cmp	r2, r1
 8016488:	db12      	blt.n	80164b0 <__kernel_tanf+0x70>
 801648a:	2b00      	cmp	r3, #0
 801648c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80165bc <__kernel_tanf+0x17c>
 8016490:	bfb8      	it	lt
 8016492:	eef1 7a40 	vneglt.f32	s15, s0
 8016496:	ee37 7a67 	vsub.f32	s14, s14, s15
 801649a:	eddf 7a49 	vldr	s15, [pc, #292]	; 80165c0 <__kernel_tanf+0x180>
 801649e:	bfb8      	it	lt
 80164a0:	eef1 0a60 	vneglt.f32	s1, s1
 80164a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80164a8:	eddf 0a46 	vldr	s1, [pc, #280]	; 80165c4 <__kernel_tanf+0x184>
 80164ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164b0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80164b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80165c8 <__kernel_tanf+0x188>
 80164b8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80165cc <__kernel_tanf+0x18c>
 80164bc:	ed9f 5a44 	vldr	s10, [pc, #272]	; 80165d0 <__kernel_tanf+0x190>
 80164c0:	493d      	ldr	r1, [pc, #244]	; (80165b8 <__kernel_tanf+0x178>)
 80164c2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80164c6:	428a      	cmp	r2, r1
 80164c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80164cc:	eddf 5a41 	vldr	s11, [pc, #260]	; 80165d4 <__kernel_tanf+0x194>
 80164d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80164d4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80165d8 <__kernel_tanf+0x198>
 80164d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80164dc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80165dc <__kernel_tanf+0x19c>
 80164e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80164e4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80165e0 <__kernel_tanf+0x1a0>
 80164e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80164ec:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80165e4 <__kernel_tanf+0x1a4>
 80164f0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80164f4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80165e8 <__kernel_tanf+0x1a8>
 80164f8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80164fc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80165ec <__kernel_tanf+0x1ac>
 8016500:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016504:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80165f0 <__kernel_tanf+0x1b0>
 8016508:	eea5 5a87 	vfma.f32	s10, s11, s14
 801650c:	eddf 5a39 	vldr	s11, [pc, #228]	; 80165f4 <__kernel_tanf+0x1b4>
 8016510:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016514:	eeb0 7a46 	vmov.f32	s14, s12
 8016518:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801651c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016520:	eeb0 6a60 	vmov.f32	s12, s1
 8016524:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016528:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80165f8 <__kernel_tanf+0x1b8>
 801652c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016530:	eee5 0a07 	vfma.f32	s1, s10, s14
 8016534:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8016538:	db1d      	blt.n	8016576 <__kernel_tanf+0x136>
 801653a:	ee07 0a10 	vmov	s14, r0
 801653e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016542:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8016546:	ee76 6a87 	vadd.f32	s13, s13, s14
 801654a:	179b      	asrs	r3, r3, #30
 801654c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8016550:	f003 0302 	and.w	r3, r3, #2
 8016554:	f1c3 0301 	rsb	r3, r3, #1
 8016558:	ee76 6a60 	vsub.f32	s13, s12, s1
 801655c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016560:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016564:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016568:	ee07 3a90 	vmov	s15, r3
 801656c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016574:	e77c      	b.n	8016470 <__kernel_tanf+0x30>
 8016576:	2801      	cmp	r0, #1
 8016578:	d01b      	beq.n	80165b2 <__kernel_tanf+0x172>
 801657a:	4b20      	ldr	r3, [pc, #128]	; (80165fc <__kernel_tanf+0x1bc>)
 801657c:	ee16 2a90 	vmov	r2, s13
 8016580:	401a      	ands	r2, r3
 8016582:	ee05 2a90 	vmov	s11, r2
 8016586:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801658a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801658e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016592:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016596:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801659a:	ee16 2a10 	vmov	r2, s12
 801659e:	4013      	ands	r3, r2
 80165a0:	ee07 3a90 	vmov	s15, r3
 80165a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80165a8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80165ac:	eee7 7a06 	vfma.f32	s15, s14, s12
 80165b0:	e75e      	b.n	8016470 <__kernel_tanf+0x30>
 80165b2:	eef0 7a66 	vmov.f32	s15, s13
 80165b6:	e75b      	b.n	8016470 <__kernel_tanf+0x30>
 80165b8:	3f2ca140 	.word	0x3f2ca140
 80165bc:	3f490fda 	.word	0x3f490fda
 80165c0:	33222168 	.word	0x33222168
 80165c4:	00000000 	.word	0x00000000
 80165c8:	b79bae5f 	.word	0xb79bae5f
 80165cc:	38a3f445 	.word	0x38a3f445
 80165d0:	37d95384 	.word	0x37d95384
 80165d4:	3a1a26c8 	.word	0x3a1a26c8
 80165d8:	3b6b6916 	.word	0x3b6b6916
 80165dc:	3cb327a4 	.word	0x3cb327a4
 80165e0:	3e088889 	.word	0x3e088889
 80165e4:	3895c07a 	.word	0x3895c07a
 80165e8:	398137b9 	.word	0x398137b9
 80165ec:	3abede48 	.word	0x3abede48
 80165f0:	3c11371f 	.word	0x3c11371f
 80165f4:	3d5d0dd1 	.word	0x3d5d0dd1
 80165f8:	3eaaaaab 	.word	0x3eaaaaab
 80165fc:	fffff000 	.word	0xfffff000

08016600 <__ieee754_acosf>:
 8016600:	b508      	push	{r3, lr}
 8016602:	ee10 3a10 	vmov	r3, s0
 8016606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801660a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801660e:	ed2d 8b0c 	vpush	{d8-d13}
 8016612:	d10a      	bne.n	801662a <__ieee754_acosf+0x2a>
 8016614:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80167ac <__ieee754_acosf+0x1ac>
 8016618:	eddf 7a65 	vldr	s15, [pc, #404]	; 80167b0 <__ieee754_acosf+0x1b0>
 801661c:	2b00      	cmp	r3, #0
 801661e:	bfd8      	it	le
 8016620:	eeb0 0a67 	vmovle.f32	s0, s15
 8016624:	ecbd 8b0c 	vpop	{d8-d13}
 8016628:	bd08      	pop	{r3, pc}
 801662a:	dd04      	ble.n	8016636 <__ieee754_acosf+0x36>
 801662c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016630:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016634:	e7f6      	b.n	8016624 <__ieee754_acosf+0x24>
 8016636:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801663a:	da3c      	bge.n	80166b6 <__ieee754_acosf+0xb6>
 801663c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8016640:	f340 80b1 	ble.w	80167a6 <__ieee754_acosf+0x1a6>
 8016644:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016648:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80167b4 <__ieee754_acosf+0x1b4>
 801664c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80167b8 <__ieee754_acosf+0x1b8>
 8016650:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 80167bc <__ieee754_acosf+0x1bc>
 8016654:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016658:	eddf 6a59 	vldr	s13, [pc, #356]	; 80167c0 <__ieee754_acosf+0x1c0>
 801665c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016660:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80167c4 <__ieee754_acosf+0x1c4>
 8016664:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016668:	eddf 6a57 	vldr	s13, [pc, #348]	; 80167c8 <__ieee754_acosf+0x1c8>
 801666c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016670:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80167cc <__ieee754_acosf+0x1cc>
 8016674:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016678:	eddf 6a55 	vldr	s13, [pc, #340]	; 80167d0 <__ieee754_acosf+0x1d0>
 801667c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016680:	eddf 6a54 	vldr	s13, [pc, #336]	; 80167d4 <__ieee754_acosf+0x1d4>
 8016684:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016688:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80167d8 <__ieee754_acosf+0x1d8>
 801668c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016694:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016698:	ee27 7a27 	vmul.f32	s14, s14, s15
 801669c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80166a0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80167dc <__ieee754_acosf+0x1dc>
 80166a4:	eea0 7a67 	vfms.f32	s14, s0, s15
 80166a8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80167e0 <__ieee754_acosf+0x1e0>
 80166ac:	ee30 7a47 	vsub.f32	s14, s0, s14
 80166b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80166b4:	e7b6      	b.n	8016624 <__ieee754_acosf+0x24>
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	eddf da3e 	vldr	s27, [pc, #248]	; 80167b4 <__ieee754_acosf+0x1b4>
 80166bc:	eddf ca3e 	vldr	s25, [pc, #248]	; 80167b8 <__ieee754_acosf+0x1b8>
 80166c0:	ed9f ca3f 	vldr	s24, [pc, #252]	; 80167c0 <__ieee754_acosf+0x1c0>
 80166c4:	eddf ba3f 	vldr	s23, [pc, #252]	; 80167c4 <__ieee754_acosf+0x1c4>
 80166c8:	ed9f ba3f 	vldr	s22, [pc, #252]	; 80167c8 <__ieee754_acosf+0x1c8>
 80166cc:	eddf 8a3f 	vldr	s17, [pc, #252]	; 80167cc <__ieee754_acosf+0x1cc>
 80166d0:	ed9f da3f 	vldr	s26, [pc, #252]	; 80167d0 <__ieee754_acosf+0x1d0>
 80166d4:	eddf aa39 	vldr	s21, [pc, #228]	; 80167bc <__ieee754_acosf+0x1bc>
 80166d8:	ed9f aa3e 	vldr	s20, [pc, #248]	; 80167d4 <__ieee754_acosf+0x1d4>
 80166dc:	eddf 9a3e 	vldr	s19, [pc, #248]	; 80167d8 <__ieee754_acosf+0x1d8>
 80166e0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80166e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80166e8:	da28      	bge.n	801673c <__ieee754_acosf+0x13c>
 80166ea:	ee30 0a09 	vadd.f32	s0, s0, s18
 80166ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80166f2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80166f6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80166fa:	eeac ca80 	vfma.f32	s24, s25, s0
 80166fe:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016702:	eeec ba00 	vfma.f32	s23, s24, s0
 8016706:	eeea 9a00 	vfma.f32	s19, s20, s0
 801670a:	eeab ba80 	vfma.f32	s22, s23, s0
 801670e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8016712:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8016716:	ee68 8a80 	vmul.f32	s17, s17, s0
 801671a:	f7ff fd40 	bl	801619e <__ieee754_sqrtf>
 801671e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8016722:	eddf 7a30 	vldr	s15, [pc, #192]	; 80167e4 <__ieee754_acosf+0x1e4>
 8016726:	eee0 7a07 	vfma.f32	s15, s0, s14
 801672a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801672e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016732:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80167e8 <__ieee754_acosf+0x1e8>
 8016736:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801673a:	e773      	b.n	8016624 <__ieee754_acosf+0x24>
 801673c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016740:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016744:	eeb0 0a48 	vmov.f32	s0, s16
 8016748:	f7ff fd29 	bl	801619e <__ieee754_sqrtf>
 801674c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016750:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8016754:	eeac ca88 	vfma.f32	s24, s25, s16
 8016758:	eeaa aa88 	vfma.f32	s20, s21, s16
 801675c:	eeec ba08 	vfma.f32	s23, s24, s16
 8016760:	ee10 3a10 	vmov	r3, s0
 8016764:	eeab ba88 	vfma.f32	s22, s23, s16
 8016768:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801676c:	f023 030f 	bic.w	r3, r3, #15
 8016770:	eeea 9a08 	vfma.f32	s19, s20, s16
 8016774:	ee07 3a90 	vmov	s15, r3
 8016778:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801677c:	eeb0 6a48 	vmov.f32	s12, s16
 8016780:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016784:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016788:	ee70 6a27 	vadd.f32	s13, s0, s15
 801678c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016790:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016794:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016798:	eea0 7a26 	vfma.f32	s14, s0, s13
 801679c:	ee37 0a87 	vadd.f32	s0, s15, s14
 80167a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80167a4:	e73e      	b.n	8016624 <__ieee754_acosf+0x24>
 80167a6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80167ec <__ieee754_acosf+0x1ec>
 80167aa:	e73b      	b.n	8016624 <__ieee754_acosf+0x24>
 80167ac:	00000000 	.word	0x00000000
 80167b0:	40490fdb 	.word	0x40490fdb
 80167b4:	3811ef08 	.word	0x3811ef08
 80167b8:	3a4f7f04 	.word	0x3a4f7f04
 80167bc:	bf303361 	.word	0xbf303361
 80167c0:	bd241146 	.word	0xbd241146
 80167c4:	3e4e0aa8 	.word	0x3e4e0aa8
 80167c8:	bea6b090 	.word	0xbea6b090
 80167cc:	3e2aaaab 	.word	0x3e2aaaab
 80167d0:	3d9dc62e 	.word	0x3d9dc62e
 80167d4:	4001572d 	.word	0x4001572d
 80167d8:	c019d139 	.word	0xc019d139
 80167dc:	33a22168 	.word	0x33a22168
 80167e0:	3fc90fda 	.word	0x3fc90fda
 80167e4:	b3a22168 	.word	0xb3a22168
 80167e8:	40490fda 	.word	0x40490fda
 80167ec:	3fc90fdb 	.word	0x3fc90fdb

080167f0 <__ieee754_acoshf>:
 80167f0:	b508      	push	{r3, lr}
 80167f2:	ee10 3a10 	vmov	r3, s0
 80167f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80167fa:	ed2d 8b04 	vpush	{d8-d9}
 80167fe:	eeb0 8a40 	vmov.f32	s16, s0
 8016802:	da06      	bge.n	8016812 <__ieee754_acoshf+0x22>
 8016804:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016808:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801680c:	ecbd 8b04 	vpop	{d8-d9}
 8016810:	bd08      	pop	{r3, pc}
 8016812:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8016816:	db0c      	blt.n	8016832 <__ieee754_acoshf+0x42>
 8016818:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801681c:	db02      	blt.n	8016824 <__ieee754_acoshf+0x34>
 801681e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016822:	e7f3      	b.n	801680c <__ieee754_acoshf+0x1c>
 8016824:	f000 fb14 	bl	8016e50 <__ieee754_logf>
 8016828:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016890 <__ieee754_acoshf+0xa0>
 801682c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016830:	e7ec      	b.n	801680c <__ieee754_acoshf+0x1c>
 8016832:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016836:	d028      	beq.n	801688a <__ieee754_acoshf+0x9a>
 8016838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801683c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016840:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8016844:	dd11      	ble.n	801686a <__ieee754_acoshf+0x7a>
 8016846:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801684a:	eea8 0a08 	vfma.f32	s0, s16, s16
 801684e:	f7ff fca6 	bl	801619e <__ieee754_sqrtf>
 8016852:	ee70 7a08 	vadd.f32	s15, s0, s16
 8016856:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801685a:	ee98 0a28 	vfnms.f32	s0, s16, s17
 801685e:	ecbd 8b04 	vpop	{d8-d9}
 8016862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016866:	f000 baf3 	b.w	8016e50 <__ieee754_logf>
 801686a:	ee30 8a49 	vsub.f32	s16, s0, s18
 801686e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016872:	eea8 0a28 	vfma.f32	s0, s16, s17
 8016876:	f7ff fc92 	bl	801619e <__ieee754_sqrtf>
 801687a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801687e:	ecbd 8b04 	vpop	{d8-d9}
 8016882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016886:	f7ff bb47 	b.w	8015f18 <log1pf>
 801688a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016894 <__ieee754_acoshf+0xa4>
 801688e:	e7bd      	b.n	801680c <__ieee754_acoshf+0x1c>
 8016890:	3f317218 	.word	0x3f317218
 8016894:	00000000 	.word	0x00000000

08016898 <__ieee754_asinf>:
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	ee10 5a10 	vmov	r5, s0
 801689e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80168a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80168a6:	ed2d 8b04 	vpush	{d8-d9}
 80168aa:	d10c      	bne.n	80168c6 <__ieee754_asinf+0x2e>
 80168ac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8016a24 <__ieee754_asinf+0x18c>
 80168b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016a28 <__ieee754_asinf+0x190>
 80168b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80168b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80168bc:	eeb0 0a67 	vmov.f32	s0, s15
 80168c0:	ecbd 8b04 	vpop	{d8-d9}
 80168c4:	bd38      	pop	{r3, r4, r5, pc}
 80168c6:	dd04      	ble.n	80168d2 <__ieee754_asinf+0x3a>
 80168c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80168cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80168d0:	e7f6      	b.n	80168c0 <__ieee754_asinf+0x28>
 80168d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80168d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80168da:	da0b      	bge.n	80168f4 <__ieee754_asinf+0x5c>
 80168dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80168e0:	da52      	bge.n	8016988 <__ieee754_asinf+0xf0>
 80168e2:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016a2c <__ieee754_asinf+0x194>
 80168e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80168ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 80168ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f2:	dce5      	bgt.n	80168c0 <__ieee754_asinf+0x28>
 80168f4:	f7ff f902 	bl	8015afc <fabsf>
 80168f8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80168fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016900:	ee20 8a27 	vmul.f32	s16, s0, s15
 8016904:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8016a30 <__ieee754_asinf+0x198>
 8016908:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016a34 <__ieee754_asinf+0x19c>
 801690c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016a38 <__ieee754_asinf+0x1a0>
 8016910:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016914:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016a3c <__ieee754_asinf+0x1a4>
 8016918:	eee7 7a08 	vfma.f32	s15, s14, s16
 801691c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016a40 <__ieee754_asinf+0x1a8>
 8016920:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016924:	eddf 7a47 	vldr	s15, [pc, #284]	; 8016a44 <__ieee754_asinf+0x1ac>
 8016928:	eee7 7a08 	vfma.f32	s15, s14, s16
 801692c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016a48 <__ieee754_asinf+0x1b0>
 8016930:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016934:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016a4c <__ieee754_asinf+0x1b4>
 8016938:	eee8 7a07 	vfma.f32	s15, s16, s14
 801693c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016a50 <__ieee754_asinf+0x1b8>
 8016940:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016944:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016a54 <__ieee754_asinf+0x1bc>
 8016948:	eee7 7a08 	vfma.f32	s15, s14, s16
 801694c:	eeb0 0a48 	vmov.f32	s0, s16
 8016950:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016954:	f7ff fc23 	bl	801619e <__ieee754_sqrtf>
 8016958:	4b3f      	ldr	r3, [pc, #252]	; (8016a58 <__ieee754_asinf+0x1c0>)
 801695a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801695e:	429c      	cmp	r4, r3
 8016960:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8016964:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016968:	dd3d      	ble.n	80169e6 <__ieee754_asinf+0x14e>
 801696a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801696e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016a5c <__ieee754_asinf+0x1c4>
 8016972:	eee0 7a26 	vfma.f32	s15, s0, s13
 8016976:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016a28 <__ieee754_asinf+0x190>
 801697a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801697e:	2d00      	cmp	r5, #0
 8016980:	bfd8      	it	le
 8016982:	eeb1 0a40 	vnegle.f32	s0, s0
 8016986:	e79b      	b.n	80168c0 <__ieee754_asinf+0x28>
 8016988:	ee60 7a00 	vmul.f32	s15, s0, s0
 801698c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016a34 <__ieee754_asinf+0x19c>
 8016990:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016a30 <__ieee754_asinf+0x198>
 8016994:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016a48 <__ieee754_asinf+0x1b0>
 8016998:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801699c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8016a3c <__ieee754_asinf+0x1a4>
 80169a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80169a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016a40 <__ieee754_asinf+0x1a8>
 80169a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80169ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8016a44 <__ieee754_asinf+0x1ac>
 80169b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80169b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016a38 <__ieee754_asinf+0x1a0>
 80169b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80169bc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8016a4c <__ieee754_asinf+0x1b4>
 80169c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80169c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8016a50 <__ieee754_asinf+0x1b8>
 80169c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80169cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8016a54 <__ieee754_asinf+0x1bc>
 80169d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80169d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80169dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80169e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80169e4:	e76c      	b.n	80168c0 <__ieee754_asinf+0x28>
 80169e6:	ee10 3a10 	vmov	r3, s0
 80169ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80169ee:	f023 030f 	bic.w	r3, r3, #15
 80169f2:	ee07 3a10 	vmov	s14, r3
 80169f6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80169fa:	ee70 7a07 	vadd.f32	s15, s0, s14
 80169fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016a02:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8016a06:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016a24 <__ieee754_asinf+0x18c>
 8016a0a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016a0e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8016a12:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8016a60 <__ieee754_asinf+0x1c8>
 8016a16:	eeb0 6a40 	vmov.f32	s12, s0
 8016a1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016a1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a22:	e7aa      	b.n	801697a <__ieee754_asinf+0xe2>
 8016a24:	b33bbd2e 	.word	0xb33bbd2e
 8016a28:	3fc90fdb 	.word	0x3fc90fdb
 8016a2c:	7149f2ca 	.word	0x7149f2ca
 8016a30:	3a4f7f04 	.word	0x3a4f7f04
 8016a34:	3811ef08 	.word	0x3811ef08
 8016a38:	3e2aaaab 	.word	0x3e2aaaab
 8016a3c:	bd241146 	.word	0xbd241146
 8016a40:	3e4e0aa8 	.word	0x3e4e0aa8
 8016a44:	bea6b090 	.word	0xbea6b090
 8016a48:	3d9dc62e 	.word	0x3d9dc62e
 8016a4c:	bf303361 	.word	0xbf303361
 8016a50:	4001572d 	.word	0x4001572d
 8016a54:	c019d139 	.word	0xc019d139
 8016a58:	3f799999 	.word	0x3f799999
 8016a5c:	333bbd2e 	.word	0x333bbd2e
 8016a60:	3f490fdb 	.word	0x3f490fdb

08016a64 <__ieee754_atanhf>:
 8016a64:	b510      	push	{r4, lr}
 8016a66:	ee10 4a10 	vmov	r4, s0
 8016a6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016a6e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016a72:	ed2d 8b02 	vpush	{d8}
 8016a76:	dd06      	ble.n	8016a86 <__ieee754_atanhf+0x22>
 8016a78:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016a7c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016a80:	ecbd 8b02 	vpop	{d8}
 8016a84:	bd10      	pop	{r4, pc}
 8016a86:	d104      	bne.n	8016a92 <__ieee754_atanhf+0x2e>
 8016a88:	eddf 7a17 	vldr	s15, [pc, #92]	; 8016ae8 <__ieee754_atanhf+0x84>
 8016a8c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016a90:	e7f6      	b.n	8016a80 <__ieee754_atanhf+0x1c>
 8016a92:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8016a96:	da08      	bge.n	8016aaa <__ieee754_atanhf+0x46>
 8016a98:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016aec <__ieee754_atanhf+0x88>
 8016a9c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa8:	dcea      	bgt.n	8016a80 <__ieee754_atanhf+0x1c>
 8016aaa:	ee07 3a90 	vmov	s15, r3
 8016aae:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8016ab2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8016ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016abe:	bfb6      	itet	lt
 8016ac0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016ac4:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8016ac8:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8016acc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016ad0:	bfb8      	it	lt
 8016ad2:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 8016ad6:	f7ff fa1f 	bl	8015f18 <log1pf>
 8016ada:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016ade:	2c00      	cmp	r4, #0
 8016ae0:	bfb8      	it	lt
 8016ae2:	eeb1 0a40 	vneglt.f32	s0, s0
 8016ae6:	e7cb      	b.n	8016a80 <__ieee754_atanhf+0x1c>
 8016ae8:	00000000 	.word	0x00000000
 8016aec:	7149f2ca 	.word	0x7149f2ca

08016af0 <__ieee754_coshf>:
 8016af0:	b510      	push	{r4, lr}
 8016af2:	ee10 4a10 	vmov	r4, s0
 8016af6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016afa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016afe:	ed2d 8b02 	vpush	{d8}
 8016b02:	db06      	blt.n	8016b12 <__ieee754_coshf+0x22>
 8016b04:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016b08:	ecbd 8b02 	vpop	{d8}
 8016b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8016b10:	bd10      	pop	{r4, pc}
 8016b12:	4b23      	ldr	r3, [pc, #140]	; (8016ba0 <__ieee754_coshf+0xb0>)
 8016b14:	429c      	cmp	r4, r3
 8016b16:	dc13      	bgt.n	8016b40 <__ieee754_coshf+0x50>
 8016b18:	f7fe fff0 	bl	8015afc <fabsf>
 8016b1c:	f7ff f8de 	bl	8015cdc <expm1f>
 8016b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b24:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 8016b28:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016b2c:	dbec      	blt.n	8016b08 <__ieee754_coshf+0x18>
 8016b2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016b32:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016b36:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8016b3a:	ee76 7a87 	vadd.f32	s15, s13, s14
 8016b3e:	e7e3      	b.n	8016b08 <__ieee754_coshf+0x18>
 8016b40:	4b18      	ldr	r3, [pc, #96]	; (8016ba4 <__ieee754_coshf+0xb4>)
 8016b42:	429c      	cmp	r4, r3
 8016b44:	dc0a      	bgt.n	8016b5c <__ieee754_coshf+0x6c>
 8016b46:	f7fe ffd9 	bl	8015afc <fabsf>
 8016b4a:	f000 f831 	bl	8016bb0 <__ieee754_expf>
 8016b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016b52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016b5a:	e7d5      	b.n	8016b08 <__ieee754_coshf+0x18>
 8016b5c:	4b12      	ldr	r3, [pc, #72]	; (8016ba8 <__ieee754_coshf+0xb8>)
 8016b5e:	429c      	cmp	r4, r3
 8016b60:	dc08      	bgt.n	8016b74 <__ieee754_coshf+0x84>
 8016b62:	f7fe ffcb 	bl	8015afc <fabsf>
 8016b66:	f000 f823 	bl	8016bb0 <__ieee754_expf>
 8016b6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016b6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016b72:	e7c9      	b.n	8016b08 <__ieee754_coshf+0x18>
 8016b74:	4b0d      	ldr	r3, [pc, #52]	; (8016bac <__ieee754_coshf+0xbc>)
 8016b76:	429c      	cmp	r4, r3
 8016b78:	dc0a      	bgt.n	8016b90 <__ieee754_coshf+0xa0>
 8016b7a:	f7fe ffbf 	bl	8015afc <fabsf>
 8016b7e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016b82:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016b86:	f000 f813 	bl	8016bb0 <__ieee754_expf>
 8016b8a:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016b8e:	e7ee      	b.n	8016b6e <__ieee754_coshf+0x7e>
 8016b90:	ecbd 8b02 	vpop	{d8}
 8016b94:	2000      	movs	r0, #0
 8016b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b9a:	f7ff bad9 	b.w	8016150 <__math_oflowf>
 8016b9e:	bf00      	nop
 8016ba0:	3eb17217 	.word	0x3eb17217
 8016ba4:	41afffff 	.word	0x41afffff
 8016ba8:	42b17217 	.word	0x42b17217
 8016bac:	42b2d4fc 	.word	0x42b2d4fc

08016bb0 <__ieee754_expf>:
 8016bb0:	ee10 2a10 	vmov	r2, s0
 8016bb4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016bb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016bbc:	d902      	bls.n	8016bc4 <__ieee754_expf+0x14>
 8016bbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016bc2:	4770      	bx	lr
 8016bc4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8016bc8:	d106      	bne.n	8016bd8 <__ieee754_expf+0x28>
 8016bca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016d04 <__ieee754_expf+0x154>
 8016bce:	2900      	cmp	r1, #0
 8016bd0:	bf18      	it	ne
 8016bd2:	eeb0 0a67 	vmovne.f32	s0, s15
 8016bd6:	4770      	bx	lr
 8016bd8:	484b      	ldr	r0, [pc, #300]	; (8016d08 <__ieee754_expf+0x158>)
 8016bda:	4282      	cmp	r2, r0
 8016bdc:	dd02      	ble.n	8016be4 <__ieee754_expf+0x34>
 8016bde:	2000      	movs	r0, #0
 8016be0:	f7ff bab6 	b.w	8016150 <__math_oflowf>
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	da05      	bge.n	8016bf4 <__ieee754_expf+0x44>
 8016be8:	4a48      	ldr	r2, [pc, #288]	; (8016d0c <__ieee754_expf+0x15c>)
 8016bea:	4293      	cmp	r3, r2
 8016bec:	d902      	bls.n	8016bf4 <__ieee754_expf+0x44>
 8016bee:	2000      	movs	r0, #0
 8016bf0:	f7ff baa8 	b.w	8016144 <__math_uflowf>
 8016bf4:	4a46      	ldr	r2, [pc, #280]	; (8016d10 <__ieee754_expf+0x160>)
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016bfc:	d952      	bls.n	8016ca4 <__ieee754_expf+0xf4>
 8016bfe:	4a45      	ldr	r2, [pc, #276]	; (8016d14 <__ieee754_expf+0x164>)
 8016c00:	4293      	cmp	r3, r2
 8016c02:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8016c06:	d834      	bhi.n	8016c72 <__ieee754_expf+0xc2>
 8016c08:	4b43      	ldr	r3, [pc, #268]	; (8016d18 <__ieee754_expf+0x168>)
 8016c0a:	4413      	add	r3, r2
 8016c0c:	ed93 7a00 	vldr	s14, [r3]
 8016c10:	4b42      	ldr	r3, [pc, #264]	; (8016d1c <__ieee754_expf+0x16c>)
 8016c12:	4413      	add	r3, r2
 8016c14:	ee30 7a47 	vsub.f32	s14, s0, s14
 8016c18:	f1c1 0201 	rsb	r2, r1, #1
 8016c1c:	edd3 7a00 	vldr	s15, [r3]
 8016c20:	1a52      	subs	r2, r2, r1
 8016c22:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016c26:	ee20 6a00 	vmul.f32	s12, s0, s0
 8016c2a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016d20 <__ieee754_expf+0x170>
 8016c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016d24 <__ieee754_expf+0x174>
 8016c32:	eee6 6a05 	vfma.f32	s13, s12, s10
 8016c36:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016d28 <__ieee754_expf+0x178>
 8016c3a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016c3e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016d2c <__ieee754_expf+0x17c>
 8016c42:	eee5 6a06 	vfma.f32	s13, s10, s12
 8016c46:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016d30 <__ieee754_expf+0x180>
 8016c4a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8016c4e:	eef0 6a40 	vmov.f32	s13, s0
 8016c52:	eee5 6a46 	vfms.f32	s13, s10, s12
 8016c56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016c5a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8016c5e:	bb92      	cbnz	r2, 8016cc6 <__ieee754_expf+0x116>
 8016c60:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8016c64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016c68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016c6c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016c70:	4770      	bx	lr
 8016c72:	4b30      	ldr	r3, [pc, #192]	; (8016d34 <__ieee754_expf+0x184>)
 8016c74:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8016d38 <__ieee754_expf+0x188>
 8016c78:	eddf 6a30 	vldr	s13, [pc, #192]	; 8016d3c <__ieee754_expf+0x18c>
 8016c7c:	4413      	add	r3, r2
 8016c7e:	edd3 7a00 	vldr	s15, [r3]
 8016c82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016c86:	eeb0 7a40 	vmov.f32	s14, s0
 8016c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c8e:	ee17 2a90 	vmov	r2, s15
 8016c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c96:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016c9a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016d40 <__ieee754_expf+0x190>
 8016c9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ca2:	e7be      	b.n	8016c22 <__ieee754_expf+0x72>
 8016ca4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8016ca8:	d20b      	bcs.n	8016cc2 <__ieee754_expf+0x112>
 8016caa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016d44 <__ieee754_expf+0x194>
 8016cae:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016cb2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cba:	dd02      	ble.n	8016cc2 <__ieee754_expf+0x112>
 8016cbc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016cc0:	4770      	bx	lr
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	e7af      	b.n	8016c26 <__ieee754_expf+0x76>
 8016cc6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016cca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8016cce:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016cd2:	bfb8      	it	lt
 8016cd4:	3264      	addlt	r2, #100	; 0x64
 8016cd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cde:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016ce2:	ee17 3a90 	vmov	r3, s15
 8016ce6:	bfab      	itete	ge
 8016ce8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8016cec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016cf0:	ee00 3a10 	vmovge	s0, r3
 8016cf4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8016d48 <__ieee754_expf+0x198>
 8016cf8:	bfbc      	itt	lt
 8016cfa:	ee00 3a10 	vmovlt	s0, r3
 8016cfe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016d02:	4770      	bx	lr
 8016d04:	00000000 	.word	0x00000000
 8016d08:	42b17217 	.word	0x42b17217
 8016d0c:	42cff1b5 	.word	0x42cff1b5
 8016d10:	3eb17218 	.word	0x3eb17218
 8016d14:	3f851591 	.word	0x3f851591
 8016d18:	0814fa48 	.word	0x0814fa48
 8016d1c:	0814fa50 	.word	0x0814fa50
 8016d20:	3331bb4c 	.word	0x3331bb4c
 8016d24:	b5ddea0e 	.word	0xb5ddea0e
 8016d28:	388ab355 	.word	0x388ab355
 8016d2c:	bb360b61 	.word	0xbb360b61
 8016d30:	3e2aaaab 	.word	0x3e2aaaab
 8016d34:	0814fa40 	.word	0x0814fa40
 8016d38:	3fb8aa3b 	.word	0x3fb8aa3b
 8016d3c:	3f317180 	.word	0x3f317180
 8016d40:	3717f7d1 	.word	0x3717f7d1
 8016d44:	7149f2ca 	.word	0x7149f2ca
 8016d48:	0d800000 	.word	0x0d800000

08016d4c <__ieee754_fmodf>:
 8016d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d4e:	ee10 4a90 	vmov	r4, s1
 8016d52:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 8016d56:	d009      	beq.n	8016d6c <__ieee754_fmodf+0x20>
 8016d58:	ee10 3a10 	vmov	r3, s0
 8016d5c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8016d60:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8016d64:	da02      	bge.n	8016d6c <__ieee754_fmodf+0x20>
 8016d66:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016d6a:	dd04      	ble.n	8016d76 <__ieee754_fmodf+0x2a>
 8016d6c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8016d70:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8016d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d76:	4286      	cmp	r6, r0
 8016d78:	dbfc      	blt.n	8016d74 <__ieee754_fmodf+0x28>
 8016d7a:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 8016d7e:	d105      	bne.n	8016d8c <__ieee754_fmodf+0x40>
 8016d80:	4b32      	ldr	r3, [pc, #200]	; (8016e4c <__ieee754_fmodf+0x100>)
 8016d82:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8016d86:	ed93 0a00 	vldr	s0, [r3]
 8016d8a:	e7f3      	b.n	8016d74 <__ieee754_fmodf+0x28>
 8016d8c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016d90:	d140      	bne.n	8016e14 <__ieee754_fmodf+0xc8>
 8016d92:	0232      	lsls	r2, r6, #8
 8016d94:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8016d98:	2a00      	cmp	r2, #0
 8016d9a:	dc38      	bgt.n	8016e0e <__ieee754_fmodf+0xc2>
 8016d9c:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 8016da0:	d13e      	bne.n	8016e20 <__ieee754_fmodf+0xd4>
 8016da2:	0207      	lsls	r7, r0, #8
 8016da4:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8016da8:	2f00      	cmp	r7, #0
 8016daa:	da36      	bge.n	8016e1a <__ieee754_fmodf+0xce>
 8016dac:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8016db0:	bfb9      	ittee	lt
 8016db2:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8016db6:	1a5b      	sublt	r3, r3, r1
 8016db8:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 8016dbc:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8016dc0:	bfb8      	it	lt
 8016dc2:	fa06 f303 	lsllt.w	r3, r6, r3
 8016dc6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8016dca:	bfb5      	itete	lt
 8016dcc:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 8016dd0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8016dd4:	1aa4      	sublt	r4, r4, r2
 8016dd6:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 8016dda:	bfb8      	it	lt
 8016ddc:	40a0      	lsllt	r0, r4
 8016dde:	1a89      	subs	r1, r1, r2
 8016de0:	1a1c      	subs	r4, r3, r0
 8016de2:	bb01      	cbnz	r1, 8016e26 <__ieee754_fmodf+0xda>
 8016de4:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 8016de8:	bf38      	it	cc
 8016dea:	4623      	movcc	r3, r4
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d0c7      	beq.n	8016d80 <__ieee754_fmodf+0x34>
 8016df0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016df4:	db1f      	blt.n	8016e36 <__ieee754_fmodf+0xea>
 8016df6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8016dfa:	db1f      	blt.n	8016e3c <__ieee754_fmodf+0xf0>
 8016dfc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8016e00:	327f      	adds	r2, #127	; 0x7f
 8016e02:	432b      	orrs	r3, r5
 8016e04:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016e08:	ee00 3a10 	vmov	s0, r3
 8016e0c:	e7b2      	b.n	8016d74 <__ieee754_fmodf+0x28>
 8016e0e:	3901      	subs	r1, #1
 8016e10:	0052      	lsls	r2, r2, #1
 8016e12:	e7c1      	b.n	8016d98 <__ieee754_fmodf+0x4c>
 8016e14:	15f1      	asrs	r1, r6, #23
 8016e16:	397f      	subs	r1, #127	; 0x7f
 8016e18:	e7c0      	b.n	8016d9c <__ieee754_fmodf+0x50>
 8016e1a:	3a01      	subs	r2, #1
 8016e1c:	007f      	lsls	r7, r7, #1
 8016e1e:	e7c3      	b.n	8016da8 <__ieee754_fmodf+0x5c>
 8016e20:	15c2      	asrs	r2, r0, #23
 8016e22:	3a7f      	subs	r2, #127	; 0x7f
 8016e24:	e7c2      	b.n	8016dac <__ieee754_fmodf+0x60>
 8016e26:	2c00      	cmp	r4, #0
 8016e28:	da02      	bge.n	8016e30 <__ieee754_fmodf+0xe4>
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	3901      	subs	r1, #1
 8016e2e:	e7d7      	b.n	8016de0 <__ieee754_fmodf+0x94>
 8016e30:	d0a6      	beq.n	8016d80 <__ieee754_fmodf+0x34>
 8016e32:	0063      	lsls	r3, r4, #1
 8016e34:	e7fa      	b.n	8016e2c <__ieee754_fmodf+0xe0>
 8016e36:	005b      	lsls	r3, r3, #1
 8016e38:	3a01      	subs	r2, #1
 8016e3a:	e7d9      	b.n	8016df0 <__ieee754_fmodf+0xa4>
 8016e3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016e40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016e44:	3282      	adds	r2, #130	; 0x82
 8016e46:	4113      	asrs	r3, r2
 8016e48:	432b      	orrs	r3, r5
 8016e4a:	e7dd      	b.n	8016e08 <__ieee754_fmodf+0xbc>
 8016e4c:	0814fa58 	.word	0x0814fa58

08016e50 <__ieee754_logf>:
 8016e50:	ee10 3a10 	vmov	r3, s0
 8016e54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016e58:	d106      	bne.n	8016e68 <__ieee754_logf+0x18>
 8016e5a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8016ff4 <__ieee754_logf+0x1a4>
 8016e5e:	eddf 7a66 	vldr	s15, [pc, #408]	; 8016ff8 <__ieee754_logf+0x1a8>
 8016e62:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016e66:	4770      	bx	lr
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	da02      	bge.n	8016e72 <__ieee754_logf+0x22>
 8016e6c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016e70:	e7f5      	b.n	8016e5e <__ieee754_logf+0xe>
 8016e72:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016e76:	db02      	blt.n	8016e7e <__ieee754_logf+0x2e>
 8016e78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016e7c:	4770      	bx	lr
 8016e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016e82:	bfb8      	it	lt
 8016e84:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8016ffc <__ieee754_logf+0x1ac>
 8016e88:	485d      	ldr	r0, [pc, #372]	; (8017000 <__ieee754_logf+0x1b0>)
 8016e8a:	bfbe      	ittt	lt
 8016e8c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016e90:	f06f 0118 	mvnlt.w	r1, #24
 8016e94:	ee17 3a90 	vmovlt	r3, s15
 8016e98:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016e9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016ea0:	4418      	add	r0, r3
 8016ea2:	bfa8      	it	ge
 8016ea4:	2100      	movge	r1, #0
 8016ea6:	3a7f      	subs	r2, #127	; 0x7f
 8016ea8:	440a      	add	r2, r1
 8016eaa:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8016eae:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016eb2:	4319      	orrs	r1, r3
 8016eb4:	ee00 1a10 	vmov	s0, r1
 8016eb8:	4952      	ldr	r1, [pc, #328]	; (8017004 <__ieee754_logf+0x1b4>)
 8016eba:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8016ebe:	f103 000f 	add.w	r0, r3, #15
 8016ec2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016ec6:	4001      	ands	r1, r0
 8016ec8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016ecc:	bb89      	cbnz	r1, 8016f32 <__ieee754_logf+0xe2>
 8016ece:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed6:	d10f      	bne.n	8016ef8 <__ieee754_logf+0xa8>
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	f000 8087 	beq.w	8016fec <__ieee754_logf+0x19c>
 8016ede:	ee07 2a90 	vmov	s15, r2
 8016ee2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017008 <__ieee754_logf+0x1b8>
 8016ee6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801700c <__ieee754_logf+0x1bc>
 8016eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016ef2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016ef6:	4770      	bx	lr
 8016ef8:	eddf 6a45 	vldr	s13, [pc, #276]	; 8017010 <__ieee754_logf+0x1c0>
 8016efc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016f00:	eee0 7a66 	vfms.f32	s15, s0, s13
 8016f04:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f0c:	b912      	cbnz	r2, 8016f14 <__ieee754_logf+0xc4>
 8016f0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016f12:	4770      	bx	lr
 8016f14:	ee07 2a90 	vmov	s15, r2
 8016f18:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8017008 <__ieee754_logf+0x1b8>
 8016f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f20:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016f24:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016f28:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801700c <__ieee754_logf+0x1bc>
 8016f2c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016f30:	4770      	bx	lr
 8016f32:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016f36:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016f3a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017014 <__ieee754_logf+0x1c4>
 8016f3e:	eddf 4a36 	vldr	s9, [pc, #216]	; 8017018 <__ieee754_logf+0x1c8>
 8016f42:	4936      	ldr	r1, [pc, #216]	; (801701c <__ieee754_logf+0x1cc>)
 8016f44:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016f48:	4419      	add	r1, r3
 8016f4a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016f4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016f52:	430b      	orrs	r3, r1
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	ee07 2a90 	vmov	s15, r2
 8016f5a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016f5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f62:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016f66:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8017020 <__ieee754_logf+0x1d0>
 8016f6a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016f6e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8017024 <__ieee754_logf+0x1d4>
 8016f72:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016f76:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8017028 <__ieee754_logf+0x1d8>
 8016f7a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016f7e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801702c <__ieee754_logf+0x1dc>
 8016f82:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016f86:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8017030 <__ieee754_logf+0x1e0>
 8016f8a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016f8e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016f92:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016f96:	dd1a      	ble.n	8016fce <__ieee754_logf+0x17e>
 8016f98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016f9c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016fa0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016fa8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fac:	b912      	cbnz	r2, 8016fb4 <__ieee754_logf+0x164>
 8016fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016fb2:	e7ac      	b.n	8016f0e <__ieee754_logf+0xbe>
 8016fb4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8017008 <__ieee754_logf+0x1b8>
 8016fb8:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016fc0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016fc4:	eddf 7a11 	vldr	s15, [pc, #68]	; 801700c <__ieee754_logf+0x1bc>
 8016fc8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016fcc:	4770      	bx	lr
 8016fce:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016fd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fd6:	b912      	cbnz	r2, 8016fde <__ieee754_logf+0x18e>
 8016fd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016fdc:	4770      	bx	lr
 8016fde:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8017008 <__ieee754_logf+0x1b8>
 8016fe2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016fe6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016fea:	e7eb      	b.n	8016fc4 <__ieee754_logf+0x174>
 8016fec:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016ff8 <__ieee754_logf+0x1a8>
 8016ff0:	4770      	bx	lr
 8016ff2:	bf00      	nop
 8016ff4:	cc000000 	.word	0xcc000000
 8016ff8:	00000000 	.word	0x00000000
 8016ffc:	4c000000 	.word	0x4c000000
 8017000:	004afb20 	.word	0x004afb20
 8017004:	007ffff0 	.word	0x007ffff0
 8017008:	3717f7d1 	.word	0x3717f7d1
 801700c:	3f317180 	.word	0x3f317180
 8017010:	3eaaaaab 	.word	0x3eaaaaab
 8017014:	3e1cd04f 	.word	0x3e1cd04f
 8017018:	3e178897 	.word	0x3e178897
 801701c:	ffcf5c30 	.word	0xffcf5c30
 8017020:	3e638e29 	.word	0x3e638e29
 8017024:	3ecccccd 	.word	0x3ecccccd
 8017028:	3e3a3325 	.word	0x3e3a3325
 801702c:	3e924925 	.word	0x3e924925
 8017030:	3f2aaaab 	.word	0x3f2aaaab

08017034 <__ieee754_powf>:
 8017034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017038:	ee10 4a90 	vmov	r4, s1
 801703c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8017040:	ed2d 8b02 	vpush	{d8}
 8017044:	ee10 7a10 	vmov	r7, s0
 8017048:	eeb0 8a40 	vmov.f32	s16, s0
 801704c:	eef0 8a60 	vmov.f32	s17, s1
 8017050:	d10c      	bne.n	801706c <__ieee754_powf+0x38>
 8017052:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8017056:	007f      	lsls	r7, r7, #1
 8017058:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 801705c:	f240 8292 	bls.w	8017584 <__ieee754_powf+0x550>
 8017060:	ee38 0a28 	vadd.f32	s0, s16, s17
 8017064:	ecbd 8b02 	vpop	{d8}
 8017068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801706c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8017070:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8017074:	dcf4      	bgt.n	8017060 <__ieee754_powf+0x2c>
 8017076:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801707a:	dd08      	ble.n	801708e <__ieee754_powf+0x5a>
 801707c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8017080:	d1ee      	bne.n	8017060 <__ieee754_powf+0x2c>
 8017082:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8017086:	0064      	lsls	r4, r4, #1
 8017088:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801708c:	e7e6      	b.n	801705c <__ieee754_powf+0x28>
 801708e:	2f00      	cmp	r7, #0
 8017090:	da20      	bge.n	80170d4 <__ieee754_powf+0xa0>
 8017092:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8017096:	da2d      	bge.n	80170f4 <__ieee754_powf+0xc0>
 8017098:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801709c:	f2c0 827b 	blt.w	8017596 <__ieee754_powf+0x562>
 80170a0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80170a4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80170a8:	fa48 f603 	asr.w	r6, r8, r3
 80170ac:	fa06 f303 	lsl.w	r3, r6, r3
 80170b0:	4543      	cmp	r3, r8
 80170b2:	f040 8270 	bne.w	8017596 <__ieee754_powf+0x562>
 80170b6:	f006 0601 	and.w	r6, r6, #1
 80170ba:	f1c6 0602 	rsb	r6, r6, #2
 80170be:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80170c2:	d11f      	bne.n	8017104 <__ieee754_powf+0xd0>
 80170c4:	2c00      	cmp	r4, #0
 80170c6:	f280 8263 	bge.w	8017590 <__ieee754_powf+0x55c>
 80170ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80170ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80170d2:	e7c7      	b.n	8017064 <__ieee754_powf+0x30>
 80170d4:	2600      	movs	r6, #0
 80170d6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80170da:	d1f0      	bne.n	80170be <__ieee754_powf+0x8a>
 80170dc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80170e0:	f000 8250 	beq.w	8017584 <__ieee754_powf+0x550>
 80170e4:	dd08      	ble.n	80170f8 <__ieee754_powf+0xc4>
 80170e6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80173ec <__ieee754_powf+0x3b8>
 80170ea:	2c00      	cmp	r4, #0
 80170ec:	bfa8      	it	ge
 80170ee:	eeb0 0a68 	vmovge.f32	s0, s17
 80170f2:	e7b7      	b.n	8017064 <__ieee754_powf+0x30>
 80170f4:	2602      	movs	r6, #2
 80170f6:	e7ee      	b.n	80170d6 <__ieee754_powf+0xa2>
 80170f8:	2c00      	cmp	r4, #0
 80170fa:	f280 8246 	bge.w	801758a <__ieee754_powf+0x556>
 80170fe:	eeb1 0a68 	vneg.f32	s0, s17
 8017102:	e7af      	b.n	8017064 <__ieee754_powf+0x30>
 8017104:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8017108:	d102      	bne.n	8017110 <__ieee754_powf+0xdc>
 801710a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801710e:	e7a9      	b.n	8017064 <__ieee754_powf+0x30>
 8017110:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8017114:	eeb0 0a48 	vmov.f32	s0, s16
 8017118:	d107      	bne.n	801712a <__ieee754_powf+0xf6>
 801711a:	2f00      	cmp	r7, #0
 801711c:	db05      	blt.n	801712a <__ieee754_powf+0xf6>
 801711e:	ecbd 8b02 	vpop	{d8}
 8017122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017126:	f7ff b83a 	b.w	801619e <__ieee754_sqrtf>
 801712a:	f7fe fce7 	bl	8015afc <fabsf>
 801712e:	b125      	cbz	r5, 801713a <__ieee754_powf+0x106>
 8017130:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8017134:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017138:	d115      	bne.n	8017166 <__ieee754_powf+0x132>
 801713a:	2c00      	cmp	r4, #0
 801713c:	bfbc      	itt	lt
 801713e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8017142:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8017146:	2f00      	cmp	r7, #0
 8017148:	da8c      	bge.n	8017064 <__ieee754_powf+0x30>
 801714a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801714e:	4335      	orrs	r5, r6
 8017150:	d104      	bne.n	801715c <__ieee754_powf+0x128>
 8017152:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017156:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801715a:	e783      	b.n	8017064 <__ieee754_powf+0x30>
 801715c:	2e01      	cmp	r6, #1
 801715e:	d181      	bne.n	8017064 <__ieee754_powf+0x30>
 8017160:	eeb1 0a40 	vneg.f32	s0, s0
 8017164:	e77e      	b.n	8017064 <__ieee754_powf+0x30>
 8017166:	0ff8      	lsrs	r0, r7, #31
 8017168:	3801      	subs	r0, #1
 801716a:	ea56 0300 	orrs.w	r3, r6, r0
 801716e:	d104      	bne.n	801717a <__ieee754_powf+0x146>
 8017170:	ee38 8a48 	vsub.f32	s16, s16, s16
 8017174:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017178:	e774      	b.n	8017064 <__ieee754_powf+0x30>
 801717a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801717e:	dd73      	ble.n	8017268 <__ieee754_powf+0x234>
 8017180:	4b9b      	ldr	r3, [pc, #620]	; (80173f0 <__ieee754_powf+0x3bc>)
 8017182:	429d      	cmp	r5, r3
 8017184:	dc08      	bgt.n	8017198 <__ieee754_powf+0x164>
 8017186:	2c00      	cmp	r4, #0
 8017188:	da0b      	bge.n	80171a2 <__ieee754_powf+0x16e>
 801718a:	2000      	movs	r0, #0
 801718c:	ecbd 8b02 	vpop	{d8}
 8017190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017194:	f7fe bfdc 	b.w	8016150 <__math_oflowf>
 8017198:	4b96      	ldr	r3, [pc, #600]	; (80173f4 <__ieee754_powf+0x3c0>)
 801719a:	429d      	cmp	r5, r3
 801719c:	dd08      	ble.n	80171b0 <__ieee754_powf+0x17c>
 801719e:	2c00      	cmp	r4, #0
 80171a0:	dcf3      	bgt.n	801718a <__ieee754_powf+0x156>
 80171a2:	2000      	movs	r0, #0
 80171a4:	ecbd 8b02 	vpop	{d8}
 80171a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171ac:	f7fe bfca 	b.w	8016144 <__math_uflowf>
 80171b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80171b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80171b8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80173f8 <__ieee754_powf+0x3c4>
 80171bc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80171c0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80171c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80171c8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80171cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80171d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171d4:	eddf 7a89 	vldr	s15, [pc, #548]	; 80173fc <__ieee754_powf+0x3c8>
 80171d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80171dc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8017400 <__ieee754_powf+0x3cc>
 80171e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80171e4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8017404 <__ieee754_powf+0x3d0>
 80171e8:	eef0 6a67 	vmov.f32	s13, s15
 80171ec:	eee0 6a07 	vfma.f32	s13, s0, s14
 80171f0:	ee16 3a90 	vmov	r3, s13
 80171f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80171f8:	f023 030f 	bic.w	r3, r3, #15
 80171fc:	ee06 3a90 	vmov	s13, r3
 8017200:	eee0 6a47 	vfms.f32	s13, s0, s14
 8017204:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017208:	3e01      	subs	r6, #1
 801720a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801720e:	4306      	orrs	r6, r0
 8017210:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017214:	f024 040f 	bic.w	r4, r4, #15
 8017218:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801721c:	bf08      	it	eq
 801721e:	eeb0 8a47 	vmoveq.f32	s16, s14
 8017222:	ee07 4a10 	vmov	s14, r4
 8017226:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801722a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801722e:	ee07 3a90 	vmov	s15, r3
 8017232:	eee7 0a27 	vfma.f32	s1, s14, s15
 8017236:	ee07 4a10 	vmov	s14, r4
 801723a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801723e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8017242:	ee17 1a10 	vmov	r1, s14
 8017246:	2900      	cmp	r1, #0
 8017248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801724c:	f340 817c 	ble.w	8017548 <__ieee754_powf+0x514>
 8017250:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8017254:	f340 80f8 	ble.w	8017448 <__ieee754_powf+0x414>
 8017258:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017260:	bf4c      	ite	mi
 8017262:	2001      	movmi	r0, #1
 8017264:	2000      	movpl	r0, #0
 8017266:	e791      	b.n	801718c <__ieee754_powf+0x158>
 8017268:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 801726c:	bf01      	itttt	eq
 801726e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8017408 <__ieee754_powf+0x3d4>
 8017272:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8017276:	f06f 0317 	mvneq.w	r3, #23
 801727a:	ee17 5a90 	vmoveq	r5, s15
 801727e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8017282:	bf18      	it	ne
 8017284:	2300      	movne	r3, #0
 8017286:	3a7f      	subs	r2, #127	; 0x7f
 8017288:	441a      	add	r2, r3
 801728a:	4b60      	ldr	r3, [pc, #384]	; (801740c <__ieee754_powf+0x3d8>)
 801728c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8017290:	429d      	cmp	r5, r3
 8017292:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8017296:	dd06      	ble.n	80172a6 <__ieee754_powf+0x272>
 8017298:	4b5d      	ldr	r3, [pc, #372]	; (8017410 <__ieee754_powf+0x3dc>)
 801729a:	429d      	cmp	r5, r3
 801729c:	f340 80a4 	ble.w	80173e8 <__ieee754_powf+0x3b4>
 80172a0:	3201      	adds	r2, #1
 80172a2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80172a6:	2500      	movs	r5, #0
 80172a8:	4b5a      	ldr	r3, [pc, #360]	; (8017414 <__ieee754_powf+0x3e0>)
 80172aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80172ae:	ee07 1a10 	vmov	s14, r1
 80172b2:	edd3 5a00 	vldr	s11, [r3]
 80172b6:	4b58      	ldr	r3, [pc, #352]	; (8017418 <__ieee754_powf+0x3e4>)
 80172b8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80172bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80172c0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80172c4:	1049      	asrs	r1, r1, #1
 80172c6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80172ca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80172ce:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80172d2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80172d6:	ee07 1a90 	vmov	s15, r1
 80172da:	ee26 5a24 	vmul.f32	s10, s12, s9
 80172de:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80172e2:	ee15 7a10 	vmov	r7, s10
 80172e6:	401f      	ands	r7, r3
 80172e8:	ee06 7a90 	vmov	s13, r7
 80172ec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80172f0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80172f4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80172f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80172fc:	eddf 5a47 	vldr	s11, [pc, #284]	; 801741c <__ieee754_powf+0x3e8>
 8017300:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8017420 <__ieee754_powf+0x3ec>
 8017304:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017308:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8017424 <__ieee754_powf+0x3f0>
 801730c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017310:	eddf 5a39 	vldr	s11, [pc, #228]	; 80173f8 <__ieee754_powf+0x3c4>
 8017314:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017318:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017428 <__ieee754_powf+0x3f4>
 801731c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017320:	eddf 5a42 	vldr	s11, [pc, #264]	; 801742c <__ieee754_powf+0x3f8>
 8017324:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017328:	eee7 5a27 	vfma.f32	s11, s14, s15
 801732c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8017330:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8017334:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017338:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801733c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8017340:	eef0 5a67 	vmov.f32	s11, s15
 8017344:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8017348:	ee75 5a87 	vadd.f32	s11, s11, s14
 801734c:	ee15 1a90 	vmov	r1, s11
 8017350:	4019      	ands	r1, r3
 8017352:	ee05 1a90 	vmov	s11, r1
 8017356:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801735a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801735e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017362:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017366:	eee6 7a25 	vfma.f32	s15, s12, s11
 801736a:	eeb0 6a67 	vmov.f32	s12, s15
 801736e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017372:	ee16 1a10 	vmov	r1, s12
 8017376:	4019      	ands	r1, r3
 8017378:	ee07 1a10 	vmov	s14, r1
 801737c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8017380:	ee06 1a10 	vmov	s12, r1
 8017384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017388:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8017430 <__ieee754_powf+0x3fc>
 801738c:	4929      	ldr	r1, [pc, #164]	; (8017434 <__ieee754_powf+0x400>)
 801738e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8017438 <__ieee754_powf+0x404>
 8017392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017396:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801743c <__ieee754_powf+0x408>
 801739a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801739e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80173a2:	ed91 7a00 	vldr	s14, [r1]
 80173a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80173aa:	ee07 2a10 	vmov	s14, r2
 80173ae:	eef0 6a67 	vmov.f32	s13, s15
 80173b2:	4a23      	ldr	r2, [pc, #140]	; (8017440 <__ieee754_powf+0x40c>)
 80173b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80173b8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80173bc:	ed92 5a00 	vldr	s10, [r2]
 80173c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80173c8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80173cc:	ee16 2a90 	vmov	r2, s13
 80173d0:	4013      	ands	r3, r2
 80173d2:	ee06 3a90 	vmov	s13, r3
 80173d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80173da:	ee37 7a45 	vsub.f32	s14, s14, s10
 80173de:	eea6 7a65 	vfms.f32	s14, s12, s11
 80173e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173e6:	e70f      	b.n	8017208 <__ieee754_powf+0x1d4>
 80173e8:	2501      	movs	r5, #1
 80173ea:	e75d      	b.n	80172a8 <__ieee754_powf+0x274>
 80173ec:	00000000 	.word	0x00000000
 80173f0:	3f7ffff3 	.word	0x3f7ffff3
 80173f4:	3f800007 	.word	0x3f800007
 80173f8:	3eaaaaab 	.word	0x3eaaaaab
 80173fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8017400:	36eca570 	.word	0x36eca570
 8017404:	3fb8aa00 	.word	0x3fb8aa00
 8017408:	4b800000 	.word	0x4b800000
 801740c:	001cc471 	.word	0x001cc471
 8017410:	005db3d6 	.word	0x005db3d6
 8017414:	0814fa60 	.word	0x0814fa60
 8017418:	fffff000 	.word	0xfffff000
 801741c:	3e6c3255 	.word	0x3e6c3255
 8017420:	3e53f142 	.word	0x3e53f142
 8017424:	3e8ba305 	.word	0x3e8ba305
 8017428:	3edb6db7 	.word	0x3edb6db7
 801742c:	3f19999a 	.word	0x3f19999a
 8017430:	3f76384f 	.word	0x3f76384f
 8017434:	0814fa70 	.word	0x0814fa70
 8017438:	3f763800 	.word	0x3f763800
 801743c:	369dc3a0 	.word	0x369dc3a0
 8017440:	0814fa68 	.word	0x0814fa68
 8017444:	3338aa3c 	.word	0x3338aa3c
 8017448:	f040 8093 	bne.w	8017572 <__ieee754_powf+0x53e>
 801744c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8017444 <__ieee754_powf+0x410>
 8017450:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017454:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8017458:	eef4 6ac7 	vcmpe.f32	s13, s14
 801745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017460:	f73f aefa 	bgt.w	8017258 <__ieee754_powf+0x224>
 8017464:	15db      	asrs	r3, r3, #23
 8017466:	3b7e      	subs	r3, #126	; 0x7e
 8017468:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801746c:	4118      	asrs	r0, r3
 801746e:	4408      	add	r0, r1
 8017470:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017474:	4a49      	ldr	r2, [pc, #292]	; (801759c <__ieee754_powf+0x568>)
 8017476:	3b7f      	subs	r3, #127	; 0x7f
 8017478:	411a      	asrs	r2, r3
 801747a:	4002      	ands	r2, r0
 801747c:	ee07 2a10 	vmov	s14, r2
 8017480:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8017484:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017488:	f1c3 0317 	rsb	r3, r3, #23
 801748c:	4118      	asrs	r0, r3
 801748e:	2900      	cmp	r1, #0
 8017490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017494:	bfb8      	it	lt
 8017496:	4240      	neglt	r0, r0
 8017498:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801749c:	eddf 6a40 	vldr	s13, [pc, #256]	; 80175a0 <__ieee754_powf+0x56c>
 80174a0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80175a4 <__ieee754_powf+0x570>
 80174a4:	ee17 3a10 	vmov	r3, s14
 80174a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80174ac:	f023 030f 	bic.w	r3, r3, #15
 80174b0:	ee07 3a10 	vmov	s14, r3
 80174b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80174bc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80174c0:	eddf 7a39 	vldr	s15, [pc, #228]	; 80175a8 <__ieee754_powf+0x574>
 80174c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174c8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80174cc:	eef0 6a67 	vmov.f32	s13, s15
 80174d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80174d4:	eef0 5a66 	vmov.f32	s11, s13
 80174d8:	eee7 5a46 	vfms.f32	s11, s14, s12
 80174dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80174e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80174e4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80175ac <__ieee754_powf+0x578>
 80174e8:	eddf 5a31 	vldr	s11, [pc, #196]	; 80175b0 <__ieee754_powf+0x57c>
 80174ec:	eea7 6a25 	vfma.f32	s12, s14, s11
 80174f0:	eddf 5a30 	vldr	s11, [pc, #192]	; 80175b4 <__ieee754_powf+0x580>
 80174f4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80174f8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80175b8 <__ieee754_powf+0x584>
 80174fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017500:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80175bc <__ieee754_powf+0x588>
 8017504:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017508:	eeb0 6a66 	vmov.f32	s12, s13
 801750c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8017510:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017514:	ee66 5a86 	vmul.f32	s11, s13, s12
 8017518:	ee36 6a47 	vsub.f32	s12, s12, s14
 801751c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8017520:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8017524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017528:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801752c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017530:	ee10 3a10 	vmov	r3, s0
 8017534:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8017538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801753c:	da1f      	bge.n	801757e <__ieee754_powf+0x54a>
 801753e:	f000 f9db 	bl	80178f8 <scalbnf>
 8017542:	ee20 0a08 	vmul.f32	s0, s0, s16
 8017546:	e58d      	b.n	8017064 <__ieee754_powf+0x30>
 8017548:	4a1d      	ldr	r2, [pc, #116]	; (80175c0 <__ieee754_powf+0x58c>)
 801754a:	4293      	cmp	r3, r2
 801754c:	dd07      	ble.n	801755e <__ieee754_powf+0x52a>
 801754e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017556:	bf4c      	ite	mi
 8017558:	2001      	movmi	r0, #1
 801755a:	2000      	movpl	r0, #0
 801755c:	e622      	b.n	80171a4 <__ieee754_powf+0x170>
 801755e:	d108      	bne.n	8017572 <__ieee754_powf+0x53e>
 8017560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017564:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8017568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756c:	f6ff af7a 	blt.w	8017464 <__ieee754_powf+0x430>
 8017570:	e7ed      	b.n	801754e <__ieee754_powf+0x51a>
 8017572:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8017576:	f73f af75 	bgt.w	8017464 <__ieee754_powf+0x430>
 801757a:	2000      	movs	r0, #0
 801757c:	e78c      	b.n	8017498 <__ieee754_powf+0x464>
 801757e:	ee00 3a10 	vmov	s0, r3
 8017582:	e7de      	b.n	8017542 <__ieee754_powf+0x50e>
 8017584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017588:	e56c      	b.n	8017064 <__ieee754_powf+0x30>
 801758a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80175c4 <__ieee754_powf+0x590>
 801758e:	e569      	b.n	8017064 <__ieee754_powf+0x30>
 8017590:	eeb0 0a48 	vmov.f32	s0, s16
 8017594:	e566      	b.n	8017064 <__ieee754_powf+0x30>
 8017596:	2600      	movs	r6, #0
 8017598:	e591      	b.n	80170be <__ieee754_powf+0x8a>
 801759a:	bf00      	nop
 801759c:	ff800000 	.word	0xff800000
 80175a0:	3f317218 	.word	0x3f317218
 80175a4:	3f317200 	.word	0x3f317200
 80175a8:	35bfbe8c 	.word	0x35bfbe8c
 80175ac:	b5ddea0e 	.word	0xb5ddea0e
 80175b0:	3331bb4c 	.word	0x3331bb4c
 80175b4:	388ab355 	.word	0x388ab355
 80175b8:	bb360b61 	.word	0xbb360b61
 80175bc:	3e2aaaab 	.word	0x3e2aaaab
 80175c0:	43160000 	.word	0x43160000
 80175c4:	00000000 	.word	0x00000000

080175c8 <__ieee754_rem_pio2f>:
 80175c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ca:	ee10 6a10 	vmov	r6, s0
 80175ce:	4b86      	ldr	r3, [pc, #536]	; (80177e8 <__ieee754_rem_pio2f+0x220>)
 80175d0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80175d4:	429d      	cmp	r5, r3
 80175d6:	b087      	sub	sp, #28
 80175d8:	4604      	mov	r4, r0
 80175da:	dc05      	bgt.n	80175e8 <__ieee754_rem_pio2f+0x20>
 80175dc:	2300      	movs	r3, #0
 80175de:	ed80 0a00 	vstr	s0, [r0]
 80175e2:	6043      	str	r3, [r0, #4]
 80175e4:	2000      	movs	r0, #0
 80175e6:	e020      	b.n	801762a <__ieee754_rem_pio2f+0x62>
 80175e8:	4b80      	ldr	r3, [pc, #512]	; (80177ec <__ieee754_rem_pio2f+0x224>)
 80175ea:	429d      	cmp	r5, r3
 80175ec:	dc38      	bgt.n	8017660 <__ieee754_rem_pio2f+0x98>
 80175ee:	2e00      	cmp	r6, #0
 80175f0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80177f0 <__ieee754_rem_pio2f+0x228>
 80175f4:	4b7f      	ldr	r3, [pc, #508]	; (80177f4 <__ieee754_rem_pio2f+0x22c>)
 80175f6:	f025 050f 	bic.w	r5, r5, #15
 80175fa:	dd18      	ble.n	801762e <__ieee754_rem_pio2f+0x66>
 80175fc:	429d      	cmp	r5, r3
 80175fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 8017602:	bf09      	itett	eq
 8017604:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80177f8 <__ieee754_rem_pio2f+0x230>
 8017608:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80177fc <__ieee754_rem_pio2f+0x234>
 801760c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8017610:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8017800 <__ieee754_rem_pio2f+0x238>
 8017614:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8017618:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801761c:	edc0 6a00 	vstr	s13, [r0]
 8017620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017624:	edc0 7a01 	vstr	s15, [r0, #4]
 8017628:	2001      	movs	r0, #1
 801762a:	b007      	add	sp, #28
 801762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801762e:	429d      	cmp	r5, r3
 8017630:	ee70 7a07 	vadd.f32	s15, s0, s14
 8017634:	bf09      	itett	eq
 8017636:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80177f8 <__ieee754_rem_pio2f+0x230>
 801763a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80177fc <__ieee754_rem_pio2f+0x234>
 801763e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8017642:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8017800 <__ieee754_rem_pio2f+0x238>
 8017646:	ee77 6a87 	vadd.f32	s13, s15, s14
 801764a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801764e:	edc0 6a00 	vstr	s13, [r0]
 8017652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017656:	edc0 7a01 	vstr	s15, [r0, #4]
 801765a:	f04f 30ff 	mov.w	r0, #4294967295
 801765e:	e7e4      	b.n	801762a <__ieee754_rem_pio2f+0x62>
 8017660:	4b68      	ldr	r3, [pc, #416]	; (8017804 <__ieee754_rem_pio2f+0x23c>)
 8017662:	429d      	cmp	r5, r3
 8017664:	dc71      	bgt.n	801774a <__ieee754_rem_pio2f+0x182>
 8017666:	f7fe fa49 	bl	8015afc <fabsf>
 801766a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8017808 <__ieee754_rem_pio2f+0x240>
 801766e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017672:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801767a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801767e:	ee17 0a90 	vmov	r0, s15
 8017682:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80177f0 <__ieee754_rem_pio2f+0x228>
 8017686:	eea7 0a67 	vfms.f32	s0, s14, s15
 801768a:	281f      	cmp	r0, #31
 801768c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80177fc <__ieee754_rem_pio2f+0x234>
 8017690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017694:	eeb1 6a47 	vneg.f32	s12, s14
 8017698:	ee70 6a67 	vsub.f32	s13, s0, s15
 801769c:	ee16 2a90 	vmov	r2, s13
 80176a0:	dc1c      	bgt.n	80176dc <__ieee754_rem_pio2f+0x114>
 80176a2:	495a      	ldr	r1, [pc, #360]	; (801780c <__ieee754_rem_pio2f+0x244>)
 80176a4:	1e47      	subs	r7, r0, #1
 80176a6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80176aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80176ae:	428b      	cmp	r3, r1
 80176b0:	d014      	beq.n	80176dc <__ieee754_rem_pio2f+0x114>
 80176b2:	6022      	str	r2, [r4, #0]
 80176b4:	ed94 7a00 	vldr	s14, [r4]
 80176b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80176bc:	2e00      	cmp	r6, #0
 80176be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80176c2:	ed84 0a01 	vstr	s0, [r4, #4]
 80176c6:	dab0      	bge.n	801762a <__ieee754_rem_pio2f+0x62>
 80176c8:	eeb1 7a47 	vneg.f32	s14, s14
 80176cc:	eeb1 0a40 	vneg.f32	s0, s0
 80176d0:	ed84 7a00 	vstr	s14, [r4]
 80176d4:	ed84 0a01 	vstr	s0, [r4, #4]
 80176d8:	4240      	negs	r0, r0
 80176da:	e7a6      	b.n	801762a <__ieee754_rem_pio2f+0x62>
 80176dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80176e0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80176e4:	2908      	cmp	r1, #8
 80176e6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80176ea:	dde2      	ble.n	80176b2 <__ieee754_rem_pio2f+0xea>
 80176ec:	eddf 5a42 	vldr	s11, [pc, #264]	; 80177f8 <__ieee754_rem_pio2f+0x230>
 80176f0:	eef0 6a40 	vmov.f32	s13, s0
 80176f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80176f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80176fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017700:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8017800 <__ieee754_rem_pio2f+0x238>
 8017704:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8017708:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801770c:	ee15 2a90 	vmov	r2, s11
 8017710:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017714:	1a5b      	subs	r3, r3, r1
 8017716:	2b19      	cmp	r3, #25
 8017718:	dc04      	bgt.n	8017724 <__ieee754_rem_pio2f+0x15c>
 801771a:	edc4 5a00 	vstr	s11, [r4]
 801771e:	eeb0 0a66 	vmov.f32	s0, s13
 8017722:	e7c7      	b.n	80176b4 <__ieee754_rem_pio2f+0xec>
 8017724:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8017810 <__ieee754_rem_pio2f+0x248>
 8017728:	eeb0 0a66 	vmov.f32	s0, s13
 801772c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8017730:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017734:	eddf 6a37 	vldr	s13, [pc, #220]	; 8017814 <__ieee754_rem_pio2f+0x24c>
 8017738:	eee6 7a25 	vfma.f32	s15, s12, s11
 801773c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8017740:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017744:	ed84 7a00 	vstr	s14, [r4]
 8017748:	e7b4      	b.n	80176b4 <__ieee754_rem_pio2f+0xec>
 801774a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801774e:	db06      	blt.n	801775e <__ieee754_rem_pio2f+0x196>
 8017750:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017754:	edc0 7a01 	vstr	s15, [r0, #4]
 8017758:	edc0 7a00 	vstr	s15, [r0]
 801775c:	e742      	b.n	80175e4 <__ieee754_rem_pio2f+0x1c>
 801775e:	15ea      	asrs	r2, r5, #23
 8017760:	3a86      	subs	r2, #134	; 0x86
 8017762:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017766:	ee07 3a90 	vmov	s15, r3
 801776a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801776e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8017818 <__ieee754_rem_pio2f+0x250>
 8017772:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801777a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801777e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017782:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017786:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801778a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801778e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017792:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017796:	eef5 7a40 	vcmp.f32	s15, #0.0
 801779a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801779e:	edcd 7a05 	vstr	s15, [sp, #20]
 80177a2:	d11e      	bne.n	80177e2 <__ieee754_rem_pio2f+0x21a>
 80177a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80177a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ac:	bf14      	ite	ne
 80177ae:	2302      	movne	r3, #2
 80177b0:	2301      	moveq	r3, #1
 80177b2:	491a      	ldr	r1, [pc, #104]	; (801781c <__ieee754_rem_pio2f+0x254>)
 80177b4:	9101      	str	r1, [sp, #4]
 80177b6:	2102      	movs	r1, #2
 80177b8:	9100      	str	r1, [sp, #0]
 80177ba:	a803      	add	r0, sp, #12
 80177bc:	4621      	mov	r1, r4
 80177be:	f000 f901 	bl	80179c4 <__kernel_rem_pio2f>
 80177c2:	2e00      	cmp	r6, #0
 80177c4:	f6bf af31 	bge.w	801762a <__ieee754_rem_pio2f+0x62>
 80177c8:	edd4 7a00 	vldr	s15, [r4]
 80177cc:	eef1 7a67 	vneg.f32	s15, s15
 80177d0:	edc4 7a00 	vstr	s15, [r4]
 80177d4:	edd4 7a01 	vldr	s15, [r4, #4]
 80177d8:	eef1 7a67 	vneg.f32	s15, s15
 80177dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80177e0:	e77a      	b.n	80176d8 <__ieee754_rem_pio2f+0x110>
 80177e2:	2303      	movs	r3, #3
 80177e4:	e7e5      	b.n	80177b2 <__ieee754_rem_pio2f+0x1ea>
 80177e6:	bf00      	nop
 80177e8:	3f490fd8 	.word	0x3f490fd8
 80177ec:	4016cbe3 	.word	0x4016cbe3
 80177f0:	3fc90f80 	.word	0x3fc90f80
 80177f4:	3fc90fd0 	.word	0x3fc90fd0
 80177f8:	37354400 	.word	0x37354400
 80177fc:	37354443 	.word	0x37354443
 8017800:	2e85a308 	.word	0x2e85a308
 8017804:	43490f80 	.word	0x43490f80
 8017808:	3f22f984 	.word	0x3f22f984
 801780c:	0814fa78 	.word	0x0814fa78
 8017810:	2e85a300 	.word	0x2e85a300
 8017814:	248d3132 	.word	0x248d3132
 8017818:	43800000 	.word	0x43800000
 801781c:	0814faf8 	.word	0x0814faf8

08017820 <__ieee754_sinhf>:
 8017820:	b510      	push	{r4, lr}
 8017822:	ee10 3a10 	vmov	r3, s0
 8017826:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801782a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801782e:	ed2d 8b02 	vpush	{d8}
 8017832:	eef0 7a40 	vmov.f32	s15, s0
 8017836:	db06      	blt.n	8017846 <__ieee754_sinhf+0x26>
 8017838:	ee70 7a00 	vadd.f32	s15, s0, s0
 801783c:	ecbd 8b02 	vpop	{d8}
 8017840:	eeb0 0a67 	vmov.f32	s0, s15
 8017844:	bd10      	pop	{r4, pc}
 8017846:	2b00      	cmp	r3, #0
 8017848:	4b27      	ldr	r3, [pc, #156]	; (80178e8 <__ieee754_sinhf+0xc8>)
 801784a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801784e:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8017852:	bfa8      	it	ge
 8017854:	eeb0 8a68 	vmovge.f32	s16, s17
 8017858:	429c      	cmp	r4, r3
 801785a:	dc2c      	bgt.n	80178b6 <__ieee754_sinhf+0x96>
 801785c:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8017860:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017864:	da08      	bge.n	8017878 <__ieee754_sinhf+0x58>
 8017866:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80178ec <__ieee754_sinhf+0xcc>
 801786a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801786e:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8017872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017876:	dce1      	bgt.n	801783c <__ieee754_sinhf+0x1c>
 8017878:	eeb0 0a67 	vmov.f32	s0, s15
 801787c:	f7fe f93e 	bl	8015afc <fabsf>
 8017880:	f7fe fa2c 	bl	8015cdc <expm1f>
 8017884:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017888:	da0c      	bge.n	80178a4 <__ieee754_sinhf+0x84>
 801788a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801788e:	ee70 8a28 	vadd.f32	s17, s0, s17
 8017892:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8017896:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801789a:	eed0 7a07 	vfnms.f32	s15, s0, s14
 801789e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80178a2:	e7cb      	b.n	801783c <__ieee754_sinhf+0x1c>
 80178a4:	ee70 8a28 	vadd.f32	s17, s0, s17
 80178a8:	eec0 7a28 	vdiv.f32	s15, s0, s17
 80178ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 80178b0:	ee60 7a08 	vmul.f32	s15, s0, s16
 80178b4:	e7c2      	b.n	801783c <__ieee754_sinhf+0x1c>
 80178b6:	4b0e      	ldr	r3, [pc, #56]	; (80178f0 <__ieee754_sinhf+0xd0>)
 80178b8:	429c      	cmp	r4, r3
 80178ba:	dc04      	bgt.n	80178c6 <__ieee754_sinhf+0xa6>
 80178bc:	f7fe f91e 	bl	8015afc <fabsf>
 80178c0:	f7ff f976 	bl	8016bb0 <__ieee754_expf>
 80178c4:	e7f4      	b.n	80178b0 <__ieee754_sinhf+0x90>
 80178c6:	4b0b      	ldr	r3, [pc, #44]	; (80178f4 <__ieee754_sinhf+0xd4>)
 80178c8:	429c      	cmp	r4, r3
 80178ca:	dc08      	bgt.n	80178de <__ieee754_sinhf+0xbe>
 80178cc:	f7fe f916 	bl	8015afc <fabsf>
 80178d0:	ee20 0a28 	vmul.f32	s0, s0, s17
 80178d4:	f7ff f96c 	bl	8016bb0 <__ieee754_expf>
 80178d8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80178dc:	e7e8      	b.n	80178b0 <__ieee754_sinhf+0x90>
 80178de:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80178ec <__ieee754_sinhf+0xcc>
 80178e2:	ee60 7a07 	vmul.f32	s15, s0, s14
 80178e6:	e7a9      	b.n	801783c <__ieee754_sinhf+0x1c>
 80178e8:	41afffff 	.word	0x41afffff
 80178ec:	7cf0bdc2 	.word	0x7cf0bdc2
 80178f0:	42b17217 	.word	0x42b17217
 80178f4:	42b2d4fc 	.word	0x42b2d4fc

080178f8 <scalbnf>:
 80178f8:	ee10 3a10 	vmov	r3, s0
 80178fc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017900:	d02b      	beq.n	801795a <scalbnf+0x62>
 8017902:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017906:	d302      	bcc.n	801790e <scalbnf+0x16>
 8017908:	ee30 0a00 	vadd.f32	s0, s0, s0
 801790c:	4770      	bx	lr
 801790e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017912:	d123      	bne.n	801795c <scalbnf+0x64>
 8017914:	4b24      	ldr	r3, [pc, #144]	; (80179a8 <scalbnf+0xb0>)
 8017916:	eddf 7a25 	vldr	s15, [pc, #148]	; 80179ac <scalbnf+0xb4>
 801791a:	4298      	cmp	r0, r3
 801791c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017920:	db17      	blt.n	8017952 <scalbnf+0x5a>
 8017922:	ee10 3a10 	vmov	r3, s0
 8017926:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801792a:	3a19      	subs	r2, #25
 801792c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017930:	4288      	cmp	r0, r1
 8017932:	dd15      	ble.n	8017960 <scalbnf+0x68>
 8017934:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80179b0 <scalbnf+0xb8>
 8017938:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80179b4 <scalbnf+0xbc>
 801793c:	ee10 3a10 	vmov	r3, s0
 8017940:	eeb0 7a67 	vmov.f32	s14, s15
 8017944:	2b00      	cmp	r3, #0
 8017946:	bfb8      	it	lt
 8017948:	eef0 7a66 	vmovlt.f32	s15, s13
 801794c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8017950:	4770      	bx	lr
 8017952:	eddf 7a19 	vldr	s15, [pc, #100]	; 80179b8 <scalbnf+0xc0>
 8017956:	ee27 0a80 	vmul.f32	s0, s15, s0
 801795a:	4770      	bx	lr
 801795c:	0dd2      	lsrs	r2, r2, #23
 801795e:	e7e5      	b.n	801792c <scalbnf+0x34>
 8017960:	4410      	add	r0, r2
 8017962:	28fe      	cmp	r0, #254	; 0xfe
 8017964:	dce6      	bgt.n	8017934 <scalbnf+0x3c>
 8017966:	2800      	cmp	r0, #0
 8017968:	dd06      	ble.n	8017978 <scalbnf+0x80>
 801796a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801796e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017972:	ee00 3a10 	vmov	s0, r3
 8017976:	4770      	bx	lr
 8017978:	f110 0f16 	cmn.w	r0, #22
 801797c:	da09      	bge.n	8017992 <scalbnf+0x9a>
 801797e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80179b8 <scalbnf+0xc0>
 8017982:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80179bc <scalbnf+0xc4>
 8017986:	ee10 3a10 	vmov	r3, s0
 801798a:	eeb0 7a67 	vmov.f32	s14, s15
 801798e:	2b00      	cmp	r3, #0
 8017990:	e7d9      	b.n	8017946 <scalbnf+0x4e>
 8017992:	3019      	adds	r0, #25
 8017994:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017998:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801799c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80179c0 <scalbnf+0xc8>
 80179a0:	ee07 3a90 	vmov	s15, r3
 80179a4:	e7d7      	b.n	8017956 <scalbnf+0x5e>
 80179a6:	bf00      	nop
 80179a8:	ffff3cb0 	.word	0xffff3cb0
 80179ac:	4c000000 	.word	0x4c000000
 80179b0:	7149f2ca 	.word	0x7149f2ca
 80179b4:	f149f2ca 	.word	0xf149f2ca
 80179b8:	0da24260 	.word	0x0da24260
 80179bc:	8da24260 	.word	0x8da24260
 80179c0:	33000000 	.word	0x33000000

080179c4 <__kernel_rem_pio2f>:
 80179c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179c8:	ed2d 8b04 	vpush	{d8-d9}
 80179cc:	b0d9      	sub	sp, #356	; 0x164
 80179ce:	4688      	mov	r8, r1
 80179d0:	9002      	str	r0, [sp, #8]
 80179d2:	49b8      	ldr	r1, [pc, #736]	; (8017cb4 <__kernel_rem_pio2f+0x2f0>)
 80179d4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80179d6:	9301      	str	r3, [sp, #4]
 80179d8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80179dc:	9901      	ldr	r1, [sp, #4]
 80179de:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80179e0:	f101 3bff 	add.w	fp, r1, #4294967295
 80179e4:	1d11      	adds	r1, r2, #4
 80179e6:	db25      	blt.n	8017a34 <__kernel_rem_pio2f+0x70>
 80179e8:	1ed0      	subs	r0, r2, #3
 80179ea:	bf48      	it	mi
 80179ec:	1d10      	addmi	r0, r2, #4
 80179ee:	10c0      	asrs	r0, r0, #3
 80179f0:	1c45      	adds	r5, r0, #1
 80179f2:	00e9      	lsls	r1, r5, #3
 80179f4:	eba0 070b 	sub.w	r7, r0, fp
 80179f8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 80179fc:	9103      	str	r1, [sp, #12]
 80179fe:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8017a02:	eb0a 0c0b 	add.w	ip, sl, fp
 8017a06:	ae1c      	add	r6, sp, #112	; 0x70
 8017a08:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8017a0c:	2400      	movs	r4, #0
 8017a0e:	4564      	cmp	r4, ip
 8017a10:	dd12      	ble.n	8017a38 <__kernel_rem_pio2f+0x74>
 8017a12:	9901      	ldr	r1, [sp, #4]
 8017a14:	ac1c      	add	r4, sp, #112	; 0x70
 8017a16:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017a1a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8017a1e:	f04f 0c00 	mov.w	ip, #0
 8017a22:	45d4      	cmp	ip, sl
 8017a24:	dc27      	bgt.n	8017a76 <__kernel_rem_pio2f+0xb2>
 8017a26:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017a2a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017a2e:	4627      	mov	r7, r4
 8017a30:	2600      	movs	r6, #0
 8017a32:	e016      	b.n	8017a62 <__kernel_rem_pio2f+0x9e>
 8017a34:	2000      	movs	r0, #0
 8017a36:	e7db      	b.n	80179f0 <__kernel_rem_pio2f+0x2c>
 8017a38:	42e7      	cmn	r7, r4
 8017a3a:	bf5d      	ittte	pl
 8017a3c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8017a40:	ee07 1a90 	vmovpl	s15, r1
 8017a44:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017a48:	eef0 7a47 	vmovmi.f32	s15, s14
 8017a4c:	ece6 7a01 	vstmia	r6!, {s15}
 8017a50:	3401      	adds	r4, #1
 8017a52:	e7dc      	b.n	8017a0e <__kernel_rem_pio2f+0x4a>
 8017a54:	ecfe 6a01 	vldmia	lr!, {s13}
 8017a58:	ed97 7a00 	vldr	s14, [r7]
 8017a5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017a60:	3601      	adds	r6, #1
 8017a62:	455e      	cmp	r6, fp
 8017a64:	f1a7 0704 	sub.w	r7, r7, #4
 8017a68:	ddf4      	ble.n	8017a54 <__kernel_rem_pio2f+0x90>
 8017a6a:	ece9 7a01 	vstmia	r9!, {s15}
 8017a6e:	f10c 0c01 	add.w	ip, ip, #1
 8017a72:	3404      	adds	r4, #4
 8017a74:	e7d5      	b.n	8017a22 <__kernel_rem_pio2f+0x5e>
 8017a76:	a908      	add	r1, sp, #32
 8017a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017a7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017a80:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8017cc0 <__kernel_rem_pio2f+0x2fc>
 8017a84:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8017cbc <__kernel_rem_pio2f+0x2f8>
 8017a88:	9105      	str	r1, [sp, #20]
 8017a8a:	9304      	str	r3, [sp, #16]
 8017a8c:	4656      	mov	r6, sl
 8017a8e:	00b3      	lsls	r3, r6, #2
 8017a90:	9306      	str	r3, [sp, #24]
 8017a92:	ab58      	add	r3, sp, #352	; 0x160
 8017a94:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017a98:	ac08      	add	r4, sp, #32
 8017a9a:	ab44      	add	r3, sp, #272	; 0x110
 8017a9c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8017aa0:	46a4      	mov	ip, r4
 8017aa2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017aa6:	4637      	mov	r7, r6
 8017aa8:	2f00      	cmp	r7, #0
 8017aaa:	f1a0 0004 	sub.w	r0, r0, #4
 8017aae:	dc4a      	bgt.n	8017b46 <__kernel_rem_pio2f+0x182>
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	9207      	str	r2, [sp, #28]
 8017ab4:	f7ff ff20 	bl	80178f8 <scalbnf>
 8017ab8:	eeb0 8a40 	vmov.f32	s16, s0
 8017abc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8017ac0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017ac4:	f7fe fbb0 	bl	8016228 <floorf>
 8017ac8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8017acc:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017ad0:	2d00      	cmp	r5, #0
 8017ad2:	9a07      	ldr	r2, [sp, #28]
 8017ad4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017ad8:	ee17 9a90 	vmov	r9, s15
 8017adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ae0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017ae4:	dd41      	ble.n	8017b6a <__kernel_rem_pio2f+0x1a6>
 8017ae6:	f106 3cff 	add.w	ip, r6, #4294967295
 8017aea:	ab08      	add	r3, sp, #32
 8017aec:	f1c5 0e08 	rsb	lr, r5, #8
 8017af0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8017af4:	fa47 f00e 	asr.w	r0, r7, lr
 8017af8:	4481      	add	r9, r0
 8017afa:	fa00 f00e 	lsl.w	r0, r0, lr
 8017afe:	1a3f      	subs	r7, r7, r0
 8017b00:	f1c5 0007 	rsb	r0, r5, #7
 8017b04:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8017b08:	4107      	asrs	r7, r0
 8017b0a:	2f00      	cmp	r7, #0
 8017b0c:	dd3c      	ble.n	8017b88 <__kernel_rem_pio2f+0x1c4>
 8017b0e:	f04f 0e00 	mov.w	lr, #0
 8017b12:	f109 0901 	add.w	r9, r9, #1
 8017b16:	4671      	mov	r1, lr
 8017b18:	4576      	cmp	r6, lr
 8017b1a:	dc67      	bgt.n	8017bec <__kernel_rem_pio2f+0x228>
 8017b1c:	2d00      	cmp	r5, #0
 8017b1e:	dd03      	ble.n	8017b28 <__kernel_rem_pio2f+0x164>
 8017b20:	2d01      	cmp	r5, #1
 8017b22:	d074      	beq.n	8017c0e <__kernel_rem_pio2f+0x24a>
 8017b24:	2d02      	cmp	r5, #2
 8017b26:	d07b      	beq.n	8017c20 <__kernel_rem_pio2f+0x25c>
 8017b28:	2f02      	cmp	r7, #2
 8017b2a:	d12d      	bne.n	8017b88 <__kernel_rem_pio2f+0x1c4>
 8017b2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017b30:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017b34:	b341      	cbz	r1, 8017b88 <__kernel_rem_pio2f+0x1c4>
 8017b36:	4628      	mov	r0, r5
 8017b38:	9207      	str	r2, [sp, #28]
 8017b3a:	f7ff fedd 	bl	80178f8 <scalbnf>
 8017b3e:	9a07      	ldr	r2, [sp, #28]
 8017b40:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017b44:	e020      	b.n	8017b88 <__kernel_rem_pio2f+0x1c4>
 8017b46:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017b4a:	3f01      	subs	r7, #1
 8017b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b54:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017b58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017b5c:	ecac 0a01 	vstmia	ip!, {s0}
 8017b60:	ed90 0a00 	vldr	s0, [r0]
 8017b64:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017b68:	e79e      	b.n	8017aa8 <__kernel_rem_pio2f+0xe4>
 8017b6a:	d105      	bne.n	8017b78 <__kernel_rem_pio2f+0x1b4>
 8017b6c:	1e70      	subs	r0, r6, #1
 8017b6e:	ab08      	add	r3, sp, #32
 8017b70:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8017b74:	11ff      	asrs	r7, r7, #7
 8017b76:	e7c8      	b.n	8017b0a <__kernel_rem_pio2f+0x146>
 8017b78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017b7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b84:	da30      	bge.n	8017be8 <__kernel_rem_pio2f+0x224>
 8017b86:	2700      	movs	r7, #0
 8017b88:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b90:	f040 809a 	bne.w	8017cc8 <__kernel_rem_pio2f+0x304>
 8017b94:	1e74      	subs	r4, r6, #1
 8017b96:	46a4      	mov	ip, r4
 8017b98:	2100      	movs	r1, #0
 8017b9a:	45d4      	cmp	ip, sl
 8017b9c:	da47      	bge.n	8017c2e <__kernel_rem_pio2f+0x26a>
 8017b9e:	2900      	cmp	r1, #0
 8017ba0:	d063      	beq.n	8017c6a <__kernel_rem_pio2f+0x2a6>
 8017ba2:	ab08      	add	r3, sp, #32
 8017ba4:	3d08      	subs	r5, #8
 8017ba6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d07f      	beq.n	8017cae <__kernel_rem_pio2f+0x2ea>
 8017bae:	4628      	mov	r0, r5
 8017bb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017bb4:	f7ff fea0 	bl	80178f8 <scalbnf>
 8017bb8:	1c63      	adds	r3, r4, #1
 8017bba:	aa44      	add	r2, sp, #272	; 0x110
 8017bbc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8017cc0 <__kernel_rem_pio2f+0x2fc>
 8017bc0:	0099      	lsls	r1, r3, #2
 8017bc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017bc6:	4623      	mov	r3, r4
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f280 80ad 	bge.w	8017d28 <__kernel_rem_pio2f+0x364>
 8017bce:	4623      	mov	r3, r4
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	f2c0 80cb 	blt.w	8017d6c <__kernel_rem_pio2f+0x3a8>
 8017bd6:	aa44      	add	r2, sp, #272	; 0x110
 8017bd8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017bdc:	4e36      	ldr	r6, [pc, #216]	; (8017cb8 <__kernel_rem_pio2f+0x2f4>)
 8017bde:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017be2:	2000      	movs	r0, #0
 8017be4:	1ae2      	subs	r2, r4, r3
 8017be6:	e0b6      	b.n	8017d56 <__kernel_rem_pio2f+0x392>
 8017be8:	2702      	movs	r7, #2
 8017bea:	e790      	b.n	8017b0e <__kernel_rem_pio2f+0x14a>
 8017bec:	6820      	ldr	r0, [r4, #0]
 8017bee:	b949      	cbnz	r1, 8017c04 <__kernel_rem_pio2f+0x240>
 8017bf0:	b118      	cbz	r0, 8017bfa <__kernel_rem_pio2f+0x236>
 8017bf2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017bf6:	6020      	str	r0, [r4, #0]
 8017bf8:	2001      	movs	r0, #1
 8017bfa:	f10e 0e01 	add.w	lr, lr, #1
 8017bfe:	3404      	adds	r4, #4
 8017c00:	4601      	mov	r1, r0
 8017c02:	e789      	b.n	8017b18 <__kernel_rem_pio2f+0x154>
 8017c04:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017c08:	6020      	str	r0, [r4, #0]
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	e7f5      	b.n	8017bfa <__kernel_rem_pio2f+0x236>
 8017c0e:	1e74      	subs	r4, r6, #1
 8017c10:	ab08      	add	r3, sp, #32
 8017c12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8017c1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017c1e:	e783      	b.n	8017b28 <__kernel_rem_pio2f+0x164>
 8017c20:	1e74      	subs	r4, r6, #1
 8017c22:	ab08      	add	r3, sp, #32
 8017c24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8017c2c:	e7f5      	b.n	8017c1a <__kernel_rem_pio2f+0x256>
 8017c2e:	ab08      	add	r3, sp, #32
 8017c30:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8017c34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017c38:	4301      	orrs	r1, r0
 8017c3a:	e7ae      	b.n	8017b9a <__kernel_rem_pio2f+0x1d6>
 8017c3c:	3001      	adds	r0, #1
 8017c3e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8017c42:	2f00      	cmp	r7, #0
 8017c44:	d0fa      	beq.n	8017c3c <__kernel_rem_pio2f+0x278>
 8017c46:	9b06      	ldr	r3, [sp, #24]
 8017c48:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8017c4c:	eb0d 0403 	add.w	r4, sp, r3
 8017c50:	9b01      	ldr	r3, [sp, #4]
 8017c52:	18f7      	adds	r7, r6, r3
 8017c54:	ab1c      	add	r3, sp, #112	; 0x70
 8017c56:	f106 0c01 	add.w	ip, r6, #1
 8017c5a:	3c4c      	subs	r4, #76	; 0x4c
 8017c5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017c60:	4430      	add	r0, r6
 8017c62:	4560      	cmp	r0, ip
 8017c64:	da04      	bge.n	8017c70 <__kernel_rem_pio2f+0x2ac>
 8017c66:	4606      	mov	r6, r0
 8017c68:	e711      	b.n	8017a8e <__kernel_rem_pio2f+0xca>
 8017c6a:	9c05      	ldr	r4, [sp, #20]
 8017c6c:	2001      	movs	r0, #1
 8017c6e:	e7e6      	b.n	8017c3e <__kernel_rem_pio2f+0x27a>
 8017c70:	9b04      	ldr	r3, [sp, #16]
 8017c72:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017c76:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017c7a:	9306      	str	r3, [sp, #24]
 8017c7c:	ee07 3a90 	vmov	s15, r3
 8017c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c84:	2600      	movs	r6, #0
 8017c86:	ece7 7a01 	vstmia	r7!, {s15}
 8017c8a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017c8e:	46b9      	mov	r9, r7
 8017c90:	455e      	cmp	r6, fp
 8017c92:	dd04      	ble.n	8017c9e <__kernel_rem_pio2f+0x2da>
 8017c94:	ece4 7a01 	vstmia	r4!, {s15}
 8017c98:	f10c 0c01 	add.w	ip, ip, #1
 8017c9c:	e7e1      	b.n	8017c62 <__kernel_rem_pio2f+0x29e>
 8017c9e:	ecfe 6a01 	vldmia	lr!, {s13}
 8017ca2:	ed39 7a01 	vldmdb	r9!, {s14}
 8017ca6:	3601      	adds	r6, #1
 8017ca8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017cac:	e7f0      	b.n	8017c90 <__kernel_rem_pio2f+0x2cc>
 8017cae:	3c01      	subs	r4, #1
 8017cb0:	e777      	b.n	8017ba2 <__kernel_rem_pio2f+0x1de>
 8017cb2:	bf00      	nop
 8017cb4:	0814fe3c 	.word	0x0814fe3c
 8017cb8:	0814fe10 	.word	0x0814fe10
 8017cbc:	43800000 	.word	0x43800000
 8017cc0:	3b800000 	.word	0x3b800000
 8017cc4:	00000000 	.word	0x00000000
 8017cc8:	9b03      	ldr	r3, [sp, #12]
 8017cca:	eeb0 0a48 	vmov.f32	s0, s16
 8017cce:	1a98      	subs	r0, r3, r2
 8017cd0:	f7ff fe12 	bl	80178f8 <scalbnf>
 8017cd4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8017cbc <__kernel_rem_pio2f+0x2f8>
 8017cd8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ce0:	db19      	blt.n	8017d16 <__kernel_rem_pio2f+0x352>
 8017ce2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8017cc0 <__kernel_rem_pio2f+0x2fc>
 8017ce6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017cea:	aa08      	add	r2, sp, #32
 8017cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017cf0:	1c74      	adds	r4, r6, #1
 8017cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017cf6:	3508      	adds	r5, #8
 8017cf8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017d04:	ee10 3a10 	vmov	r3, s0
 8017d08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017d0c:	ee17 3a90 	vmov	r3, s15
 8017d10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017d14:	e74b      	b.n	8017bae <__kernel_rem_pio2f+0x1ea>
 8017d16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017d1a:	aa08      	add	r2, sp, #32
 8017d1c:	ee10 3a10 	vmov	r3, s0
 8017d20:	4634      	mov	r4, r6
 8017d22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017d26:	e742      	b.n	8017bae <__kernel_rem_pio2f+0x1ea>
 8017d28:	a808      	add	r0, sp, #32
 8017d2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8017d2e:	9001      	str	r0, [sp, #4]
 8017d30:	ee07 0a90 	vmov	s15, r0
 8017d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d38:	3b01      	subs	r3, #1
 8017d3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017d3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017d42:	ed62 7a01 	vstmdb	r2!, {s15}
 8017d46:	e73f      	b.n	8017bc8 <__kernel_rem_pio2f+0x204>
 8017d48:	ecf6 6a01 	vldmia	r6!, {s13}
 8017d4c:	ecb5 7a01 	vldmia	r5!, {s14}
 8017d50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017d54:	3001      	adds	r0, #1
 8017d56:	4550      	cmp	r0, sl
 8017d58:	dc01      	bgt.n	8017d5e <__kernel_rem_pio2f+0x39a>
 8017d5a:	4290      	cmp	r0, r2
 8017d5c:	ddf4      	ble.n	8017d48 <__kernel_rem_pio2f+0x384>
 8017d5e:	a858      	add	r0, sp, #352	; 0x160
 8017d60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017d64:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8017d68:	3b01      	subs	r3, #1
 8017d6a:	e731      	b.n	8017bd0 <__kernel_rem_pio2f+0x20c>
 8017d6c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8017d6e:	2b02      	cmp	r3, #2
 8017d70:	dc09      	bgt.n	8017d86 <__kernel_rem_pio2f+0x3c2>
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	dc2b      	bgt.n	8017dce <__kernel_rem_pio2f+0x40a>
 8017d76:	d044      	beq.n	8017e02 <__kernel_rem_pio2f+0x43e>
 8017d78:	f009 0007 	and.w	r0, r9, #7
 8017d7c:	b059      	add	sp, #356	; 0x164
 8017d7e:	ecbd 8b04 	vpop	{d8-d9}
 8017d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8017d88:	2b03      	cmp	r3, #3
 8017d8a:	d1f5      	bne.n	8017d78 <__kernel_rem_pio2f+0x3b4>
 8017d8c:	aa30      	add	r2, sp, #192	; 0xc0
 8017d8e:	1f0b      	subs	r3, r1, #4
 8017d90:	4413      	add	r3, r2
 8017d92:	461a      	mov	r2, r3
 8017d94:	4620      	mov	r0, r4
 8017d96:	2800      	cmp	r0, #0
 8017d98:	f1a2 0204 	sub.w	r2, r2, #4
 8017d9c:	dc52      	bgt.n	8017e44 <__kernel_rem_pio2f+0x480>
 8017d9e:	4622      	mov	r2, r4
 8017da0:	2a01      	cmp	r2, #1
 8017da2:	f1a3 0304 	sub.w	r3, r3, #4
 8017da6:	dc5d      	bgt.n	8017e64 <__kernel_rem_pio2f+0x4a0>
 8017da8:	ab30      	add	r3, sp, #192	; 0xc0
 8017daa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017dae:	440b      	add	r3, r1
 8017db0:	2c01      	cmp	r4, #1
 8017db2:	dc67      	bgt.n	8017e84 <__kernel_rem_pio2f+0x4c0>
 8017db4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017db8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8017dbc:	2f00      	cmp	r7, #0
 8017dbe:	d167      	bne.n	8017e90 <__kernel_rem_pio2f+0x4cc>
 8017dc0:	edc8 6a00 	vstr	s13, [r8]
 8017dc4:	ed88 7a01 	vstr	s14, [r8, #4]
 8017dc8:	edc8 7a02 	vstr	s15, [r8, #8]
 8017dcc:	e7d4      	b.n	8017d78 <__kernel_rem_pio2f+0x3b4>
 8017dce:	ab30      	add	r3, sp, #192	; 0xc0
 8017dd0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017dd4:	440b      	add	r3, r1
 8017dd6:	4622      	mov	r2, r4
 8017dd8:	2a00      	cmp	r2, #0
 8017dda:	da24      	bge.n	8017e26 <__kernel_rem_pio2f+0x462>
 8017ddc:	b34f      	cbz	r7, 8017e32 <__kernel_rem_pio2f+0x46e>
 8017dde:	eef1 7a47 	vneg.f32	s15, s14
 8017de2:	edc8 7a00 	vstr	s15, [r8]
 8017de6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8017dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017dee:	aa31      	add	r2, sp, #196	; 0xc4
 8017df0:	2301      	movs	r3, #1
 8017df2:	429c      	cmp	r4, r3
 8017df4:	da20      	bge.n	8017e38 <__kernel_rem_pio2f+0x474>
 8017df6:	b10f      	cbz	r7, 8017dfc <__kernel_rem_pio2f+0x438>
 8017df8:	eef1 7a67 	vneg.f32	s15, s15
 8017dfc:	edc8 7a01 	vstr	s15, [r8, #4]
 8017e00:	e7ba      	b.n	8017d78 <__kernel_rem_pio2f+0x3b4>
 8017e02:	ab30      	add	r3, sp, #192	; 0xc0
 8017e04:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8017cc4 <__kernel_rem_pio2f+0x300>
 8017e08:	440b      	add	r3, r1
 8017e0a:	2c00      	cmp	r4, #0
 8017e0c:	da05      	bge.n	8017e1a <__kernel_rem_pio2f+0x456>
 8017e0e:	b10f      	cbz	r7, 8017e14 <__kernel_rem_pio2f+0x450>
 8017e10:	eef1 7a67 	vneg.f32	s15, s15
 8017e14:	edc8 7a00 	vstr	s15, [r8]
 8017e18:	e7ae      	b.n	8017d78 <__kernel_rem_pio2f+0x3b4>
 8017e1a:	ed33 7a01 	vldmdb	r3!, {s14}
 8017e1e:	3c01      	subs	r4, #1
 8017e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017e24:	e7f1      	b.n	8017e0a <__kernel_rem_pio2f+0x446>
 8017e26:	ed73 7a01 	vldmdb	r3!, {s15}
 8017e2a:	3a01      	subs	r2, #1
 8017e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017e30:	e7d2      	b.n	8017dd8 <__kernel_rem_pio2f+0x414>
 8017e32:	eef0 7a47 	vmov.f32	s15, s14
 8017e36:	e7d4      	b.n	8017de2 <__kernel_rem_pio2f+0x41e>
 8017e38:	ecb2 7a01 	vldmia	r2!, {s14}
 8017e3c:	3301      	adds	r3, #1
 8017e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017e42:	e7d6      	b.n	8017df2 <__kernel_rem_pio2f+0x42e>
 8017e44:	edd2 7a00 	vldr	s15, [r2]
 8017e48:	edd2 6a01 	vldr	s13, [r2, #4]
 8017e4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017e50:	3801      	subs	r0, #1
 8017e52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e56:	ed82 7a00 	vstr	s14, [r2]
 8017e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017e5e:	edc2 7a01 	vstr	s15, [r2, #4]
 8017e62:	e798      	b.n	8017d96 <__kernel_rem_pio2f+0x3d2>
 8017e64:	edd3 7a00 	vldr	s15, [r3]
 8017e68:	edd3 6a01 	vldr	s13, [r3, #4]
 8017e6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017e70:	3a01      	subs	r2, #1
 8017e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e76:	ed83 7a00 	vstr	s14, [r3]
 8017e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017e7e:	edc3 7a01 	vstr	s15, [r3, #4]
 8017e82:	e78d      	b.n	8017da0 <__kernel_rem_pio2f+0x3dc>
 8017e84:	ed33 7a01 	vldmdb	r3!, {s14}
 8017e88:	3c01      	subs	r4, #1
 8017e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017e8e:	e78f      	b.n	8017db0 <__kernel_rem_pio2f+0x3ec>
 8017e90:	eef1 6a66 	vneg.f32	s13, s13
 8017e94:	eeb1 7a47 	vneg.f32	s14, s14
 8017e98:	edc8 6a00 	vstr	s13, [r8]
 8017e9c:	ed88 7a01 	vstr	s14, [r8, #4]
 8017ea0:	eef1 7a67 	vneg.f32	s15, s15
 8017ea4:	e790      	b.n	8017dc8 <__kernel_rem_pio2f+0x404>
 8017ea6:	bf00      	nop

08017ea8 <_init>:
 8017ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eaa:	bf00      	nop
 8017eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eae:	bc08      	pop	{r3}
 8017eb0:	469e      	mov	lr, r3
 8017eb2:	4770      	bx	lr

08017eb4 <_fini>:
 8017eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb6:	bf00      	nop
 8017eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eba:	bc08      	pop	{r3}
 8017ebc:	469e      	mov	lr, r3
 8017ebe:	4770      	bx	lr
